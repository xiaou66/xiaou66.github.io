{
    "version": "https://jsonfeed.org/version/1",
    "title": "xiaou博客",
    "subtitle": "",
    "icon": "https://blog.xiaou.icu/images/favicon.ico",
    "description": "xiaou博客",
    "home_page_url": "https://blog.xiaou.icu",
    "items": [
        {
            "id": "https://blog.xiaou.icu/mysql/MySQL8.0%20JSON%20%E6%93%8D%E4%BD%9C/",
            "url": "https://blog.xiaou.icu/mysql/MySQL8.0%20JSON%20%E6%93%8D%E4%BD%9C/",
            "title": "MySQL8.0 JSON 操作",
            "date_published": "2022-07-22T03:38:09.000Z",
            "content_html": "<h1 id=\"mysql80-json-操作\"><a class=\"anchor\" href=\"#mysql80-json-操作\">#</a> MySQL8.0 JSON 操作</h1>\n<h2 id=\"json-常用函数\"><a class=\"anchor\" href=\"#json-常用函数\">#</a> JSON 常用函数</h2>\n",
            "tags": [
                "MySQL",
                "sql"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/mysql/B+%E6%A0%91%E7%B4%A2%E5%BC%95%E4%BD%BF%E7%94%A8/",
            "url": "https://blog.xiaou.icu/mysql/B+%E6%A0%91%E7%B4%A2%E5%BC%95%E4%BD%BF%E7%94%A8/",
            "title": "B+树索引的使用",
            "date_published": "2022-05-22T13:08:06.000Z",
            "content_html": "<h1 id=\"innodb-使用的索引方案\"><a class=\"anchor\" href=\"#innodb-使用的索引方案\">#</a> InnoDB 使用的索引方案</h1>\n<h2 id=\"innodb-头记录信息\"><a class=\"anchor\" href=\"#innodb-头记录信息\">#</a> InnoDB 头记录信息</h2>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>record_type</td>\n<td>表示记录的类型</td>\n</tr>\n<tr>\n<td>next_record</td>\n<td>表示记录下一跳记录</td>\n</tr>\n<tr>\n<td>field_info</td>\n<td>字段信息</td>\n</tr>\n<tr>\n<td>其他信息</td>\n<td>表示记录的其他的信息</td>\n</tr>\n</tbody>\n</table>\n<p>record_type 的取值代表下面的意思</p>\n<ul>\n<li>0: 普通的用户记录</li>\n<li>1: 目录记录</li>\n<li>2: Infimum 记录</li>\n<li>3: Superemum 记录</li>\n</ul>\n",
            "tags": [
                "mysql",
                "sql"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/optimize/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%BC%98%E5%8C%96/",
            "url": "https://blog.xiaou.icu/optimize/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%BC%98%E5%8C%96/",
            "title": "记录一次优化",
            "date_published": "2022-05-18T04:47:41.000Z",
            "content_html": "<h1 id=\"记录一次优化\"><a class=\"anchor\" href=\"#记录一次优化\">#</a> 记录一次优化</h1>\n<h2 id=\"mysql-io-操作\"><a class=\"anchor\" href=\"#mysql-io-操作\">#</a> MySQL IO 操作</h2>\n<blockquote>\n<p>MySQL 使用在单表操作时短而快的查询连接，如果使用关联多张表反而出现速度慢的情况，在数据库可用连接多的情况建议拆成单挑 SQL 语句执行。</p>\n</blockquote>\n<h2 id=\"一个接口过慢可以通过下面方式分析\"><a class=\"anchor\" href=\"#一个接口过慢可以通过下面方式分析\">#</a> 一个接口过慢可以通过下面方式分析</h2>\n<ol>\n<li>系统中存不存在慢 SQL</li>\n<li>分析 SQL 数量，在循环中的查询可以的情况下就给它移到循环的外部</li>\n</ol>\n<h2 id=\"使用工具\"><a class=\"anchor\" href=\"#使用工具\">#</a> 使用工具</h2>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnRoYXMuYWxpeXVuLmNvbS9kb2Mv\">Arthas</span> 阿里出品一款分析工具\n<ul>\n<li>使用分析工具可以快速找到目前慢的方法追踪其接口链路。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"找到慢的原因后通用的解决方案\"><a class=\"anchor\" href=\"#找到慢的原因后通用的解决方案\">#</a> 找到慢的原因后通用的解决方案</h2>\n<h3 id=\"sql-问题\"><a class=\"anchor\" href=\"#sql-问题\">#</a> SQL 问题</h3>\n<ol>\n<li>使用  <code>EXPLAIN</code>   分析是否使用了索引</li>\n<li>使用  <code>EXPLAIN FORMAT='tree'</code>  分析执行计算 - 这命令是  <code>MySQL 8.0</code>\n<ul>\n<li>如果版本低于  <code>8.0</code>  可以使用  <code>EXPAIN FORMAT = &quot;JSON&quot;</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"方法问题\"><a class=\"anchor\" href=\"#方法问题\">#</a> 方法问题</h3>\n<ol>\n<li>是否存在实时统计的数据\n<ul>\n<li>判断数据的实时性需求是否高，如果不要可以采用  <code>离线统计</code></li>\n</ul>\n</li>\n<li>是否可以拆成多个接口</li>\n</ol>\n<h3 id=\"本次优化出现问题以后需要注意\"><a class=\"anchor\" href=\"#本次优化出现问题以后需要注意\">#</a> 本次优化出现问题以后需要注意:</h3>\n<ol>\n<li>\n<p>字符集一定要一致</p>\n<ul>\n<li>这次出现测试环境字符集一致到生产环境的时候发现有个字段的字符集不一致导致没有走缩影。</li>\n</ul>\n</li>\n<li>\n<p>在使用  <code>Collectors.toMap()</code>  方法时候一定要填写第三个参数，不管有没有重复的 key 一定确定解决 key 冲突的策略</p>\n</li>\n</ol>\n",
            "tags": [
                "optimize",
                "java"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/springboot/%E5%BC%82%E5%B8%B8%E9%80%9A%E7%9F%A5%E5%A4%84%E7%90%86%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E7%BB%9F%E4%B8%80%E5%B0%81%E8%A3%85/",
            "url": "https://blog.xiaou.icu/springboot/%E5%BC%82%E5%B8%B8%E9%80%9A%E7%9F%A5%E5%A4%84%E7%90%86%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E7%BB%9F%E4%B8%80%E5%B0%81%E8%A3%85/",
            "title": "异常通知处理和返回值统一封装",
            "date_published": "2022-04-01T08:40:15.000Z",
            "content_html": "<h1 id=\"异常通知处理和返回值统一封装\"><a class=\"anchor\" href=\"#异常通知处理和返回值统一封装\">#</a> 异常通知处理和返回值统一封装</h1>\n<p>返回值结果集类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ToString</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultCode</span> resultCode<span class=\"token punctuation\">,</span>  <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> resultCode<span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> resultCode<span class=\"token punctuation\">.</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 返回成功</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUCCESS</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUCCESS</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 失败</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * @param resultCode 错误码</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @return 结果集</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultCode</span> resultCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>resultCode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * 失败</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * @param resultCode 错误码</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * @param data 错误数据</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @return 结果集</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultCode</span> resultCode<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>resultCode<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>返回值码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ResultCode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 成功</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">SUCCESS</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">SYS_ERROR</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"系统错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">ResultCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>指定注解  <code>@ResponseResult</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 结果集包装处理</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author xiaou</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @date 2022/4/1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">ResponseResult</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试 Controller</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseResult</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> produces <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"application/json;charset=utf-8\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数出现错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"111\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>出现异常  <code>java.lang.ClassCastException: xiaou.Entity.Result cannot be cast to java.lang.String</code> 。</p>\n<p>有两种解决方案。</p>\n<p>第一种是直接使用 fastjson 来序列化，fastjson 处理的时候不会报错</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">HttpMessageConverters</span> <span class=\"token function\">custHttpMessageConverter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpMessageConverters</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FastJsonHttpMessageConverter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第二种方案不想项目引入 fastjson，就直接用 SpringBoot 自带的 jackson 处理，需要将 jackson 序列化的处理调整到最前面。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configureMessageConverters</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HttpMessageConverter</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> converters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        converters<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MappingJackson2HttpMessageConverter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote applicationjson;charset=\"utf-8\">\n<p>注意采取第二种做法时，需要在接口上指定 produces =</p>\n</blockquote>\n<p><strong>统一处理</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ControllerAdvice</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResponseResultHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ResponseBodyAdvice</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> returnType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpMessageConverter</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> converterType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ServletRequestAttributes</span> servletRequestAttributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequestAttributes</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">RequestContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRequestAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> servletRequestAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ResponseResult</span> attribute <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ResponseResult</span><span class=\"token punctuation\">)</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResponseResultInterceptor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RESPONSE_RESULT_ANN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>attribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">beforeBodyWrite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> body<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodParameter</span> returnType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MediaType</span> selectedContentType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpMessageConverter</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> selectedConverterType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServerHttpRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServerHttpResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 参数异常处理</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @return Result&lt;Object></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">argumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SYS_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"效果\"><a class=\"anchor\" href=\"#效果\">#</a> 效果</h2>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// http://localhost:8080/test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"系统错误\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// http://localhost:8080/test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"111\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "springboot",
                "java"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/springboot/BeanFactory%E6%89%A9%E5%B1%95/",
            "url": "https://blog.xiaou.icu/springboot/BeanFactory%E6%89%A9%E5%B1%95/",
            "title": "BeanFactory 扩展",
            "date_published": "2022-03-22T01:21:12.000Z",
            "content_html": "<h1 id=\"beanfactory扩展\"><a class=\"anchor\" href=\"#beanfactory扩展\">#</a> BeanFactory 扩展</h1>\n<blockquote>\n<p>Spring 中有 2 个非常重要的接口：BeanFactoryPostProcessor 和 BeanDefinitionRegistryPostProcessor，这 2 个接口。</p>\n</blockquote>\n<h2 id=\"spring-容器中主要的-4-个阶段\"><a class=\"anchor\" href=\"#spring-容器中主要的-4-个阶段\">#</a> Spring 容器中主要的 4 个阶段</h2>\n<ol>\n<li>阶段 1：Bean 注册阶段，此阶段会完成所有 bean 的注册。</li>\n<li>阶段 2：BeanFactory 后置处理阶段。</li>\n<li>阶段 3：注册 BeanPostProcessor</li>\n<li>阶段 4：Bean 插件阶段，此阶段完成所有单例 Bean 的注册和装载操作。</li>\n</ol>\n<h2 id=\"阶段1bean-注册阶段\"><a class=\"anchor\" href=\"#阶段1bean-注册阶段\">#</a> 阶段 1：Bean 注册阶段</h2>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<p>spring 中所有 bean 的注册都会在此阶段完成，按照规范，所有 bean 的注册必须在此阶段进行，其他阶段<br />\n不要再进行 bean 的注册。</p>\n<p>这个阶段 spring 为我们提供 1 个接口：BeanDefinitionRegistryPostProcessor，spring 容器在这个阶段<br />\n中会获取容器中所有类型为  <code>BeanDefinitionRegistryPostProcessor</code>  的 bean，然后会调用他们的<br />\n <code>postProcessBeanDefinitionRegistry</code>  方法，源码如下，方法参数类型是<br />\n <code>BeanDefinitionRegistry</code>  ，这个类型大家都比较熟悉，即 bean 定义注册器，内部提供了一些方法可<br />\n以用来向容器中注册 bean。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span> <span class=\"token keyword\">extends</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">BeanFactoryPostProcessor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanDefinitionRegistry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个接口还继承了  <code>BeanFactoryPostProcessor</code>  接口。</p>\n<p>当容器中有多个  <code>BeanDefinitionRegistryPostProcessor</code>  的时候，可以通过下面任意一种方式来指定顺序。</p>\n<ol>\n<li>实现  <code>org.springframework.core.PriorityOrdered</code>  接口</li>\n<li>实现  <code>org.springframework.core.Ordered</code>  接口</li>\n</ol>\n<p><strong>执行顺序</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">PriorityOrdered</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> asc<span class=\"token punctuation\">,</span><span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> asc</pre></td></tr></table></figure><h3 id=\"beandefinitionregistrypostprocessor-简单使用\"><a class=\"anchor\" href=\"#beandefinitionregistrypostprocessor-简单使用\">#</a> BeanDefinitionRegistryPostProcessor 简单使用</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanDefinitionRegistryPostProcessor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanDefinitionRegistry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">AbstractBeanDefinition</span> userNameBdf <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">addConstructorArgValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaou\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> userNameBdf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code class=\"language-JAVA\">@ComponentScan\npublic class MyMainConfigure &#123;&#125;\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试方法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyMainConfigure</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>xiaou\n</code></pre>\n<h3 id=\"多个指定顺序\"><a class=\"anchor\" href=\"#多个指定顺序\">#</a> 多个指定顺序</h3>\n<p>下面我们定义 2 个  <code>BeanDefinitionRegistryPostProcessor</code>  ，都实现 Ordered 接口，第一个 order 的 值为 2，第二个 order 的值为 1，我们来看一下具体执行的顺序。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanDefinitionRegistryPostProcessor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanDefinitionRegistry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">AbstractBeanDefinition</span> userNameBdf <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">addConstructorArgValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaou\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> userNameBdf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanDefinitionRegistryPostProcessor2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanDefinitionRegistry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">AbstractBeanDefinition</span> userNameBdf <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">addConstructorArgValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"把卡把卡\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"petName\"</span><span class=\"token punctuation\">,</span> userNameBdf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>测试方法</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyMainConfigure</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeansOfType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>             <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s->%s\"</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>petName-&gt;把卡把卡\nusername-&gt;xiaou\n</code></pre>\n<h2 id=\"beanfactory-后置处理阶段\"><a class=\"anchor\" href=\"#beanfactory-后置处理阶段\">#</a> BeanFactory 后置处理阶段</h2>\n<h3 id=\"描述\"><a class=\"anchor\" href=\"#描述\">#</a> 描述</h3>\n<p>在这个阶段 Spring 容器已经完成所有 bean 的注册，这个阶段中可以对 BeanFactory 中的一下信息进行修改，比如改阶段 1 中一些 bean 的定义信息，修改 BeanFactory 的一些配置等等，此阶段 spring 也提供了一个接口来进行扩展： BeanFactoryPostProcessor ，简称 bfpp ，接口中有个方法  <code>postProcessBeanFactory</code>  ，spring 会获取容器中所有 BeanFactoryPostProcessor 类型的 bean，然后调用他们的  <code>postProcessBeanFactory</code>  ，来看一下这个接口的源码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当容器中有多个  <code>BeanFactoryPostProcessor</code>  的时候，可以通过下面任意一种方式来指定顺序</p>\n<ol>\n<li>实现  <code>org.springframework.core.PriorityOrdered</code>  接口</li>\n<li>实现  <code>org.springframework.core.Ordered</code>  接口</li>\n</ol>\n<p>执行顺序</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">PriorityOrdered</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> asc<span class=\"token punctuation\">,</span><span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> asc</pre></td></tr></table></figure><h3 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h3>\n<blockquote>\n<p>在 BeanFactoryPostProcessor 来修改 bean 中已经注册的 bean 定义的信息，给一个 bean 属性设置一个值。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanFactoryPostProcessor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"准备修改类信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">BeanDefinition</span> user1 <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        user1<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaoY\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>user1 Bean</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Users</span> <span class=\"token function\">user1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1 被执行了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Users</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaou\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>测试方法</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyMainConfigure</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>准备修改类信息\nUsers(name=xiaoY, age=18, father=null)\n</code></pre>\n",
            "tags": [
                "springboot",
                "java"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/springboot/Spring%20Bean%20%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/",
            "url": "https://blog.xiaou.icu/springboot/Spring%20Bean%20%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/",
            "title": "Spring Bean 循环依赖",
            "date_published": "2022-03-18T01:06:07.000Z",
            "content_html": "<h1 id=\"spring-bean-循环依赖\"><a class=\"anchor\" href=\"#spring-bean-循环依赖\">#</a> Spring Bean 循环依赖</h1>\n<h2 id=\"什么是循环依赖\"><a class=\"anchor\" href=\"#什么是循环依赖\">#</a> 什么是循环依赖</h2>\n<p>bean 之间相互依赖，形成了一个闭环。</p>\n<p>A 依赖于 B、B 依赖于 C、C 依赖于 A。</p>\n<p><strong>图示例</strong></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/xiaou66/picture@master/image/1647595130747image-20220318091134489.png\" alt=\"image-20220318091134489\" /></p>\n<p><strong>代码示例</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">B</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">C</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">A</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"循环依赖怎么检测\"><a class=\"anchor\" href=\"#循环依赖怎么检测\">#</a> 循环依赖怎么检测</h2>\n<p>检测循环依赖比较简单，使用一个列表来记录正在创建中的 Bean，Bean 创建之前，先去记录中看一下 自己是否已经在列表中了，如果在，说明存在循环依赖，如果不在，则将其加入到这个列表，Bean  完毕之后，将其再从这个列表中移除。</p>\n<p>在 Spring 创建单例 Bean 的时候，会调用下面的方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeSingletonCreation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inCreationCheckExclusions<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonsCurrentlyInCreation<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanCurrentlyInCreationException</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>singletonsCurrentlyInCreation</code>  用来记录目前正在创建中的 Bean 名称列表，如果  <code>!this.singletonsCurrentlyInCreation.add(beanName)</code>  返回的 false 那么说明了当前 BeanName 已经在当前列表中了，所以到抛出异常  <code>BeanCurrentlyInCreationException</code> 。这个异常的构造器是</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">BeanCurrentlyInCreationException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          <span class=\"token string\">\"Requested bean is currently in creation: Is there an unresolvable circular reference?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面是单例 bean 检测循环依赖处理的源码，再来看看非单例 bean 如何处理循环依赖。</p>\n<p>以 prototype 情况为例，源码位于<br />\n <code>org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean</code>  方法中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 检查正在创建的 bean 列表中是否存在 beanName，如果存在，说明存在循环依赖，抛出循环依赖的异常</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPrototypeCurrentlyInCreation</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanCurrentlyInCreationException</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Object</span> prototypeInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 将 beanName 放入正在创建的列表中</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">beforePrototypeCreation</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        prototypeInstance <span class=\"token operator\">=</span> <span class=\"token function\">createBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 将 beanName 从正在创建的列表中移除</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">afterPrototypeCreation</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"spring-中解决循环依赖方案\"><a class=\"anchor\" href=\"#spring-中解决循环依赖方案\">#</a> Spring 中解决循环依赖方案</h2>\n<p>在 Spring 创建 Bean 主要的几个步骤</p>\n<ol>\n<li>实例化 Bean，即调用构造器创建 Bean 实例。</li>\n<li>注入 Bean，比如通过 Set 方式、@Autowired 注解的方式注入依赖 Bean。</li>\n<li>Bean 的初始化，比如调用 init 的方法。</li>\n</ol>\n<p>从上述的 Bean 的创建步骤中可以看出可能出现循环依赖步骤是 <strong>注入 Bean</strong> 和在 <strong>构造器注入</strong>。</p>\n<h3 id=\"构造器的依赖注入实例\"><a class=\"anchor\" href=\"#构造器的依赖注入实例\">#</a> 构造器的依赖注入实例</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ServiceB</span> serviceB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ServiceA</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceB</span> serviceB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceB <span class=\"token operator\">=</span> serviceB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceB</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ServiceA</span> serviceA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ServiceB</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceA</span> serviceA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceA <span class=\"token operator\">=</span> serviceA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>实例化 ServiceA 的时候，需要有 serviceB，而实例化 ServiceB 的时候需要有 serviceA，<strong>构造器循环依赖是无法解决的</strong></p>\n</blockquote>\n<h3 id=\"set-注入方式\"><a class=\"anchor\" href=\"#set-注入方式\">#</a> Set 注入方式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ServiceB</span> serviceB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setServiceB</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceB</span> serviceB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceB <span class=\"token operator\">=</span> serviceB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceB</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ServiceA</span> serviceA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setServiceA</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceA</span> serviceA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceA <span class=\"token operator\">=</span> serviceA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>由于单例 bean 在 spring 容器中只存在一个，所以 spring 容器中肯定是有一个缓存来存放所有已创建好的<br />\n单例 bean；获取单例 bean 之前，可以先去缓存中找，找到了直接返回，找不到的情况下再去创建，创<br />\n建完毕之后再将其丢到缓存中，可以使用一个 map 来存储单例 bean。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> singletonObjects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下面来看一下 Spring 中 set 方法创建上面 2 个 Bean 的过程</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>spring 轮询准备创建 <span class=\"token number\">2</span> 个 bean：serviceA 和 serviceB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span>spring 容器发现 singletonObjects 中没有 serviceA</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span>调用 serviceA 的构造器创建 serviceA 实例</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4.</span>serviceA 准备注入依赖的对象，发现需要通过 setServiceB 注入 serviceB</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5.</span>serviceA 向 spring 容器查找 serviceB</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6.</span>spring 容器发现 singletonObjects 中没有 serviceB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">7.</span>调用 serviceB 的构造器创建 serviceB 实例</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">8.</span>serviceB 准备注入依赖的对象，发现需要通过 setServiceA 注入 serviceA</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">9.</span>serviceB 向 spring 容器查找 serviceA</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">10.</span>此时又进入步骤 <span class=\"token number\">2</span> 了</pre></td></tr></table></figure><h3 id=\"spring-中的解决方案\"><a class=\"anchor\" href=\"#spring-中的解决方案\">#</a> Spring 中的解决方案</h3>\n<p><strong>三级缓存</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 第一级缓存：单例 bean 的缓存</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> singletonObjects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 第二级缓存：早期暴露的 bean 的缓存</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> earlySingletonObjects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 第三级缓存：单例 bean 工厂的缓存</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObjectFactory</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> singletonFactories <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol>\n<li>创建 ServiceA 时候会调用下面的方法\n<ul>\n<li><code>org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Object</span> sharedInstance <span class=\"token operator\">=</span> <span class=\"token function\">getSingleton</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 查看缓存中是否已经存在这个 Bean 了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sharedInstance <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> args <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    beanInstance <span class=\"token operator\">=</span> <span class=\"token function\">getObjectForBeanInstance</span><span class=\"token punctuation\">(</span>sharedInstance<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 缓存中不存在，准备创建这个 Bean</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 进入单例 Bean 创建过程</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        sharedInstance <span class=\"token operator\">=</span> <span class=\"token function\">getSingleton</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token function\">createBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeansException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 显式地从单例缓存中移除实例:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">// 它可能已经被创建过程热切地放在那里，以允许循环引用解析。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">// 删除所有接收到临时引用的 bean。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token function\">destroySingleton</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        beanInstance <span class=\"token operator\">=</span> <span class=\"token function\">getObjectForBeanInstance</span><span class=\"token punctuation\">(</span>sharedInstance<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来详细看一下 Spring 如何判断 Bean 是否在缓存中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//allowEarlyReference:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 是否允许从三级缓存 singletonFactories 中通过 getObject 拿到 bean</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getSingleton</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> allowEarlyReference<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 快速检查没有完全单例锁的现有实例</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 一级缓存中查找</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Object</span> singletonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singletonObject <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSingletonCurrentlyInCreation</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 从二级缓存中查找</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        singletonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>earlySingletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 二级缓存没有找到并开启三级缓存开始向三级缓存中查找</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singletonObject <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> allowEarlyReference<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonObjects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 在完整的单例锁中一致地创建早期引用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 再重新查询一级缓存和二级缓存</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                singletonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singletonObject <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    singletonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>earlySingletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token comment\">// 重新查找没有找到进入三级缓存</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singletonObject <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        <span class=\"token comment\">// 三级缓存返回的是一个工厂，通过工厂来获取创建 bean</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token class-name\">ObjectFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> singletonFactory <span class=\"token operator\">=</span> \t\t\t\t\t <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonFactories<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singletonFactory <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                            <span class=\"token comment\">// 三级缓存返回的是一个工厂，通过工厂来获取创建 bean</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                            singletonObject <span class=\"token operator\">=</span> singletonFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                            <span class=\"token comment\">// 将创建好的 bean 丢到二级缓存中</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>earlySingletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> singletonObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                            <span class=\"token comment\">// 从三级缓存移除</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonFactories<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> singletonObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>刚开始，3 个缓存中肯定是找不到的，会返回 null，接着会执行下面代码准备创建 serviceA。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    sharedInstance <span class=\"token operator\">=</span> <span class=\"token function\">getSingleton</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">createBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeansException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">destroySingleton</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来看一下  <code>getSingleton</code>  方法代码比较多。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getSingleton</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObjectFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> singletonFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonObjects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Object</span> singletonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singletonObject <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 单例 Bean 创建之前调用，将其加入正在创建的列表中。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 上面有提到过，主要用来检查循环依赖使用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">beforeSingletonCreation</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">boolean</span> newSingleton <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token comment\">// 调用工厂创建 Bean</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                singletonObject <span class=\"token operator\">=</span> singletonFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                newSingleton <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 单例 Bean 创建之前调用，主要是将其从正在创建的列表中移除。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>recordSuppressedExceptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>suppressedExceptions <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token function\">afterSingletonCreation</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newSingleton<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 将创建完成的单例 Bean 加入到缓存中</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token function\">addSingleton</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> singletonObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> singletonObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>return createBean(beanName, mbd, args);</code>  最终会调用这个方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span>AbstractAutowireCapableBeanFactory</span>#doCreateBean</pre></td></tr></table></figure><p>其内部主要代码如下:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BeanWrapper</span> instanceWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instanceWrapper <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 通过反射调用构造器实例化 ServiceA</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    instanceWrapper <span class=\"token operator\">=</span> <span class=\"token function\">createBeanInstance</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 变量 bean: 表示刚刚同构造器创建好的 Bean 实例</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Object</span> bean <span class=\"token operator\">=</span> instanceWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 判断是否需要暴露早期的 bean，条件为</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// (是否是单例 bean &amp;&amp; 当前容器允许循环依赖 &amp;&amp; bean 名称存在于正在创建的 bean 名称清单中)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">boolean</span> earlySingletonExposure <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>allowCircularReferences <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                  <span class=\"token function\">isSingletonCurrentlyInCreation</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>earlySingletonExposure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 若 earlySingletonExposure 为 true，通过下面代码将早期的 bean 暴露出去</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">addSingletonFactory</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">getEarlyBeanReference</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>什么是早期 bean ?</strong></p>\n<blockquote>\n<p>刚刚实例化好的 bean 就是早期的 bean，此时 bean 还未进行属性填充，初始化等操作</p>\n</blockquote>\n<p>通过  <code>addSingletonFactory</code>  用于将早期的 bean 暴露出去，主要是将其丢到第 3 级缓存中，代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addSingletonFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObjectFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                   singletonFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>singletonFactory<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Singleton factory must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonObjects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 第 1 级缓存中不存在 bean</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 将其加入第 3 级缓存中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonFactories<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> singletonFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 后面的 2 行代码不用关注</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>earlySingletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>registeredSingletons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的方法执行之后，serviceA 就被丢到第 3 级的缓存中了。</p>\n<p>后续的过程 serviceA 开始注入依赖的对象，发现需要注入 serviceB，会从容器中获取 serviceB，而 serviceB 的获取又会走上面同样的过程实例化 serviceB，然后将 serviceB 提前暴露出去，然后 serviceB 开 始注入依赖的对象，serviceB 发现自己需要注入 serviceA，此时去容器中找 serviceA，找 serviceA 会先去 缓存中找，会执行 getSingleton (&quot;serviceA&quot;,true) ，此时会走下面代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getSingleton</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> allowEarlyReference<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 1. 先从一级缓存中找</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Object</span> singletonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singletonObject <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSingletonCurrentlyInCreation</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonObjects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 2. 从二级缓存中找</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            singletonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>earlySingletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singletonObject <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> allowEarlyReference<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token comment\">// 3. 二级缓存中没找到 &amp;&amp; allowEarlyReference 为 true 的情况下，从三级缓存中</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                找</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token class-name\">ObjectFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> singletonFactory <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonFactories<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singletonFactory <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token comment\">// 三级缓存返回的是一个工厂，通过工厂来获取创建 bean</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    singletonObject <span class=\"token operator\">=</span> singletonFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token comment\">// 将创建好的 bean 丢到二级缓存中</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>earlySingletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> singletonObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token comment\">// 从三级缓存移除</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonFactories<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> singletonObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的方法走完之后，serviceA 会被放入二级缓存 earlySingletonObjects 中，会将 serviceA 返回，此 时 serviceB 中的 serviceA 注入成功，serviceB 继续完成创建，然后将自己返回给 serviceA，此时 serviceA 通过 set 方法将 serviceB 注入。 serviceA 创建完毕之后，会调用 addSingleton 方法将其加入到缓存中，这块代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addSingleton</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> singletonObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonObjects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 将 bean 放入第 1 级缓存中</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> singletonObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 将其从第 3 级缓存中移除</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>singletonFactories<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 将其从第 2 级缓存中移除</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>earlySingletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 从容器中获取 serviceA</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 容器尝试从 <span class=\"token number\">3</span> 个缓存中找 serviceA，找不到</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> 准备创建 serviceA</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4.</span> 调用 serviceA 的构造器创建 serviceA，得到 serviceA 实例，此时 serviceA 还未填充属性，未进行其他</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>任何初始化的操作</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">5.</span> 将早期的 serviceA 暴露出去：即将其丢到第 <span class=\"token number\">3</span> 级缓存 singletonFactories 中</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">6.</span> serviceA 准备填充属性，发现需要注入 serviceB，然后向容器获取 serviceB</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">7.</span> 容器尝试从 <span class=\"token number\">3</span> 个缓存中找 serviceB，找不到</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">8.</span> 准备创建 serviceB</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">9.</span> 调用 serviceB 的构造器创建 serviceB，得到 serviceB 实例，此时 serviceB 还未填充属性，未进行其他</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>任何初始化的操作</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">10.</span> 将早期的 serviceB 暴露出去：即将其丢到第 <span class=\"token number\">3</span> 级缓存 singletonFactories 中</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">11.</span>serviceB 准备填充属性，发现需要注入 serviceA，然后向容器获取 serviceA</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">12.</span> 容器尝试从 <span class=\"token number\">3</span> 个缓存中找 serviceA，发现此时 serviceA 位于第 <span class=\"token number\">3</span> 级缓存中，经过处理之后，serviceA 会</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>从第 <span class=\"token number\">3</span> 级缓存中移除，然后会存到第 <span class=\"token number\">2</span> 级缓存中，然后将其返回给 serviceB，此时 serviceA 通过 serviceB 中</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>的 setServiceA 方法被注入到 serviceB 中</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">13.</span>serviceB 继续执行后续的一些操作，最后完成创建工作，然后会调用 addSingleton 方法，将自己丢到</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>第 <span class=\"token number\">1</span> 级缓存中，并将自己从第 <span class=\"token number\">2</span> 和第 <span class=\"token number\">3</span> 级缓存中移除</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">14.</span>serviceB 将自己返回给 serviceA</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">15.</span>serviceA 通过 setServiceB 方法将 serviceB 注入进去</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">16.</span>serviceB 继续执行后续的一些操作，最后完成创建工作 <span class=\"token punctuation\">,</span> 然后会调用 addSingleton 方法，将自己丢到第</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">1</span> 级缓存中，并将自己从第 <span class=\"token number\">2</span> 和第 <span class=\"token number\">3</span> 级缓存中移除</pre></td></tr></table></figure><h2 id=\"循环依赖无法解决的情况\"><a class=\"anchor\" href=\"#循环依赖无法解决的情况\">#</a> 循环依赖无法解决的情况</h2>\n<blockquote>\n<p>只有单例的 bean 会通过三级缓存提前暴露来解决循环依赖的问题，而非单例的 bean，每次从容器中获取都是一个新的对象，都会重新创建，所以非单例的 bean 是没有缓存的，不会将其放到三级缓存中。</p>\n</blockquote>\n<p>那就会有下面几种情况需要注意。</p>\n<p>是以 2 个 bean 相互依赖为例：serviceA 和 serviceB</p>\n<h3 id=\"情况-1\"><a class=\"anchor\" href=\"#情况-1\">#</a> 情况 1</h3>\n<p><strong>条件</strong></p>\n<ul>\n<li>serviceA: 多例</li>\n<li>serviceB: 多例</li>\n</ul>\n<p><strong>结果</strong></p>\n<p>此时不管是任何方式都是无法解决循环依赖的问题，最终都会报错，因为每次去获取依赖的 bean 都会重新创建。</p>\n<h3 id=\"情况-2\"><a class=\"anchor\" href=\"#情况-2\">#</a> 情况 2</h3>\n<p><strong>条件</strong></p>\n<ul>\n<li>serviceA：单例</li>\n<li>serviceB：多例</li>\n</ul>\n<p><strong>结果</strong></p>\n<p>若使用构造器的方式相互注入，是无法完成注入操作的，会报错。</p>\n<h2 id=\"为什么需要用-3级缓存\"><a class=\"anchor\" href=\"#为什么需要用-3级缓存\">#</a> 为什么需要用 3 级缓存</h2>\n<blockquote>\n<p><strong>如果只使用 2 级缓存，直接将刚实例化好的 bean 暴露给二级缓存出是否可以解决问题呢？</strong></p>\n</blockquote>\n<h3 id=\"原因\"><a class=\"anchor\" href=\"#原因\">#</a> 原因</h3>\n<p><strong>这样做是可以解决：早期暴露给其他依赖者的 bean 和最终暴露的 bean 不一致的问题。</strong></p>\n<p>若将刚刚实例化好的 bean 直接丢到二级缓存中暴露出去，如果后期这个 bean 对象被更改了，比如可能在上面加了一些拦截器，将其包装为一个代理了，那么暴露出去的 bean 和最终的这个 bean 就不一样的，将自己暴露出去的时候是一个原始对象，而自己最终却是一个代理对象，最终会导致被暴露出去的和最终的 bean 不是同一个 bean 的，将产生意向不到的效果，而三级缓存就可以发现这个问题，会报错。</p>\n<h3 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Service1</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Service1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Service1 m1()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Service2</span> service2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Service2</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Service2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Service2 m1()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Service1</span> service1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 service1 上面加个拦截器，要求在调用 service1 的任何方法之前需要先输出一行日志。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Service1 拦截器</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MethodBeforeInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                 <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"service1\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 代理创建工厂，需传入被代理的目标对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">ProxyFactory</span> proxyFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProxyFactory</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 添加一个方法前置通知，会在方法执行之前调用通知中的 before 方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            proxyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodBeforeAdvice</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好, service1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 返回代理对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> proxyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainConfig</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>测试方法</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanCircleTestTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span></span>BeanCurrentlyInCreationException</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Error</span> creating bean <span class=\"token keyword\">with</span> <span class=\"token namespace\">name</span> 'service1'<span class=\"token operator\">:</span> <span class=\"token class-name\">Bean</span> <span class=\"token keyword\">with</span> <span class=\"token namespace\">name</span> 'service1' has been injected into other beans <span class=\"token punctuation\">[</span>service2<span class=\"token punctuation\">]</span> in its raw version as part of a circular reference<span class=\"token punctuation\">,</span> but has eventually been <span class=\"token class-name\"><span class=\"token namespace\">wrapped<span class=\"token punctuation\">.</span></span> This</span> means that said other beans <span class=\"token keyword\">do</span> not use the <span class=\"token keyword\">final</span> version of the <span class=\"token class-name\"><span class=\"token namespace\">bean<span class=\"token punctuation\">.</span></span> This</span> is often the result of over<span class=\"token operator\">-</span>eager type matching <span class=\"token operator\">-</span> consider using 'getBeanNamesForType' <span class=\"token keyword\">with</span> <span class=\"token namespace\">the</span> 'allowEagerInit' flag turned off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span> example<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>earlySingletonExposure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 调用 getSingleton (beanName, false) 方法，这个方法用来从 3 个级别的缓存中获取 bean，但是注</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 意了，这个地方第二个参数是 false，此时只会尝试从第 1 级和第 2 级缓存中获取 bean，如果能够获取</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 到，说明了什么？说明了第 2 级缓存中已经有这个 bean 了，而什么情况下第 2 级缓存中会有 bean？说明</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 这个 bean 从第 3 级缓存中已经被别人获取过，然后从第 3 级缓存移到了第 2 级缓存中，说明这个早期的</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//bean 被别人通过 getSingleton (beanName, true) 获取过</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Object</span> earlySingletonReference <span class=\"token operator\">=</span> <span class=\"token function\">getSingleton</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>earlySingletonReference <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 这个地方用来判断早期暴露的 bean 和最终 spring 容器对这个 bean 走完创建过程之后是否还是同一</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 个 bean，上面我们的 service1 被代理了，所以这个地方会返回 false，此时会走到</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exposedObject <span class=\"token operator\">==</span> bean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            exposedObject <span class=\"token operator\">=</span> earlySingletonReference<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//allowRawInjectionDespiteWrapping 这个参数用来控制是否允许循环依赖的情况下，</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 早期暴露给被人使用的 bean 在后期是否可以被包装</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 通俗点理解就是：是否允许早期给别人使用的 bean 和最终 bean 不一致的情况，</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 这个值默认是 false，表示不允许，也就是说你暴露给别人的 bean 和你最终的 bean</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 需要是一致的，你给别人的是 1，你后面不能将其修改成 2 了啊，不一样了，你给我用个 3。</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>allowRawInjectionDespiteWrapping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">hasDependentBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dependentBeans <span class=\"token operator\">=</span> <span class=\"token function\">getDependentBeans</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> actualDependentBeans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>dependentBeans<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> dependentBean <span class=\"token operator\">:</span> dependentBeans<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">removeSingletonIfCreatedForTypeCheckOnly</span><span class=\"token punctuation\">(</span>dependentBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    actualDependentBeans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>dependentBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>actualDependentBeans<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanCurrentlyInCreationException</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span>\"<span class=\"token class-name\">Bean</span> <span class=\"token keyword\">with</span> <span class=\"token namespace\">name<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>“<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>而上面代码注入到 service2 中的 service1 是早期的 service1，而最终 spring 容器中的 service1 变成一个代理对象了，早期的和最终的不一致了，而  <code>allowRawInjectionDespiteWrapping</code>  又是 false，所以报异常了。</p>\n<p>那么如何解决这个问题：</p>\n<p>很简单，将  <code>allowRawInjectionDespiteWrapping</code>  设置为 true 就可以了，下面改一下代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanFactoryPostProcessor</span><span class=\"token punctuation\">(</span>beanFactory <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanFactory <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">)</span> beanFactor<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowRawInjectionDespiteWrapping</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面代码中将 allowRawInjectionDespiteWrapping 设置为 true 了，是通过一个 BeanFactoryPostProcessor 来实现的。</p>\n<p>现在看一下 Service1 和 Service2 中的 Bean。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>你好<span class=\"token punctuation\">,</span> service1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>springdemo<span class=\"token punctuation\">.</span>beancircule<span class=\"token punctuation\">.</span></span>Service1</span><span class=\"token annotation punctuation\">@387a8303</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>springdemo<span class=\"token punctuation\">.</span>beancircule<span class=\"token punctuation\">.</span></span>Service2</span><span class=\"token annotation punctuation\">@28cda624</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>你好<span class=\"token punctuation\">,</span> service1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>springdemo<span class=\"token punctuation\">.</span>beancircule<span class=\"token punctuation\">.</span></span>Service2</span><span class=\"token annotation punctuation\">@28cda624</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>springdemo<span class=\"token punctuation\">.</span>beancircule<span class=\"token punctuation\">.</span></span>Service1</span><span class=\"token annotation punctuation\">@387a8303</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Service1</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>可以发现 Service2 是同一个，而 Service1 并不是同一个，最后一行调用  <code>service2.getService1().m1();</code>  输出的可以发现在 Service2 中的 Service1 并没有触发拦截。</p>\n<p>继续看暴露早期 bean 的源码，注意了下面是重点：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">addSingletonFactory</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">getEarlyBeanReference</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意有个  <code>getEarlyBeanReference</code>  方法，来看一下这个方法是干什么的，源码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getEarlyBeanReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                       <span class=\"token class-name\">RootBeanDefinition</span> mbd<span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Object</span> exposedObject <span class=\"token operator\">=</span> bean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isSynthetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">hasInstantiationAwareBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span> bp <span class=\"token operator\">:</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">SmartInstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token class-name\">SmartInstantiationAwareBeanPostProcessor</span> ibp <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token punctuation\">(</span><span class=\"token class-name\">SmartInstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> bp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                exposedObject <span class=\"token operator\">=</span> ibp<span class=\"token punctuation\">.</span><span class=\"token function\">getEarlyBeanReference</span><span class=\"token punctuation\">(</span>exposedObject<span class=\"token punctuation\">,</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> exposedObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从 3 级缓存中获取 bean 的时候，会调用上面这个方法来获取 bean，这个方法内部会看一下容器中是否有 SmartInstantiationAwareBeanPostProcessor 这种处理器，然后会依次调用这种处理器中的 getEarlyBeanReference 方法，那么思路来了，我们可以自定义一个 SmartInstantiationAwareBeanPostProcessor ，然后在其 getEarlyBeanReference 中来创建代理 不就可以了，聪明，我们来试试，将 MethodBeforeInterceptor 代码改成下面这样：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MethodBeforeInterceptor2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SmartInstantiationAwareBeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getEarlyBeanReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                        <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"service1\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">ProxyFactory</span> proxyFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProxyFactory</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            proxyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodBeforeAdvice</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好,service1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> proxyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>测试方法</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Service1</span> service1 <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Service1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Service2</span> service2 <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Service2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    service1<span class=\"token punctuation\">.</span><span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    service2<span class=\"token punctuation\">.</span><span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>service1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>service2<span class=\"token punctuation\">.</span><span class=\"token function\">getService1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>service2<span class=\"token punctuation\">.</span><span class=\"token function\">getService1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> service1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>你好,service1\nService1 m1()\nService2 m1()\n你好,service1\ncom.example.springdemo.beancircule.Service1@38145825\n你好,service1\ncom.example.springdemo.beancircule.Service1@38145825\ntrue\n</code></pre>\n<h2 id=\"单例-bean-解决了循环依赖还存在什么问题\"><a class=\"anchor\" href=\"#单例-bean-解决了循环依赖还存在什么问题\">#</a> 单例 bean 解决了循环依赖，还存在什么问题？</h2>\n<p>循环依赖的情况下，由于注入的是早期的 bean，此时早期的 bean 中还未被填充属性，初始化等各种操<br />\n作，也就是说此时 bean 并没有被完全初始化完毕，此时若直接拿去使用，可能存在有问题的风险。</p>\n",
            "tags": [
                "springboot",
                "java"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/springboot/Spring%20%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%BC%8F/",
            "url": "https://blog.xiaou.icu/springboot/Spring%20%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%BC%8F/",
            "title": "Spring 事件模式",
            "date_published": "2022-03-17T05:01:28.000Z",
            "content_html": "<h1 id=\"spring-事件模式\"><a class=\"anchor\" href=\"#spring-事件模式\">#</a> Spring 事件模式</h1>\n<h2 id=\"事件模式概念\"><a class=\"anchor\" href=\"#事件模式概念\">#</a> 事件模式概念</h2>\n<p><strong>事件源</strong>：事件的触发者，比如上面的注册器就是事件源。</p>\n<p><strong>事件</strong>：描述发生了什么事情的对象，比如 xxx 注册成功的事件。</p>\n<p><strong>事件监听器</strong>：监听到事件发生的时候，做一些处理。</p>\n<h2 id=\"spring-中实现事件模式\"><a class=\"anchor\" href=\"#spring-中实现事件模式\">#</a> Spring 中实现事件模式</h2>\n<table>\n<thead>\n<tr>\n<th>Spring 事件类</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>org.springframework.context.ApplicationEvent</code></td>\n<td>示事件对象的父类</td>\n</tr>\n<tr>\n<td><code>org.springframework.context.ApplicationListener</code></td>\n<td>事件监听接口</td>\n</tr>\n<tr>\n<td><code>org.springframework.context.event.ApplicationEventMulticaster</code></td>\n<td>事件广播器</td>\n</tr>\n<tr>\n<td><code>org.springframework.context.event.SimpleApplicationEventMulticaster</code></td>\n<td>事件广播器的简单实现</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"硬编码的方式使用-spring-事件-3-步骤\"><a class=\"anchor\" href=\"#硬编码的方式使用-spring-事件-3-步骤\">#</a> 硬编码的方式使用 Spring 事件 3 步骤</h3>\n<h4 id=\"定义事件\"><a class=\"anchor\" href=\"#定义事件\">#</a> 定义事件</h4>\n<p>自定义事件，需要继承  <code>ApplicationEvent</code>  类。</p>\n<h4 id=\"定义监视器\"><a class=\"anchor\" href=\"#定义监视器\">#</a> 定义监视器</h4>\n<p>自定义事件监听器，需要实现  <code>ApplicationListener</code>  接口，这个接口有个方法  <code>onApplicationEvent</code>  需要实现，用来处理感兴趣的事件。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApplicationEvent</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EventListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"创建事件广播器\"><a class=\"anchor\" href=\"#创建事件广播器\">#</a> 创建事件广播器</h4>\n<p>创建事件广播器  <code>ApplicationEventMulticaster</code>  ，这是个接口，你可以自己实现这个接口，也可以直 接使用系统给我们提供的  <code>SimpleApplicationEventMulticaster</code>  ，如下：</p>\n<p>创建事件广播器  <code>ApplicationEventMulticaster</code>  ，这是个接口，你可以自己实现这个接口，也可以直 接使用系统给我们提供的  <code>SimpleApplicationEventMulticaster</code>  ，如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ApplicationEventMulticaster</span> applicationEventMulticaster <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleApplicationEventMulticaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"向广播器中注册事件监听器\"><a class=\"anchor\" href=\"#向广播器中注册事件监听器\">#</a> 向广播器中注册事件监听器</h4>\n<p>将事件监听器注册到广播器  <code>ApplicationEventMulticaster</code>  中，如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ApplicationEventMulticaster</span> applicationEventMulticaster <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleApplicationEventMulticaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>applicationEventMulticaster<span class=\"token punctuation\">.</span><span class=\"token function\">addApplicationListener</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">SendEmailOnOrderCreateListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"通过广播器发布事件\"><a class=\"anchor\" href=\"#通过广播器发布事件\">#</a> 通过广播器发布事件</h4>\n<p>广播事件，调用  <code>ApplicationEventMulticaster#multicastEvent</code>  方法 广播事件，此时广播器中对这 个事件感兴趣的监听器会处理这个事件。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>applicationEventMulticaster<span class=\"token punctuation\">.</span><span class=\"token function\">multicastEvent</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderCreateEvent</span><span class=\"token punctuation\">(</span>applicationEventMulticaster<span class=\"token punctuation\">,</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h3>\n<h4 id=\"事件类\"><a class=\"anchor\" href=\"#事件类\">#</a> 事件类</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderCreateEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApplicationEvent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Setter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> orderId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderCreateEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> orderId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orderId <span class=\"token operator\">=</span> orderId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"监听器\"><a class=\"anchor\" href=\"#监听器\">#</a> 监听器</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SendEmailOnOrderCreateListener</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderCreateEvent</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderCreateEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"订单【%d】创建成功，给下单人发送邮件通知!\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                event<span class=\"token punctuation\">.</span><span class=\"token function\">getOrderId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ApplicationEventMulticaster</span> applicationEventMulticaster <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleApplicationEventMulticaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    applicationEventMulticaster<span class=\"token punctuation\">.</span><span class=\"token function\">addApplicationListener</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">SendEmailOnOrderCreateListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    applicationEventMulticaster<span class=\"token punctuation\">.</span><span class=\"token function\">multicastEvent</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderCreateEvent</span><span class=\"token punctuation\">(</span>applicationEventMulticaster<span class=\"token punctuation\">,</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"运行输出\"><a class=\"anchor\" href=\"#运行输出\">#</a> 运行输出</h4>\n<pre><code>订单【1】创建成功，给下单人发送邮件通知!\n</code></pre>\n<h3 id=\"applicationcontext-容器中事件的支持\"><a class=\"anchor\" href=\"#applicationcontext-容器中事件的支持\">#</a> ApplicationContext 容器中事件的支持</h3>\n<p>使用以  <code>ApplicationContext</code>  结尾的类作为 Spring 的容器来启动应用，下面 2 个是 比较常见的</p>\n<ol>\n<li><code>AnnotationConfigApplicationContext</code></li>\n<li><code>ClassPathXmlApplicationContext</code></li>\n</ol>\n<p>这两个类都继承了  <code>AbstractApplicationContext</code></p>\n<ul>\n<li><code>AbstractApplicationContext</code>  实现了  <code>ApplicationEventPublisher</code>  接口。</li>\n<li><code>AbstractApplicationContext</code>  内部有个  <code>ApplicationEventMulticaster</code>  类型的字段</li>\n</ul>\n<p>说明了  <code>AbstractApplicationContext</code>  内部已经集成了事件广播器  <code>ApplicationEventMulticaster</code>  ，说明  <code>AbstractApplicationContext</code>  内部是具体事件相关功能的，这些功能是通过其内部的  <code>ApplicationEventMulticaster</code>  来实现的，也就是说将事件的功能委托给了内部的  <code>ApplicationEventMulticaster</code>  来实现。</p>\n<h3 id=\"applicationeventpublisher-接口\"><a class=\"anchor\" href=\"#applicationeventpublisher-接口\">#</a> ApplicationEventPublisher 接口</h3>\n<p>上面类图中多了一个新的接口  <code>ApplicationEventPublisher</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ApplicationEventPublisher</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Spring 中不是有个  <code>ApplicationEventMulticaster</code>  接口么，此处怎么又来了一个发布事件的接口？</p>\n<p>这个接口的实现类中，比如  <code>AnnotationConfigApplicationContext</code>  内部将这 2 个方法委托给  <code>ApplicationEventMulticaster#multicastEvent</code>  进行处理了。 所以调用  <code>AbstractApplicationContext</code>  中的 <code>publishEvent</code>  方法，也实现广播事件的效果，不过使用  <code>AbstractApplicationContext</code>  也只能通过调用  <code>publishEvent</code>  方法来广播事件。</p>\n<h3 id=\"获取-applicationeventpublisher-对象\"><a class=\"anchor\" href=\"#获取-applicationeventpublisher-对象\">#</a> 获取 ApplicationEventPublisher 对象</h3>\n<p>如果我们想在普通的 bean 中获取 ApplicationEventPublisher 对象，需要实现 ApplicationEventPublisherAware 接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ApplicationEventPublisherAware</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Aware</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationEventPublisher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationEventPublisher</span> applicationEventPublisher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"spring-使用方式\"><a class=\"anchor\" href=\"#spring-使用方式\">#</a> Spring 使用方式</h2>\n<ol>\n<li>面相接口的方式</li>\n<li>面相 @EventListener 注解的方式</li>\n</ol>\n<h3 id=\"面相接口的方式\"><a class=\"anchor\" href=\"#面相接口的方式\">#</a> 面相接口的方式</h3>\n<blockquote>\n<p>实现用户注册成功后发布事件，然后在监听器中发送邮件的功能。</p>\n</blockquote>\n<ol>\n<li>用户注册事件</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRegisterEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApplicationEvent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRegisterEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>发送邮件监听器</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SendEmailListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserRegisterEvent</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserRegisterEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"给用户【%s】发送注册成功邮件!\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                event<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>用户注册服务</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRegisterService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationEventPublisherAware</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationEventPublisher</span> applicationEventPublisher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 用户注册 (将用户信息入库等操作)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户【%s】注册成功\"</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationEventPublisher<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRegisterEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationEventPublisher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationEventPublisher</span> publisher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationEventPublisher <span class=\"token operator\">=</span> publisher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>配置类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EventConfig</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>测试方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EventConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 获取用户注册服务</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">UserRegisterService</span> userRegisterService <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserRegisterService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 模拟用户注册</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    userRegisterService<span class=\"token punctuation\">.</span><span class=\"token function\">registerUser</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaou\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>结果输出</strong></p>\n<pre><code>用户【xiaou】注册成功\n给用户【xiaou】发送注册成功邮件!\n</code></pre>\n<p>Spring 容器在创建 bean 的过程中，会判断 bean 是否为 ApplicationListener 类型，进而会将其作为监<br />\n听器注册到  <code>AbstractApplicationContext#applicationEventMulticaster</code>  中，这块的源码在下面<br />\n这个方法中</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span>ApplicationListenerDetector</span>#postProcessAfterInitialization</pre></td></tr></table></figure><h3 id=\"面相-eventlistener-注解方式\"><a class=\"anchor\" href=\"#面相-eventlistener-注解方式\">#</a> 面相 @EventListener 注解方式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRegisterListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@EventListener</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserRegisterEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"给用户【%s】发送注册成功邮件!\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                event<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@EventListener</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendIntegral</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserRegisterEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"给用户【%s】发送积分!\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                event<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出结果</strong></p>\n<pre><code>用户【xiaou】注册成功\n给用户【xiaou】发送注册成功邮件!\n给用户【xiaou】发送积分!\n</code></pre>\n<p>spring 中处理 @EventListener 注解源码位于下面的方法中</p>\n<pre><code>org.springframework.context.event.EventListenerMethodProcessor#afterSingletonsInstantiated\n</code></pre>\n<p><code>EventListenerMethodProcessor</code>  实现了  <code>SmartInitializingSingleton</code>  接口， <code>SmartInitializingSingleton</code>  接口中的  <code>afterSingletonsInstantiated</code>  方法会在所有单例的 bean 创建完成之后被 Spring 容器调用。</p>\n<h2 id=\"监听器排序功能\"><a class=\"anchor\" href=\"#监听器排序功能\">#</a> 监听器排序功能</h2>\n<blockquote>\n<p>如果某个事件有多个监听器，默认情况下，监听器执行顺序是无序的，不过我们可以为监听器指定顺序。</p>\n</blockquote>\n<h3 id=\"实现方式\"><a class=\"anchor\" href=\"#实现方式\">#</a> 实现方式</h3>\n<h4 id=\"实现-ordered-接口\"><a class=\"anchor\" href=\"#实现-ordered-接口\">#</a> 实现 Ordered 接口</h4>\n<p>实现  <code>org.springframework.core.Ordered</code>  接口的  <code>int getOrder();</code>   方法，返回值越小，优先级就越高。</p>\n<h4 id=\"实现-priorityordered-接口\"><a class=\"anchor\" href=\"#实现-priorityordered-接口\">#</a> 实现 PriorityOrdered 接口</h4>\n<p><code>org.springframework.core.PriorityOrdered</code>  接口继承了方式一中的 Ordered 接口，所以如果你实现 PriorityOrdered 接口，也需要实现 getOrder 方法。</p>\n<h4 id=\"使用-order-注解\"><a class=\"anchor\" href=\"#使用-order-注解\">#</a> 使用 @Order 注解</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FIELD</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOWEST_PRECEDENCE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"监听器异步模式\"><a class=\"anchor\" href=\"#监听器异步模式\">#</a> 监听器异步模式</h2>\n<p>监听器最终是通过  <code>ApplicationEventMulticaster</code>  内部的实现来调用的，所以我们关注的重点就是这个类，这个类默认有个实现类  <code>SimpleApplicationEventMulticaster</code>  ，这个类是支持监听器异步调用的，里面有个字段：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Executor</span> taskExecutor<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>高并发比较熟悉的朋友对 Executor 这个接口是比较熟悉的，可以用来异步执行一些任务。</p>\n<p>我们常用的线程池类  <code>java.util.concurrent.ThreadPoolExecutor</code>  就实现了 Executor 接口。 再来看一下  <code>SimpleApplicationEventMulticaster</code>  中事件监听器的调用，最终会执行下面这个方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">multicastEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">ApplicationEvent</span> event<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                           <span class=\"token class-name\">ResolvableType</span> eventType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ResolvableType</span> type <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>eventType <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> eventType <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                           <span class=\"token function\">resolveDefaultEventType</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Executor</span> executor <span class=\"token operator\">=</span> <span class=\"token function\">getTaskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> listener <span class=\"token operator\">:</span> <span class=\"token function\">getApplicationListeners</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>executor <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// @1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            executor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">invokeListener</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">invokeListener</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的 invokeListener 方法内部就是调用监听器，从代码 @1 可以看出，如果当前 executor 不为空， 监听器就会被异步调用，所以如果需要异步只需要让 executor 不为空就可以了，但是默认情况下 executor 是空的，此时需要我们来给其设置一个值，下面我们需要看容器中是如何创建广播器的，我 们在那个地方去干预。</p>\n<p>通常我们使用的容器是 AbstractApplicationContext 类型的，需要看一下 AbstractApplicationContext 中广播器是怎么初始化的，就是下面这个方法，容器启动的时候会被调 用，用来初始化 AbstractApplicationContext 中的事件广播器 applicationEventMulticaster。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">APPLICATION_EVENT_MULTICASTER_BEAN_NAME</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">\"applicationEventMulticaster\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initApplicationEventMulticaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory <span class=\"token operator\">=</span> <span class=\"token function\">getBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">containsLocalBean</span><span class=\"token punctuation\">(</span><span class=\"token constant\">APPLICATION_EVENT_MULTICASTER_BEAN_NAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationEventMulticaster <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token constant\">APPLICATION_EVENT_MULTICASTER_BEAN_NAME</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                <span class=\"token class-name\">ApplicationEventMulticaster</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationEventMulticaster <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">SimpleApplicationEventMulticaster</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">registerSingleton</span><span class=\"token punctuation\">(</span><span class=\"token constant\">APPLICATION_EVENT_MULTICASTER_BEAN_NAME</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationEventMulticaster<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面逻辑解释一下：判断 Spring 容器中是否有名称为 ApplicationEventMulticaster 的 bean，如果有就将其作为事件广播器，否则创建一个 SimpleApplicationEventMulticaster 作为广播器，并将其注册到 Spring 容器中。 从上面可以得出结论：我们只需要自定义一个类型为 SimpleApplicationEventMulticaster 名称为 ApplicationEventMulticaster 的 bean 就可以了，顺便给 executor 设置一个值，就可以实现监听器异步执行了。</p>\n<p>从上面可以得出结论：我们只需要自定义一个类型为 SimpleApplicationEventMulticaster 名称为 applicationEventMulticaster 的 bean 就可以了，顺便给 executor 设置一个值，就可以实现监听器异步执行了。</p>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AsyncEventConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ApplicationEventMulticaster</span> <span class=\"token function\">applicationEventMulticaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//@1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 创建一个事件广播器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">SimpleApplicationEventMulticaster</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token class-name\">SimpleApplicationEventMulticaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 给广播器提供一个线程池，通过这个线程池来调用事件监听器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Executor</span> executor <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">applicationEventMulticasterThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 设置异步执行器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">setTaskExecutor</span><span class=\"token punctuation\">(</span>executor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//@1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolExecutorFactoryBean</span> <span class=\"token function\">applicationEventMulticasterThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">ThreadPoolExecutorFactoryBean</span> factory <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutorFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setThreadNamePrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationEventMulticasterThreadPool-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setCorePoolSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出结果</strong></p>\n<p>实现了监听器异步执行的效果</p>\n<pre><code>main-用户【xiaou】注册成功\napplicationEventMulticasterThreadPool-2-给用户【xiaou】发送注册成功邮件!\napplicationEventMulticasterThreadPool-3-给用户【xiaou】发送积分!\n</code></pre>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<ol>\n<li>Spring 中事件是使用接口的方式还是使用注解的方式？具体使用哪种方式都可以，不过在公司内部 最好大家都统一使用一种方式 。</li>\n<li>异步事件的模式，通常将一些非主要的业务放在监听器中执行，因为监听器中存在失败的风险，所 以使用的时候需要注意。如果只是为了解耦，但是被解耦的次要业务也是必须要成功的，可以使用 消息中间件的方式来解决这些问题。</li>\n</ol>\n",
            "tags": [
                "springboot",
                "java"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/springboot/Spring%20Value%20%E6%B3%A8%E8%A7%A3%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0/",
            "url": "https://blog.xiaou.icu/springboot/Spring%20Value%20%E6%B3%A8%E8%A7%A3%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0/",
            "title": "Spring Value 注解动态刷新",
            "date_published": "2022-03-17T01:14:48.000Z",
            "content_html": "<h1 id=\"spring-value-注解动态刷新\"><a class=\"anchor\" href=\"#spring-value-注解动态刷新\">#</a> Spring Value 注解动态刷新</h1>\n<h2 id=\"value-的用法\"><a class=\"anchor\" href=\"#value-的用法\">#</a> @Value 的用法</h2>\n<h3 id=\"value-使用步骤\"><a class=\"anchor\" href=\"#value-使用步骤\">#</a> @Value 使用步骤</h3>\n<ol>\n<li>将 @PropertySource 放在类上面，如下</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"classpath:db.properties\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DbConfig</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>使用 @Value 注解引用配置文件的值</li>\n</ol>\n<p>通过 @Value 引用上面配置文件中的值：</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;配置文件中的key:默认值&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;配置文件中的key&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>例子</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 如果 password 不存在，将 123 作为值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;password:123&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如果 password 不存在，值为 $&#123;password&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;password&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"value-数据来源\"><a class=\"anchor\" href=\"#value-数据来源\">#</a> @Value 数据来源</h2>\n<p>通常情况下我们 @Value 的数据来源于配置文件，不过，还可以用其他方式，比如我们可以将配置文件的<br />\n内容放在数据库，这样修改起来更容易一些。</p>\n<p>我们需要先了解一下 @Value 中数据来源于 Spring 的什么地方。</p>\n<p>Spring 中有个类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span></span>PropertySource</span></pre></td></tr></table></figure><blockquote>\n<p>可以将其理解为一个配置源，里面包含了 key-&gt;value 的配置信息，可以通过这个类中提供的方法获 取 key 对应的 value 信息。</p>\n</blockquote>\n<p>内部有个方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过 name 获取对应的配置信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>还有个比较重要的接口  <code>org.springframework.core.env.Environment</code> 。</p>\n<p><code>org.springframework.core.env.ConfigurableEnvironment</code></p>\n<p>用来表示环境配置信息，这个接口有几个方法比较重要。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用来解析 $&#123;...&#125; 的，@Value 注解最后就是调用这个方法来解析</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">resolvePlaceholders</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 返回 MutablePropertySources 对象。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">MutablePropertySources</span> <span class=\"token function\">getPropertySources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>MutablePropertySources</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MutablePropertySources</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">PropertySources</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PropertySource</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> propertySourceList <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyOnWriteArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>内部包含一个 propertySourceList 列表。 Spring 容器中会有一个 Environment 对象，最后会调用这个对象的 resolvePlaceholders 方法解析 @Value。</p>\n<h3 id=\"解析-value-过程\"><a class=\"anchor\" href=\"#解析-value-过程\">#</a> 解析 @Value 过程</h3>\n<ol>\n<li>将 @Value 注解的 value 参数值作为 Environment.resolvePlaceholders 方法参数进行解析</li>\n<li>Environment 内部会访问 MutablePropertySources 来解析</li>\n<li>MutablePropertySources 内部有多个 PropertySource，此时会遍历 PropertySource 列表，调用 PropertySource.getProperty 方法来解析 key 对应的值</li>\n</ol>\n<blockquote>\n<p>通过上面过程，如果我们想改变 @Value 数据的来源，只需要将配置信息包装为 PropertySource 对象， 丢到 Environment 中的 MutablePropertySources 内部就可以了。</p>\n</blockquote>\n<h2 id=\"自定义-bean-作用域\"><a class=\"anchor\" href=\"#自定义-bean-作用域\">#</a> 自定义 Bean 作用域</h2>\n<h3 id=\"scope-源码\"><a class=\"anchor\" href=\"#scope-源码\">#</a> @Scope  源码</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Scope</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scopeName\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token class-name\">String</span> <span class=\"token function\">scopeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// *** 重要 ***</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token class-name\">ScopedProxyMode</span> <span class=\"token function\">proxyMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个参数的值是个 ScopedProxyMode 类型的枚举，值有下面 4 中</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ScopedProxyMode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 默认值通常等于 NO，除非在组件扫描指令级别配置了不同的默认值。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 不要创建作用域代理。当与非单例作用域的实例一起使用时，这种代理模式通常不太有用，</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 如果要将其作为依赖项使用，则应该倾向于使用 INTERFACES 或 TARGET CLASS 代理模式。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token constant\">NO</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 创建一个 JDK 动态代理，实现由目标对象的类公开的所有接口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token constant\">INTERFACES</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 创建一个基于类的代理 (使用 CGLIB)。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token constant\">TARGET_CLASS</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"自定义一个-bean-作用域的注解\"><a class=\"anchor\" href=\"#自定义一个-bean-作用域的注解\">#</a> 自定义一个 bean 作用域的注解</h3>\n<pre><code class=\"language-JAVA\">@Getter\n@Setter\n@AllArgsConstructor\n@MyScope\n@Component\npublic class UsersScope &#123;\n    private String name;\n\n    public UsersScope() &#123;\n        System.out.println(&quot;------------创建 User 对象&quot; + this);\n        this.name = UUID.randomUUID().toString();\n    &#125;\n&#125;\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanMyScope</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Scope</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SCOPE_MY</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"my\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObjectFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> objectFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BeanMyScope >>>>> get:\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> objectFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerDestructionCallback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Runnable</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveContextualObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getConversationId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanMyScope</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SCOPE_MY</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyScope</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 通过上面的案例可以看出，当自定义的 Scope 中 proxyMode=ScopedProxyMode.TARGET_CLASS 的时候，会给     // 这个 bean 创建一个代理对象，调用代理对象的任何方法，都会调用这个自定义的作用域实现</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// (上面的 BeanMyScope) 中 get 方法来重新来获取这个 bean 对象。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">ScopedProxyMode</span> <span class=\"token function\">proxyMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TARGET_CLASS</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试类</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span>  context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerScope</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanMyScope</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SCOPE_MY</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanMyScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">UsersScope</span> usersScope <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UsersScope</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usersScope: \"</span> <span class=\"token operator\">+</span> usersScope<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"********\\n第%d次开始调用getUsername\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>usersScope<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第%d次调用getUsername结束\\n********\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>usersScope: class com.example.springdemo.scope.UsersScope$$EnhancerBySpringCGLIB$$6b6d3629\n********\n第1次开始调用getUsername\nBeanMyScope &gt;&gt;&gt;&gt;&gt; get:scopedTarget.usersScope\n------------创建 User 对象com.example.springdemo.scope.UsersScope@700fb871\ncd215da0-c8c5-4c41-9c43-7a266912d52f\n第1次调用getUsername结束\n********\n\n********\n第2次开始调用getUsername\nBeanMyScope &gt;&gt;&gt;&gt;&gt; get:scopedTarget.usersScope\n------------创建 User 对象com.example.springdemo.scope.UsersScope@2bdd8394\n6f35d6a5-f32f-448d-baaf-4c98185342a5\n第2次调用getUsername结束\n********\n\n********\n第3次开始调用getUsername\nBeanMyScope &gt;&gt;&gt;&gt;&gt; get:scopedTarget.usersScope\n------------创建 User 对象com.example.springdemo.scope.UsersScope@5f9edf14\n796d2a6c-1b4e-417b-baf8-fe6b4269acb5\n第3次调用getUsername结束\n********\n</code></pre>\n<p>从输出的前 2 行可以看出：</p>\n<ol>\n<li>调用 context.getBean (User.class) 从容器中获取 bean 的时候，此时并没有调用 User 的构造函数去 创建 User 对象。</li>\n<li>第二行输出的类型可以看出，getBean 返回的 user 对象是一个 cglib 代理对象。</li>\n<li>后面的日志输出可以看出，每次调用 user.getUsername 方法的时候，内部自动调用了 BeanMyScope#get 方法和 User 的构造函数。</li>\n</ol>\n<blockquote>\n<p>通过上面的案例可以看出，当自定义的 Scope 中  <code>proxyMode = ScopedProxyMode.TARGET_CLASS</code>  的时候，会给这个 bean 创建一个代理对象，调用代理对象的任何方法，都会调用这个自定义的作用域实现类（上面的 BeanMyScope）中 get 方法来重新来获取这个 bean 对象。</p>\n</blockquote>\n<h2 id=\"动态刷新-value-具体实现\"><a class=\"anchor\" href=\"#动态刷新-value-具体实现\">#</a> 动态刷新 @Value 具体实现</h2>\n<ol>\n<li>先实现一个 RefreshScode</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanRefreshScope</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SCOPE_REFRESH</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">RefreshScope</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">ScopedProxyMode</span> <span class=\"token function\">proxyMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TARGET_CLASS</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>自定义 RefreshScode 对应的解析类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanRefreshScope</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Scope</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SCOPE_REFRESH</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"refresh\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">BeanRefreshScope</span> <span class=\"token constant\">INSTANCE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanRefreshScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> beanMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BeanRefreshScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">BeanRefreshScope</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObjectFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> objectFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         *  等价与</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         *  Object bean = beanMap.get (name);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         *  if (bean == null) &#123;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         *      bean = objectFactory.getObject ();</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         *      beanMap.put (name, bean);</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         *   &#125;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         *   return bean;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">.</span>beanMap</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> objectFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">.</span>beanMap<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">.</span>beanMap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerDestructionCallback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Runnable</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveContextualObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getConversationId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>来个邮件配置类，使用 @Value 注解注入配置，这个 bean 作用域为自定义的 @RefreshScope</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RefreshScope</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@ToString</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MailConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;mail.username&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>再来个普通的 bean，内部会注入 MailConfig</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MailService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MailConfig</span> mailConfig<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"MailService&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token string\">\"mainConfig=\"</span> <span class=\"token operator\">+</span> mailConfig <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>来个类，模拟从 db 中获取邮件配置信息</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DbUtil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getMailInfoFromDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.username\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>来个 Spring 配置类，扫描加载上面的组件</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainConfig</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>工具类</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RefreshConfigUtil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 模拟改变数据库中配置信息</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateDbConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractApplicationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 更新 content 中 mailPropertySource 配置信息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">refreshMailPropertySource</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 清空 BeanRefreshScope 中所有 bean 的缓存</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">BeanRefreshScope</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">refreshMailPropertySource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractApplicationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> mailInfoFormDb <span class=\"token operator\">=</span> <span class=\"token class-name\">DbUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMailInfoFromDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 将其丢在 MapPropertySource 中</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// (MapPropertySource 类是 spring 提供的一个类，PropertySource 的子类)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">MapPropertySource</span> mapPropertySource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MapPropertySource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail\"</span><span class=\"token punctuation\">,</span> mailInfoFormDb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPropertySources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span>mapPropertySource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>测试类</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SneakyThrows</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">registerScope</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanRefreshScope</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SCOPE_REFRESH</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanRefreshScope</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">RefreshConfigUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">refreshMailPropertySource</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">MailService</span> mailService <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MailService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"配置未更新的情况下\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mailService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MICROSECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"模拟 3 次跟更新配置的效果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">RefreshConfigUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateDbConfig</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mailService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MICROSECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>配置未更新的情况下\nMailService&#123;mainConfig=MailConfig(username=6ec67cf7-fb4d-4712-94b9-97306ef207ff)&#125;\nMailService&#123;mainConfig=MailConfig(username=6ec67cf7-fb4d-4712-94b9-97306ef207ff)&#125;\nMailService&#123;mainConfig=MailConfig(username=6ec67cf7-fb4d-4712-94b9-97306ef207ff)&#125;\n模拟 3 次跟更新配置的效果\nMailService&#123;mainConfig=MailConfig(username=92306969-f4fb-4f95-8a0e-a8f55023a1ef)&#125;\nMailService&#123;mainConfig=MailConfig(username=0d155231-4a6e-499e-a493-012a1f136b0e)&#125;\nMailService&#123;mainConfig=MailConfig(username=93125586-507f-4735-91f8-c0d1a598eee1)&#125;\n</code></pre>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>动态 @Value 实现的关键是 @Scope 中 proxyMode 参数，值为 ScopedProxyMode.DEFAULT，会生成一 个代理，通过这个代理来实现 @Value 动态刷新的效果，这个地方是关键。</p>\n<p>有兴趣的可以去看一下 SpringBoot 中的 @RefreshScope 注解源码，和上面自定义的 @RefreshScope 类似，实现原理类似的。</p>\n",
            "tags": [
                "springboot",
                "java"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/mysql/%E7%B4%A2%E5%BC%95/",
            "url": "https://blog.xiaou.icu/mysql/%E7%B4%A2%E5%BC%95/",
            "title": "索引",
            "date_published": "2022-03-15T13:27:09.000Z",
            "content_html": "<h1 id=\"mysql-索引\"><a class=\"anchor\" href=\"#mysql-索引\">#</a> MySQL 索引</h1>\n<h2 id=\"索引概述\"><a class=\"anchor\" href=\"#索引概述\">#</a> 索引概述</h2>\n<blockquote>\n<p>MySQL 官方对索引的定义为: <strong>是帮助 MySQL 高效获取数据的数据结构。</strong></p>\n</blockquote>\n<p>索引的本质：索引是数据结构 (空间换时间)。你可以简单理解为 “排好序的快速查找数据结构 &quot;，满足特定查找算法。这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法。<br />\n<strong>索引是在存储引擎中实现的，因此每种存储引擎的索引不一定完全相同</strong>，并且<strong>每种存储引擎不一定支持所有索引类型</strong>。同时，存储引擎可以定义每个表的 <strong>最大索引数</strong> 和 <strong>最大索引长度</strong>。所有存储引擎支持每个表至少 16 个索引，总索引长度至少为 256 字节。有些存储引擎支持更多的索引数和更大的索引长度。</p>\n<h2 id=\"索引的优点\"><a class=\"anchor\" href=\"#索引的优点\">#</a> 索引的优点</h2>\n<ol>\n<li>类似大学图书馆建书目索引，提高数据检索的效率，降低，数据库的 IO 成本，这也是创建索引最主要的原因</li>\n<li>通过创建唯一索引，可以保证数据库表中每一行数据的唯一性。</li>\n<li>在实现数据的参考完整性方面，可以加速表和表之间的连接。换句话说，对于有依赖关系的子表和父表联合查询时，可以提高查询速度。</li>\n<li>在使用分组和排序子句进行数据查询时，可以显著减少查询中分组和排序的时间，降低了 CPU 的消耗。</li>\n</ol>\n<h2 id=\"索引的缺点\"><a class=\"anchor\" href=\"#索引的缺点\">#</a> 索引的缺点</h2>\n<ol>\n<li>创建索引和维护索引要耗费时间，并且随着数据量的增加，所耗费的时间也会增加。Ⅰ</li>\n<li>索引需要占磁盘空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，存储在磁盘上，如果有大量的索引，索引文件就可能比数据文件更快达到最大文件尺寸。</li>\n<li>然索引大大提高了查询速度，同时却会降低更新表的速度。当对表中的数据进行增加、删除和修改的时候，索引也要动态地维护，这样就降低了数据的维护速度。</li>\n</ol>\n<h2 id=\"索引的分类\"><a class=\"anchor\" href=\"#索引的分类\">#</a> 索引的分类</h2>\n<p>MySQL 的索引包括普通索引、唯一性索引、全文索引、单列索引、多列索引和空间索引等。</p>\n<ul>\n<li>从 <strong>功能逻辑</strong> 上说，索引主要有 4 种，分别是普通索引、唯一索引、主键索引、全文索引。</li>\n<li>按照 <strong>物理实现</strong> 方式，索引可以分为 2 种：聚簇索引和非聚簇索引。</li>\n<li>按照 <strong>作用字段个数</strong> 进行划分，分成单列索引和联合索引。</li>\n</ul>\n<ol>\n<li>\n<p><strong>普通索引</strong></p>\n<p>在创建普通索引时，不附加任何限制条件，只是用于提高查询效率。这类索引可以创建在任何数据类型中，其 E 是否唯一和非空，要由字段本身的完整性约束条件决定。建立索引以后，可以通过索引进行查询。例如，在表 student 的字段 name 上建立一个普通索引，查询记录时就可以根据该索引进行查询。</p>\n</li>\n<li>\n<p><strong>唯一性索引</strong><br />\n使用  <code>UNIQUE 参数</code> 可以设置索引为唯一性索引，在创建唯一性索引时，限制该索引的值必须是唯一的，但允许有空值。在一张数据表里可以有多个唯一索引。</p>\n</li>\n<li>\n<p><strong>主键索引</strong></p>\n<p>主键索引就是一种特殊的唯一性索引，在唯一索引的基础上增加了不为空的约束，也就是  <code>NOT NULL+UNIQUE</code> ，一张表里最多只有一个主键索引。因为：这是由主键索引的物理实现方式决定的，因为数据存储在文件中只能按照一种顺序进行存储 4. 单列索引。</p>\n</li>\n<li>\n<p><strong>单列索引</strong></p>\n<p>在表中的单个字段上创建索引。单列索引只根据该字段进行索引。单列索引可以是普通索引，也可以是唯一性索引，还可以是全文索引。只要保证该索引只对应一个字段即可。一个表可以有多个单列索引。</p>\n</li>\n<li>\n<p><strong>多列索引</strong></p>\n<p>多列索引是在表的多个字段组合上创建一个索引。该索引指向创建时对应的多个字段，可以通过这几个字段进行查询，但是只有查询条件中使用了这些字段中的第一个字段时才会被使用。例如，在表中的字段 id、name 和 gender 上建立一个多列索引 idx_id_name_gender，只有在查询条件中使用了字段 id 时该索引才会被使用。使用组合索引时遵循最左前缀集合。</p>\n</li>\n<li>\n<p><strong>全文索引</strong></p>\n<p>全文索引 (也称全文检索）是目前搜索引擎使用的一种关键技术。它能够利用【分词技术】等多种算法智能分析出文本文字中关键词的频率和重要性，然后按照一定的算法规则智能地筛选出我们想要的搜索结果。全文索引非常适合大型数据集，对于小的数据集，他的用处比较小。</p>\n<p>使用参数 FULLTEXT 可以设置索引为全文索引。使用参数 FULLTEXT 可以设置索引为全文索引。在定义索引的列上支持值的全文查找，允许在这些索引列中插入重复值和空值。全文索引只能创建在  <code>CHAR</code> 、 <code>VARCHAR</code>  或  <code>TEXT</code>  类型及其系列类型的字段上，<strong>查询数据量较大的字符串类型的字段时，使用全文索引可以提高查询速度</strong>。例如，表 student 的字段 information 是 TEXT 类型，该字段包含了很多文字信息。在字段 information 上建立全文索引后，可以提高查询字段 information 的速度。</p>\n<p>全文索引典型有两种类型：<strong>自然语言的全文检索</strong> 和 <strong>布尔全文检索</strong>。</p>\n<p>自然语畜搜索引擎将计算每一个文档对象和查询的相关度。这里，相关度是基于匹配的关键词的个数，以及关键词在文档中出现的次数。在整个索引中出现次数越少的词语，匹配时的相关度就越高。相反，非常常见的单词将不会被搜索，如果一个词语的在超过 50% 的记录中都出现了，那么自然语言的搜索将不会搜索这类词语。</p>\n</li>\n<li>\n<p><strong>空间索引</strong></p>\n<p>使用参数 SPATIAL 可以设置索引为空间索引。空间索引只能建立在空间数据类型上，这样可以提高系统获取空间数据的效率。MySQL 中的空间数据类型包括  <code>GEOMETRY</code> 、 <code>POINT</code> 、 <code>LINESTRING</code>  和  <code>POLYGON</code>  等。<strong>目前只有 MyISAM 存储引擎支持空间检索</strong>，而且<strong>索引的字段不能为空值</strong>。</p>\n</li>\n</ol>\n<h2 id=\"创建索引\"><a class=\"anchor\" href=\"#创建索引\">#</a> 创建索引</h2>\n<p>MySQL 支持多种方法在单个或多个列上创建索引:</p>\n<ol>\n<li>在创建表的定义语句  <code>CREATE TABLE</code>  中指定索引列。</li>\n<li>使用  <code>ALTER TABLE</code>  语句在存在的表上创建索引。</li>\n<li>使用  <code>CREATE INDEX</code>  语句在已存在的表上添加索引。</li>\n</ol>\n<h3 id=\"第一种\"><a class=\"anchor\" href=\"#第一种\">#</a> 第一种</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> users &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token punctuation\">[</span><span class=\"token keyword\">UNIQUE</span> <span class=\"token operator\">|</span> FULLTEXT <span class=\"token operator\">|</span> SPATIAL<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">INDEX</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>index_name<span class=\"token punctuation\">]</span> &#123;col_name <span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span>&#125;<span class=\"token punctuation\">[</span><span class=\"token keyword\">ASC</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#125;</pre></td></tr></table></figure><blockquote>\n<p>如果使用全文索引查询不能使用 LIKE</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> table_name <span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">MATCH</span><span class=\"token punctuation\">(</span>全文索引<span class=\"token punctuation\">)</span> AGAINST<span class=\"token punctuation\">(</span><span class=\"token string\">\"查询字符串\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"第二种\"><a class=\"anchor\" href=\"#第二种\">#</a> 第二种</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> table_name <span class=\"token keyword\">ADD</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">INDEX</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">UNIQUE</span> <span class=\"token operator\">|</span> FULLTEXT <span class=\"token operator\">|</span> SPATIAL<span class=\"token punctuation\">]</span> index_name<span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"查看索引\"><a class=\"anchor\" href=\"#查看索引\">#</a> 查看索引</h2>\n<h3 id=\"第一种-2\"><a class=\"anchor\" href=\"#第一种-2\">#</a> 第一种</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> book<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"第二种-2\"><a class=\"anchor\" href=\"#第二种-2\">#</a> 第二种</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">INDEX</span> <span class=\"token keyword\">FROM</span> book<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"需要的设计原则\"><a class=\"anchor\" href=\"#需要的设计原则\">#</a> 需要的设计原则</h2>\n<blockquote>\n<p>为了使索引的使用效率更高，在创建索引时，必须考虑在哪些字段上创建索引和创建什么类型的索引。<strong>索引设计不合理或者缺少索引都会对数据库和应用程序的性能造成障碍</strong>。高效的索引对于获得良好的性能非常重要。设计索引时，应该考虑相应准则。</p>\n</blockquote>\n<h3 id=\"字段的数值有唯一性的限制\"><a class=\"anchor\" href=\"#字段的数值有唯一性的限制\">#</a> 字段的数值有唯一性的限制</h3>\n<p>索引本身可以起到约束的作用，比如唯一索引、主链索引都是可以起到唯一性约束的，因此在我们的数据表中，<strong>如果某个字段是唯一性的，就可以直接创建唯一性索引，或者主键索引</strong>。这样可以更快速地通过该索引来确定某条记录。</p>\n<h3 id=\"频繁作为-where-查询条件的字段\"><a class=\"anchor\" href=\"#频繁作为-where-查询条件的字段\">#</a> 频繁作为 WHERE 查询条件的字段</h3>\n<p>某个字段在 SELECT 语句的 WHERE 条件中经常被使用到，那么就需要给这个字段创建索引了。尤其是在数据量大的情况下，创建普通索引就可以大幅提升数据查询的效率。</p>\n<h3 id=\"经常被-group-by-和-order-by-的列\"><a class=\"anchor\" href=\"#经常被-group-by-和-order-by-的列\">#</a> 经常被 Group BY 和 ORDER BY 的列</h3>\n<p>索引就是让数据按照某种顺序进行存储或检索，因此当我们使用 GROUP BY 对数据进行分组查询，或者使用 ORDER BY 对数据进行排序的时候，就需要对分组或者排序的字段进行索引。如果待排序的列有多个，那么可以在这些列上建立组合索引。</p>\n<h3 id=\"update-delete-的-where-条件列\"><a class=\"anchor\" href=\"#update-delete-的-where-条件列\">#</a> UPDATE、DELETE 的 WHERE 条件列</h3>\n<p>对数据按照某个条件进行查询后再进行 UPDATE 或 DELETE 的操作，如果对 WHERE 字段创建了索引，就能大幅提升效率。原理是因为我们需要先根据 WHERE 条件列检索出来这条记录，然后再对它进行更新或删除。** 如果进行更新的时候，更新的字段是非索引字段，提升的效率会更明显，这是因为非索引字段更新不需要对索引进行维护 **。</p>\n<h3 id=\"distinct-字段需要创建索引\"><a class=\"anchor\" href=\"#distinct-字段需要创建索引\">#</a> DISTINCT 字段需要创建索引</h3>\n<p>有时候我们需要对某个字段进行去重，使用 DISTINCT，那么对这个字段创建索引，也会提升查询效率。</p>\n<h4 id=\"多表-join-连接操作时创建索引\"><a class=\"anchor\" href=\"#多表-join-连接操作时创建索引\">#</a> 多表 JOIN 连接操作时，创建索引</h4>\n<blockquote>\n<p>在连接表的时候连接条件字段类型保持一致否则使用隐式转换会出现索引失效。</p>\n</blockquote>\n<ol>\n<li>连接表的数量尽量不要超过 3 张，因为每增加一张表就相当于增加了一次嵌套的循环，数量级增长会非常快，严重影响查询的效率。</li>\n<li>对 WHERE 条件创建索引，因为 WHERE 才是对数据条件的过滤。如果在数据量非常大的情况下，没有 WHERE 条件过滤是非常可怕的。</li>\n<li>对用于连接的字段创建索引，并且该字段在多张表中的类型必须一致。比如 course_id 在 student_info 表和 course 表中都为 int (11) 类型，而不能一个为 int 另一个为 varchar 类型。</li>\n</ol>\n<h4 id=\"使用列的类型小的创建索引\"><a class=\"anchor\" href=\"#使用列的类型小的创建索引\">#</a> 使用列的类型小的创建索引</h4>\n<p>这里所说的类型大小指的就是该类型表示的数据范围的大小。</p>\n<p>我们在定义表结构的时候要显式的指定列的类型，以整数类型为例，有 TININT、MEDIUMINT、INT、BIGINT 等，它们占用的存储空间依次递增，能表示的整数范围当然也是依次递增。如果我们想要对某个整数列建立索引的话，<strong>在表示的整数范围允许的情况下，尽量让索引列使用较小的类型</strong>，比如我们能使用 INT 就不要使用 BIGINT，能使用 MEDIUMINT 就不要使用 INT。这是因为:</p>\n<ol>\n<li>数据类型越小，在查询时进行的比较操作越快</li>\n<li>数据类型越小，索引占用的存储空间就越少，<strong>在一个数据页内就可以放下更多的记录，从而减少磁盘 I/O 带来的性能损耗</strong>，也就意味着可以把更多的数据页缓存在内存中，从而加快读写效率。</li>\n</ol>\n<p>这个建议对于表的<strong>主键来说更加适用</strong>，因为不仅是聚簇索引中会存储主键值，其他所有的二级索引的节点处都会存储一份记录的主键值，如果主键使用更小的数据类型，也就意味着节省更多的存储空间和更高效的 I/O.</p>\n<h3 id=\"使用字符串前缀创建索引\"><a class=\"anchor\" href=\"#使用字符串前缀创建索引\">#</a> 使用字符串前缀创建索引</h3>\n<p>假设我们的字符串很长，那存储一个字符串就需要占用很大的存储空间。在我们需要为这个字符串列建立索引时，那就意味着在对应的 B+ 树中有这么两个问题:</p>\n<ol>\n<li>B+ 树索引中的记录需要把该列的完整字符串存储起来，更费时。而且字符串越长，在索引中占用的存储空间越大。</li>\n<li>如果 B+ 树索引中索引列存储的字符串很长，那在做字符串比较时会占用更多的时间。</li>\n</ol>\n<p>我们可以通过截取字段的前面一部分内容建立索引，这个就叫前缀索引。这样在查找记录时虽然不能精确的定位到记录的位置，但是能定位到相应前缀所在的位置，然后根据前缀相同的记录的主键值回表查询完整的字符串值。既节约空间，又减少了字符串的比较时间，还大体能解决排序的问题。</p>\n<p>例如，TEXT 和 BLOG 类型的字段，进行全文检索会很浪费时间，如果只检索字段前面的若干字符，这样可以提高检索速度。</p>\n<p>问题是，截取多少呢？截取得多了，达不到节省索引存储空间的目的；截取得少了，重复内容太多，字段的散列度 (选择性) 会降低。怎么计算不同的长度的选择性呢？</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">distinct</span> <span class=\"token keyword\">left</span><span class=\"token punctuation\">(</span>列名<span class=\"token punctuation\">,</span> 索引长度<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> form table_name<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>例子</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">distinct</span> <span class=\"token keyword\">left</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> form table_name<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90% 以上。</p>\n<h3 id=\"区分度高的列适合作为索引\"><a class=\"anchor\" href=\"#区分度高的列适合作为索引\">#</a> 区分度高的列适合作为索引</h3>\n<p>列的基数指的是某一列中不重复数据的个数，比方说某个列包含值 2，5，8，2，5，8，2，5，8，虽然有 9 条记录，但该列的基数却是 3。也就是说，在记录行数一定的情况下，列的基数越大，该列中的值越分散；列的基数越小，该列中的值越集中。这个列的基数指标非常重要，直接影响我们是否能有效的利用索引。最好为列的基数大的列建立索引，为基数太小列的建立索引效果可能不好。</p>\n<p>列的基数指的是某一列中不重复数据的个数，比方说某个列包含值 2，5，8，2，5，8，2，5，8，虽然有 9 条记录，但该列的基数却是 3。也就是说，<strong>在记录行数一定的情况下，列的基数越大，该列中的值越分散；列的基数越小，该列中的值越集中</strong>。这个列的基数指标非常重要，直接影响我们是否能有效的利用索引。最好为列的基数大的列建立索引，为基数太小列的建立索引效果可能不好。<br />\n可以使用公式 select count (distinct a)/count (*) from t1 计算区分度，越接近 1 越好，一般超过 33% 就算是比较高效的索引了。<br />\n拓展：联合索引把区分度高 (散列性高) 的列放在前面。</p>\n<h3 id=\"使用最频繁的列放到联合索引的左侧\"><a class=\"anchor\" href=\"#使用最频繁的列放到联合索引的左侧\">#</a> 使用最频繁的列放到联合索引的左侧</h3>\n<p>这样也可以较少的建立一些索引。同时，由于 &quot;最左前缀原则&quot;，可以增加联合索引的使用率。</p>\n<h3 id=\"在多个字段都要创建索引的情况下联合索引优于单值索引\"><a class=\"anchor\" href=\"#在多个字段都要创建索引的情况下联合索引优于单值索引\">#</a> 在多个字段都要创建索引的情况下，联合索引优于单值索引</h3>\n<h3 id=\"限制索引的数目\"><a class=\"anchor\" href=\"#限制索引的数目\">#</a> 限制索引的数目</h3>\n<p>在实际工作中，我们也需要注意平衡，索引的数目不是越多越好。我们需要限制每张表上的索引数量，建议 <strong>单张表索引数量不超过 6 个</strong>。原因:</p>\n<ol>\n<li>每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。</li>\n<li>索引会影响 INSERT、DELETE、UPDATE 等语句的性能，因为表中的数据更改的同时，索引也会进行调整和更新，会造成负担。</li>\n<li>优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，会增加 MySQL 优化器生成执行计划时间，降低查询性能。</li>\n</ol>\n<h3 id=\"那些情况不适合创建索引\"><a class=\"anchor\" href=\"#那些情况不适合创建索引\">#</a> 那些情况不适合创建索引</h3>\n<h4 id=\"在-where-中使用不到的字段不要设置索引\"><a class=\"anchor\" href=\"#在-where-中使用不到的字段不要设置索引\">#</a> 在 where 中使用不到的字段，不要设置索引</h4>\n<p>WHERE 条件（包括 GROUP BY、ORDER BY) 里用不到的字段不需要创建索引，索引的价值是快速定位，如果起不到定位的字段通常是不需要创建索引的。</p>\n<h4 id=\"数据量小的表最好不要使用索引\"><a class=\"anchor\" href=\"#数据量小的表最好不要使用索引\">#</a> 数据量小的表最好不要使用索引</h4>\n<p>如果表记录太少，比如少于 1000 行，那么是不需要创建索引的。表记录太少，是否创建索引对查询效率的影响并不大。甚至说，查询花费的时间可能比遍历索引的时间还要短，索引可能不会产生优化效果。</p>\n<h4 id=\"有大量重复数据的列不要使用索引\"><a class=\"anchor\" href=\"#有大量重复数据的列不要使用索引\">#</a> 有大量重复数据的列不要使用索引</h4>\n<p>在条件表达式中经常用到的不同值较多的列上建立索引，但字段中如果有大量重复数据，也不用创建索引。比如在学生表的 &quot;“性别&quot;&quot; 字段上只有 “男 &quot;与&quot; 女 &quot; 两个不同值，因此无须建立索引。如果建立索引，不但不会提高查询效率，反而会严重降低数据更新速度。</p>\n<h4 id=\"避免对经常更新的表创建过多的索引\"><a class=\"anchor\" href=\"#避免对经常更新的表创建过多的索引\">#</a> 避免对经常更新的表创建过多的索引</h4>\n<ol>\n<li>\n<p>第一层含义：频繁更新的字段不一定要创建索引。因为更新数据的时候，也需要更新索引，如果索引太多，在更新索引的时候也会造成负担，从而影响效率。Ⅰ</p>\n</li>\n<li>\n<p>第二层含义：避免对经常更新的表创建过多的索引，并且索引中的列尽可能少。此时，虽然提高了查询速度，同时却会降低更新表的速度。</p>\n</li>\n</ol>\n<h4 id=\"不建议用无序的值作为索引\"><a class=\"anchor\" href=\"#不建议用无序的值作为索引\">#</a> 不建议用无序的值作为索引</h4>\n<p>例如身份证、UUID (在索引比较时需要转为 ASCII，并且插入时可能造成页分裂)、MD5、HASH、无序长字符串等。</p>\n<h4 id=\"删除不再使用和很少使用的索引\"><a class=\"anchor\" href=\"#删除不再使用和很少使用的索引\">#</a> 删除不再使用和很少使用的索引</h4>\n<p>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。数据库管理员应当定期找出这些索引，将它们副除，从而减少索引对更新操作的影响。</p>\n<h4 id=\"不要定义冗余或重复索引\"><a class=\"anchor\" href=\"#不要定义冗余或重复索引\">#</a> 不要定义冗余或重复索引</h4>\n<ul>\n<li>\n<p>冗余索引</p>\n<p>有时候有意或者无意的就对同一个列创建了多个索引，比如: index (a,b,c) 相当于 index (a)、index (a,b).index (a,b,c)。</p>\n</li>\n<li>\n<p>重复索引</p>\n<p>在一个字段上重复定义不同类型的索引</p>\n</li>\n</ul>\n<h2 id=\"分析查询语句-explain\"><a class=\"anchor\" href=\"#分析查询语句-explain\">#</a> 分析查询语句 EXPLAIN</h2>\n<p>定位了查询慢的 SQL 之后，我们就可以使用 EXPLAIN 或 DESCRIBE 工具做针对性的分析查询语句。DESCRIBE 语句的使用方法与 EXPLAIN 语句是一样的，并且分析结果也是一样的。</p>\n<p>MySQL 中有专门负责优化 SELECT 语句的优化器模块，主要功能：通过计算分析系统中收集到的统计信息，为客户端请求的 Query 提供它认为最优的执行计划（他认为最优的数据检索方式，但不见得是 DBA 认为是最优的，这部分最耗费时间)。</p>\n<p>定位了查询慢的 SQL 之后，我们就可以使用 EXPLAIN 或 DESCRIBE 工具做针对性的分析查询语句。DESCRIBE 语句的使用方法与 EXPLAIN 语句是一样的，并且分析结果也是一样的。<br />\nMySQL 中有专门负责优化 SELECT 语句的优化器模块，主要功能：通过计算分析系统中收集到的统计信息，为客户端请求的 Query 提供它认为最优的执行计划（他认为最优的数据检索方式，但不见得是 DBA 认为是最优的，这部分最耗费时间)。<br />\n这个执行计划展示了接下来具体执行查询的方式，比如多表连接的顺序是什么，对于每个表采用什么访问方法来具体执行查询等等。MySQL 为我们提供了 EXPLAIN 语句来帮助我们查看某个查询语句的具体执行计划。</p>\n<h3 id=\"explain-语句输出的列的含义\"><a class=\"anchor\" href=\"#explain-语句输出的列的含义\">#</a> EXPLAIN 语句输出的列的含义</h3>\n<table>\n<thead>\n<tr>\n<th>列名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>在一个大的查询语句中每个 SELECT 关键字对于一个唯一的 ID</td>\n</tr>\n<tr>\n<td>select_type</td>\n<td>SELECT 关键字对于的那个查询类型</td>\n</tr>\n<tr>\n<td>table</td>\n<td>表名</td>\n</tr>\n<tr>\n<td>partitions</td>\n<td>匹配的分区信息</td>\n</tr>\n<tr>\n<td>type</td>\n<td>针对单表的访问方法</td>\n</tr>\n<tr>\n<td>possible_keys</td>\n<td>可能使用到的索引</td>\n</tr>\n<tr>\n<td>key</td>\n<td>实际使用的索引</td>\n</tr>\n<tr>\n<td>key_len</td>\n<td>实际使用到的索引的长度</td>\n</tr>\n<tr>\n<td>ref</td>\n<td>当使用索引列等值查询时，与索引列进行等值匹配的对象信息</td>\n</tr>\n<tr>\n<td>rows</td>\n<td>预估的需要读取的记录条数</td>\n</tr>\n<tr>\n<td>filtered</td>\n<td>某表经过搜索条件过滤后剩余记录条数的百分比</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>一些额外信息</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"索引出现失效的情况\"><a class=\"anchor\" href=\"#索引出现失效的情况\">#</a> 索引出现失效的情况</h2>\n<blockquote>\n<p>索引出现失效是很重要问题，如果大量查询语句都出现索引失效情况那么索引就没有起到它的作用还浪费了大量的空间。</p>\n</blockquote>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><strong>索引是一把双刃剑，可提高查询效率，但也会降低插入和更新的速度并占用磁盘空间。</strong></p>\n<p>选择索引的最终目的是为了使查询的速度变快，上面给出的原则是最基本的准则，但不能拘泥于上面的准则，大家要在以后的学习和工作中进行不断的实践，根据应用的实际情况进行分析和判断，选择最合适的索引方式。</p>\n<h2 id=\"id\"><a class=\"anchor\" href=\"#id\">#</a> ID</h2>\n<ol>\n<li>ID 如果相同，可以认为是一组，从上往下顺序执行</li>\n<li>在所有组中， ID 值越大，优先级越高，越先执行</li>\n<li>ID 号每个号码，表示一趟独立的查询，一个 SQL 的查询趟数越少越好</li>\n</ol>\n<h2 id=\"select_type\"><a class=\"anchor\" href=\"#select_type\">#</a> SELECT_TYPE</h2>\n<blockquote>\n<p>确定小查询在整个大查询中扮演了一个怎么样的角色</p>\n</blockquote>\n<p>一条大的查询语句里边可以包含若干个 SELECT 关键字，每个 SELECT 关键字代表着一个小的查询语句，而每个 SELECT 关键字的 FROM 子句中都可以包含若干张表 (这些表用来做连接查询)，每一张表都对应着执行计划输出中的一条记录，对于在同一个 SELECT 关键字中的表来说，它们的 id 值是相同的。</p>\n<p>MySQL 为每一个 SELECT 关键字代表的小查询都定义一个称为之为 select_type 的属性，意思是我们只要知道了某个小查询的 select_type 属性，就知道了这个 小查询在整个大查询中扮演了一个什么角色，下面是 select_type 都可以取那些值：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SIMPLE</td>\n<td>简单选择 (不使用 UNION 或子查询)</td>\n</tr>\n<tr>\n<td>PRIMARY</td>\n<td>最外层的选择</td>\n</tr>\n<tr>\n<td>UNION</td>\n<td>UNION 中的第二个或更高版本的 SELECT 语句</td>\n</tr>\n<tr>\n<td>UNION RESULT</td>\n<td>union 的临时表的类型</td>\n</tr>\n<tr>\n<td>SUBQUERY</td>\n<td>优先选择子查询</td>\n</tr>\n<tr>\n<td>DEPENDENT SUBQUERY</td>\n<td>首先选择子查询，依赖于外部查询</td>\n</tr>\n<tr>\n<td>DEPENDENT UNION</td>\n<td>union 中的第二个或更高版本 SELECT 语句，依赖于外部查询</td>\n</tr>\n<tr>\n<td>DERIVED</td>\n<td>导出表</td>\n</tr>\n<tr>\n<td>MATERIALIZED</td>\n<td>物化子查询 (not in 或者 &lt;&gt;any 子查询)</td>\n</tr>\n<tr>\n<td>UNCACHEABLE SUBQUERY</td>\n<td>不能缓存结果的子查询，必须对外部查询的每一行进行重新计算。</td>\n</tr>\n<tr>\n<td>UNCACHEABLE UNION</td>\n<td>属于不可缓存子查询的 UNION 中的第二个或更高版本的选</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"type\"><a class=\"anchor\" href=\"#type\">#</a> Type</h2>\n<p>执行计划的一条记录就代表着 MySQL 对某个表的执行查询时的访问方法，又称 “访问类型”，其中的 type 列就表明了这个访问方法是啥，是较为重要的一个指标。比如，看到 type 列的值是 ref，表明 MySQL 即将使用 ref 访问方法来执行对 s1 表的查询。</p>\n<p>完整的访问方法如下:</p>\n<p><code>system</code>  &lt;  <code>const</code>  &lt;  <code>eq_ref</code>  &lt;  <code>ref</code>  &lt;  <code>fulltext</code>  &lt;  <code>ref_or_null</code>  &lt;  <code>index_merge</code>  &lt;  <code>unique_subquery</code>  &lt;  <code>index_subquery</code>  &lt;  <code>range</code>  &lt;  <code>index</code>  &lt;  <code>all</code> 。</p>\n<p>越靠近前面的方法效率越高</p>\n<ol>\n<li>system</li>\n</ol>\n<p>当表中只有一条记录并且该表使用的存储引擎的统计数据是精确的，比如  <code>MyISAM</code> 、 <code>Memory</code> ，那么对该表的访问方法就是 system。比方说我们新建一个  <code>MyISAM</code>  表，并为其插入一条记录，在 InnoDB 中无效。</p>\n<ol start=\"2\">\n<li>const</li>\n</ol>\n<p>当我们根据主键或者唯一二级索引列与常数进行等值匹配时，对单表的访问方法就是 const。</p>\n<ol start=\"3\">\n<li>eq_ref</li>\n</ol>\n<p>在连接查询时，如果被驱动表是通过主键或者唯一二级索引列等值匹配的方式进行访问的（如果该主键或者唯一二级索引是联合索引的话，所有的索引列都必须进行等值比较），则对该被驱动表的访问方法就是 <code>eg_ref</code>  。</p>\n<ol start=\"4\">\n<li>ref</li>\n</ol>\n<p>当通过普通的二级索引列与常量进行等值匹配时来查询某个表，那么对该表的访问方法就可能是 'ref'。</p>\n<ol start=\"5\">\n<li>ref_or_null</li>\n</ol>\n<p>当对普通二级索引进行等值匹配查询，该索引列的值也可以是 <code>NULL</code>  值时，那么对该表的访问方法就可能是 <code>ref_or_null</code> 。</p>\n<ol start=\"6\">\n<li>index_range</li>\n</ol>\n<p>单表访问方法时在某些场景下可以使用 Intersection 、Union Sort-Union 这三种索引合并的方式来执行查询</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">or</span> key3 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>unique_subquery</li>\n</ol>\n<p>unique subquery 是针对在一些包含 IN 子查询的查询语句中，如果查询优化器决定将 <code>IN</code>  子查询转换为 <code>EXISTS</code>  子查询，而且子查询可以使用到主键进行等值匹配的话，那么该子查询执行计划的 'type 列的值就是  <code>unique_subquery</code> 。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">WHERE</span> key2 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> s2 <span class=\"token keyword\">WHERE</span> s1<span class=\"token punctuation\">.</span>key1 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>key2<span class=\"token punctuation\">)</span> <span class=\"token operator\">OR</span> key3 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>range</li>\n</ol>\n<p>如果使用索引获取某些 <code>范围区间</code> 的记录，那么就可能使用到  <code>range </code>  访问方法</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>index</li>\n</ol>\n<p>当我们可以使用索引覆盖，但需要扫描全部的索引记录时，该表的访问方法就是  <code>index</code> .</p>\n<pre><code class=\"language-SQL\">EXPLAIN SELECT key_part2 FROM s1\nWHERE key_part3 = 'a';\n</code></pre>\n<ol start=\"10\">\n<li>all</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h3>\n<p>结果值从最好到最坏依次是:<br />\n <code>system</code>  &gt;  <code>const</code>  &gt;  <code>eq_ref</code>  &gt;  <code>ref</code>  &gt;  <code>fulltext</code>  &gt;  <code>ref_or_null</code>  &gt;  <code>index_merge</code>  &gt;  <code>unique_subquery</code>  &gt;  <code>index_subquery</code>  &gt;  <code>range</code> &gt; <code>index</code>  &gt;  <code>ALL</code> <br />\nSQL 性能优化的目标：至少要达到 range 级别要求是 ref 级别，最好是 const 级别。</p>\n",
            "tags": [
                "mysql",
                ""
            ]
        },
        {
            "id": "https://blog.xiaou.icu/springboot/Spring%20Bean%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/",
            "url": "https://blog.xiaou.icu/springboot/Spring%20Bean%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/",
            "title": "Spring Bean 生命周期",
            "date_published": "2022-03-14T05:09:40.000Z",
            "content_html": "<h1 id=\"spring-bean-生命周期\"><a class=\"anchor\" href=\"#spring-bean-生命周期\">#</a> Spring Bean 生命周期</h1>\n<p>Spring Bean 生命周期主要有 13 个阶段。</p>\n<ol>\n<li>Bean 元信息配置阶段</li>\n<li>Bean 元信息解析阶段</li>\n<li>Bean 注册到容器中</li>\n<li>BeanDefinition 合并阶段</li>\n<li>Bean Class 加载阶段</li>\n<li>Bean 实例化阶段\n<ul>\n<li>Bean 实例化前阶段</li>\n<li>Bean 实例化阶段</li>\n</ul>\n</li>\n<li>合并后的 BeanDefinition 处理</li>\n<li>属性赋值阶段\n<ul>\n<li>Bean 实例化后阶段</li>\n<li>Bean 属性赋值前阶段</li>\n<li>Bean 属性赋值阶段</li>\n</ul>\n</li>\n<li>Bean 初始化阶段\n<ul>\n<li>Bean Aware 接口回调阶段</li>\n<li>Bean 初始化前阶段</li>\n<li>Bean 初始化阶段</li>\n<li>Bean 初始化后阶段</li>\n</ul>\n</li>\n<li>所有单例 bean 初始化完成后阶段</li>\n<li>Bean 的使用阶段</li>\n<li>Bean 销毁前阶段</li>\n<li>Bean 销毁阶段</li>\n</ol>\n<p>可以直接简化 5 个阶段</p>\n<ol>\n<li>Bean 的实例化</li>\n<li>*Bean 属性赋值</li>\n<li>Bean 的初始化</li>\n<li>Bean 的使用</li>\n<li>Bean 的销毁</li>\n</ol>\n<h2 id=\"spring-bean-整个执行流程\"><a class=\"anchor\" href=\"#spring-bean-整个执行流程\">#</a> Spring Bean 整个执行流程</h2>\n<ol>\n<li>Spring 启动，查找并加载需要被 Spring 管理的 Bean，对 Bean 进行实例化。</li>\n<li>对 Bean 进行属性注入。</li>\n<li>如果 Bean 实现了 BeanNameAware 接口，则 Spring 调用 Bean 的 setBeanName () 方法传入当前 Bean 的 id 值。</li>\n<li>如果 Bean 实现了 BeanFactoryAware 接口，则 Spring 调用 setBeanFactory () 方法传入当前工厂实例的引用。</li>\n<li>如果 Bean 实现了 ApplicationContextAware 接口，则 Spring 调用 setApplicationContext () 方法传入当前 ApplicationContext 实例的引用。</li>\n<li>如果 Bean 实现了 BeanPostProcessor 接口，则 Spring 调用该接口的预初始化方法  <code>postProcessBeforeInitialzation()</code>  对 Bean 进行加工操作，此处非常重要，Spring 的 AOP 就是利用它实现的。</li>\n<li>如果 Bean 实现了 InitializingBean 接口，则 Spring 将调用 afterPropertiesSet () 方法。</li>\n<li>如果在配置文件中通过 init-method 属性指定了初始化方法，则调用该初始化方法。</li>\n<li>如果 BeanPostProcessor 和 Bean 关联，则 Spring 将调用该接口的初始化方法 postProcessAfterInitialization ()。此时，Bean 已经可以被应用系统使用了。</li>\n<li>如果在  <code>&lt;bean&gt;</code>  中指定了该 Bean 的作用域为 singleton，则将该 Bean 放入 Spring IOC 的缓存池中，触发 Spring 对该 Bean 的生命周期管理；如果在  <code>&lt;bean&gt;</code>  中指定了该 Bean 的作用域为 prototype，则将该 Bean 交给调用者，调用者管理该 Bean 的生命周期，Spring 不再管理该 Bean。</li>\n<li>如果 Bean 实现了 DisposableBean 接口，则 Spring 会调用 destory () 方法销毁 Bean；如果在配置文件中通过  <code>destory-method</code>  属性指定了 Bean 的销毁方法，则 Spring 将调用该方法对 Bean 进行销毁。</li>\n</ol>\n<h2 id=\"bean-元信息配置阶段\"><a class=\"anchor\" href=\"#bean-元信息配置阶段\">#</a> Bean 元信息配置阶段</h2>\n<blockquote>\n<p>这个阶段主要是 Bean 消息的定义阶段</p>\n</blockquote>\n<h3 id=\"bean-信息定义-4-中方式\"><a class=\"anchor\" href=\"#bean-信息定义-4-中方式\">#</a> Bean 信息定义 4 中方式</h3>\n<ol>\n<li>API 的定义方式</li>\n<li>XML 文件定义方式</li>\n<li>properties 文件定义方式</li>\n<li>注解的定义方式</li>\n</ol>\n<h2 id=\"api-的方式\"><a class=\"anchor\" href=\"#api-的方式\">#</a> API 的方式</h2>\n<blockquote>\n<p>其他所有的方式最终都将会采用这种方式来定义 Bean 配置信息。</p>\n</blockquote>\n<p><strong>Spring 容器启动的过程中，会将 Bean 解析成 Spring 内部的 BeanDefinition 结构</strong>。</p>\n<h3 id=\"beandefinition-bean-定义信息接口\"><a class=\"anchor\" href=\"#beandefinition-bean-定义信息接口\">#</a> BeanDefinition: bean 定义信息接口</h3>\n<p>表示 bean 定义信息的接口，里面定义了一些获取 bean 定义配置信息的各种方法。</p>\n<h4 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BeanDefinition</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AttributeAccessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanMetadataElement</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 设置此 bean 的父 bean 名称 (对应 xml 中 bean 元素的 parent 属性)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setParentName</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">String</span> parentName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 返回此 bean 定义时指定的父 bean 的名称</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getParentName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 指定此 bean 定义的 bean 类名 (对应 xml 中 bean 元素的 class 属性)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setBeanClassName</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">String</span> beanClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 返回此 bean 定义的当前 bean 类名</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 注意，如果子定义重写 / 继承其父类的类名，则这不一定是运行时使用的实际类名。此外，这可能只</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 是调用工厂方法的类，或者在调用方法的工厂 bean 引用的情况下，它甚至可能是空的。因此，不要认为这是运</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 行时的最终 bean 类型，而只将其用于单个 bean 定义级别的解析目的。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getBeanClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * 设置此 bean 的生命周期，如：singleton、prototype (对应 xml 中 bean 元素的 scope 属性)</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setScope</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">String</span> scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * 返回此 bean 的生命周期，如：singleton、prototype</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * 设置是否应延迟初始化此 bean（对应 xml 中 bean 元素的 lazy 属性）</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setLazyInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> lazyInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * 返回是否应延迟初始化此 bean，只对单例 bean 有效</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isLazyInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     * 设置此 bean 依赖于初始化的 bean 的名称，bean 工厂将保证 dependsOn 指定的 bean 会在当前 bean 初</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     * 始化之前先初始化好</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setDependsOn</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> dependsOn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 返回此 bean 所依赖的 bean 名称</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getDependsOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * 设置此 bean 是否作为其他 bean 自动注入时的候选者</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * autowireCandidate</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setAutowireCandidate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> autowireCandidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     * 返回此 bean 是否作为其他 bean 自动注入时的候选者</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAutowireCandidate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>     * 设置此 bean 是否为自动注入的主要候选者</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     * primary：是否为主要候选者</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setPrimary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> primary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     * 返回此 bean 是否作为自动注入的主要候选者</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPrimary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>     * 指定要使用的工厂 bean (如果有指定)。这是要对其调用指定工厂方法的 bean 的名称。</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>     * factoryBeanName：工厂 bean 名称</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setFactoryBeanName</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">String</span> factoryBeanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>     * 返回工厂 bean 名称 (如果有) (对应 xml 中 bean 元素的 factory-bean 属性)</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getFactoryBeanName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>     * 指定工厂方法（如果有）。此方法将使用构造函数参数调用，如果未指定任何参数，则不使用任何参</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>     * 数调用。该方法将在指定的工厂 bean（如果有的话）上调用，或者作为本地 bean 类上的静态方法调用。</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>     * factoryMethodName：工厂方法名称</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setFactoryMethodName</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">String</span> factoryMethodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>     * 返回工厂方法名称 (对应 xml 中 bean 的 factory-method 属性)</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getFactoryMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>     * 返回此 bean 的构造函数参数值</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token class-name\">ConstructorArgumentValues</span> <span class=\"token function\">getConstructorArgumentValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>     * 是否有构造器参数值设置信息（对应 xml 中 bean 元素的 & lt;constructor-arg /> 子元素）</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasConstructorArgumentValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token function\">getConstructorArgumentValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>     * 获取 bean 定义是配置的属性值设置信息</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token class-name\">MutablePropertyValues</span> <span class=\"token function\">getPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>     * 这个 bean 定义中是否有属性设置信息（对应 xml 中 bean 元素的 &lt;property /> 子元素）</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token function\">getPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>     * 设置 bean 初始化方法名称</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setInitMethodName</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">String</span> initMethodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    * bean 初始化方法名称</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getInitMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>     * 设置 bean 销毁方法的名称</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setDestroyMethodName</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">String</span> destroyMethodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>     * bean 销毁的方法名称</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getDestroyMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>     * 设置 bean 的 role 信息</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setRole</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    * bean 定义的 role 信息</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>     * 设置 bean 描述信息</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setDescription</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>     *bean 描述信息</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>     * bean 类型解析器</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token class-name\">ResolvableType</span> <span class=\"token function\">getResolvableType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t * 是否是单例的 bean</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t * 是否是多列的 bean</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t * 对应 xml 中 bean 元素的 abstract 属性，用来指定是否是抽象的</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAbstract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t * 返回此 bean 定义来自的资源的描述 (以便在出现错误时显示上下文)</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getResourceDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token class-name\">BeanDefinition</span> <span class=\"token function\">getOriginatingBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>BeanDefinition 接口上面还继承了 2 个接口：</p>\n<ul>\n<li>AttributeAccessor: 属性访问接口</li>\n<li>BeanMetadataElement: 配置源对象的 bean 元数据元素实现的接口</li>\n</ul>\n<p><strong>AttributeAccessor 接口</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AttributeAccessor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t * 设置属性 -> 值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t * 获取某个属性对应的值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Object</span> <span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t * 移除某个属性</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Object</span> <span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t * 是否包含某个属性</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t * 返回所有的属性名称</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">attributeNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>这个接口相当于 key -&gt; value 数据结构的一种操作， BeanDefinition 实现这个接口内部也是使用 LinkedHashMap 来实现这个接口中的所有方法，通常我们通过这些方法保存 BeanDefinition 定义过程中产生的一下附加信息。</p>\n</blockquote>\n<p><strong>BeanMetadataElement 接口</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BeanMetadataElement</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t * 返回这个元数据元素的配置源</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t * (may be &#123;@code null&#125;).</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>BeanDefinition 继承这个接口，getSource 返回 BeanDefinition 定义的来源，比如我们通过 xml 定 BeanDefinition 的，此时 getSource 就表示定义 bean 的 xml 资源；若我们通过 api 的方式定义 BeanDefinition，我们可以将 source 设置为定义 BeanDefinition 时所在的类，出错时，可以根据这个来源方便排错。</p>\n</blockquote>\n<ol>\n<li>RootBeanDefinition 类：表示根 bean 定义信息\n<ul>\n<li>通常 bean 中没有父 bean 的就使用这种表示</li>\n</ul>\n</li>\n<li>ChildBeanDefinition 类：表示子 bean 定义信息\n<ul>\n<li>如果需要指定父 bean 的，可以使用 ChildBeanDefinition 来定义子 bean 的配置信息，里面有个<br />\n parentName 属性，用来指定父 bean 的名称。</li>\n</ul>\n</li>\n<li>GenericBeanDefinition 类：通用的 bean 定义信息\n<ul>\n<li>既可以表示没有父 bean 的 bean 配置信息，也可以表示有父 bean 的子 bean 配置信息，这个类里面也有 parentName 属性，用来指定父 bean 的名称。</li>\n</ul>\n</li>\n<li>ConfigurationClassBeanDefinition 类：表示通过配置类中 @Bean 方法定义 bean 信息\n<ul>\n<li>可以通过配置类中使用 @Bean 来标注一些方法，通过这些方法来定义 bean，这些方法配置的 bean 信息最后会转换为 ConfigurationClassBeanDefinition 类型的对象。</li>\n</ul>\n</li>\n<li>AnnotatedBeanDefinition 接口：表示通过注解的方式定义的 bean 信息</li>\n</ol>\n<p>​\t\t\t里面有个方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">AnnotationMetadata</span> <span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用来获取定义这个 bean 的类上的所有注解信息。</p>\n<h3 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h3>\n<blockquote>\n<p>BeanDefinitionBuilder：构建 BeanDefinition 的工具类</p>\n<p>Spring 中为了方便操作 BeanDefinition，提供了一个类： BeanDefinitionBuilder ，内部提供了很多<br />\n静态方法，通过这些方法可以非常方便的组装 BeanDefinition 对象。</p>\n</blockquote>\n<h4 id=\"普通类\"><a class=\"anchor\" href=\"#普通类\">#</a> 普通类</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Users</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Users&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试类</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BuildBeanTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildBeanTest1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">BeanDefinitionBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">rootBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">AbstractBeanDefinition</span> beanDefinition <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>beanDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>Root bean: class [com.example.springdemo.bean.Users]; \n\tscope=; abstract=false; lazyInit=null; \n\tautowireMode=0; dependencyCheck=0; autowireCandidate=true; \n\tprimary=false; factoryBeanName=null; \n\tfactoryMethodName=null; initMethodName=null; destroyMethodName=null\n</code></pre>\n<h4 id=\"组装一个有属性的-bean\"><a class=\"anchor\" href=\"#组装一个有属性的-bean\">#</a> 组装一个有属性的 Bean</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试类</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">buildBeanTest2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">BeanDefinitionBuilder</span> builder <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">rootBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 给 user 中 name 赋值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    builder<span class=\"token punctuation\">.</span><span class=\"token function\">addPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaou\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">AbstractBeanDefinition</span> userDefinition <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 创建一个 Spring 容器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">DefaultListableBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 将 userDefinition 这个 bean 配置信息注册到 Spring 容器中，bean 名称指定为 user</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> userDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 从 Spring 容器获取 User 名称这个 Bean 然后进行输出</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Users</span> user <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>Root bean: class [com.example.springdemo.bean.Users];\n\tscope=; abstract=false; lazyInit=null; autowireMode=0;\n\tdependencyCheck=0; autowireCandidate=true; primary=false;\n\tfactoryBeanName=null; factoryMethodName=null;\n\tinitMethodName=null; destroyMethodName=null\nUsers&#123;name='xiaou'&#125;\n</code></pre>\n<h3 id=\"组合依赖-bean\"><a class=\"anchor\" href=\"#组合依赖-bean\">#</a> 组合依赖 Bean</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>实体对象</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Users Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ToString</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Users</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Pet</span> pet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// Pet Bean</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@ToString</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试方法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">buildBeanTest3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">BeanDefinition</span> petDefinition <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">rootBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pet</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaoy\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">BeanDefinition</span> usersDefinition <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">rootBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaou\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addPropertyReference</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pet\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pet\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">DefaultListableBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pet\"</span><span class=\"token punctuation\">,</span> petDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> usersDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>Pet(name=xiaoy)\nUsers(name=xiaou, pet=Pet(name=xiaoy))\n</code></pre>\n<h3 id=\"设置map-set-list属性\"><a class=\"anchor\" href=\"#设置map-set-list属性\">#</a> 设置（Map、Set、List）属性</h3>\n<h3 id=\"阶段小结\"><a class=\"anchor\" href=\"#阶段小结\">#</a> 阶段小结</h3>\n<p>bean 注册者只识别 BeanDefinition 对象，不管什么方式最后都会将这些 bean 定义的信息转换为 BeanDefinition 对象，然后注册到 Spring 容器中。</p>\n<h2 id=\"bean-元信息解析阶段\"><a class=\"anchor\" href=\"#bean-元信息解析阶段\">#</a> Bean 元信息解析阶段</h2>\n<blockquote>\n<p>Bean 元信息的解析就是将各种方式定义的 bean 配置信息解析为 BeanDefinition 对象。</p>\n</blockquote>\n<h3 id=\"bean-元信息的解析主要有-3-种方式\"><a class=\"anchor\" href=\"#bean-元信息的解析主要有-3-种方式\">#</a> Bean 元信息的解析主要有 3 种方式</h3>\n<ol>\n<li>xml 文件定义 bean 的解析\n<ul>\n<li>使用 XmlBeanDefinitionReader 这个类解析</li>\n</ul>\n</li>\n<li>properties 文件定义 bean 的解析\n<ul>\n<li>使用 PropertiesBeanDefinitionReader 这个类解析</li>\n</ul>\n</li>\n<li>注解方式定义 bean 的解析\n<ul>\n<li>使用 PropertiesBeanDefinitionReader 这个类解析</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"spring-bean注册阶段\"><a class=\"anchor\" href=\"#spring-bean注册阶段\">#</a> Spring Bean 注册阶段</h2>\n<blockquote>\n<p>Bean 注册阶段需要用到一个非常重要的接口：<strong> <code>BeanDefinitionRegistry</code> </strong></p>\n</blockquote>\n<h2 id=\"beandefinitionregistry-接口\"><a class=\"anchor\" href=\"#beandefinitionregistry-接口\">#</a> BeanDefinitionRegistry 接口</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BeanDefinitionRegistry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AliasRegistry</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t * 注册一个新的 bean 定义</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t * beanName：bean 的名称</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t * beanDefinition：bean 定义信息</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinition</span> beanDefinition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeanDefinitionStoreException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t * 通过 bean 名称移除已注册的 bean</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t * beanName：bean 名称</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">removeBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">NoSuchBeanDefinitionException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t * 查看 beanName 是否注册过</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t * beanName：bean 名称</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">BeanDefinition</span> <span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">NoSuchBeanDefinitionException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t * 查看 beanName 是否注册过</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">containsBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t * 获取已经定义 (注册) 的 bean 名称列表</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t * 返回注册器中已注册的 bean 数量</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getBeanDefinitionCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t * 确定给定的 bean 名称或者别名是否已在此注册表中使用</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t * beanName：可以是 bean 名称或者 bean 的别名</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isBeanNameInUse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"aliasregistry-别名注册器\"><a class=\"anchor\" href=\"#aliasregistry-别名注册器\">#</a> AliasRegistry 别名注册器</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AliasRegistry</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t * 给 name 指定别名 alias</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> alias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t * 从此注册表中删除指定的别名</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">removeAlias</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> alias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t * 判断 name 是否作为别名已经被使用了</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAlias</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t * 返回 name 对应的所有别名</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getAliases</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"beandefinitionregistry-唯一实现-defaultlistablebeanfactory\"><a class=\"anchor\" href=\"#beandefinitionregistry-唯一实现-defaultlistablebeanfactory\">#</a> BeanDefinitionRegistry 唯一实现： DefaultListableBeanFactory</h3>\n<p>Spring 中 BeanDefinitionRegistry 接口有一个 <strong>唯一</strong> 的实现类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span>DefaultListableBeanFactory</span></pre></td></tr></table></figure><h3 id=\"实验-2\"><a class=\"anchor\" href=\"#实验-2\">#</a> 实验</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">DefaultListableBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">GenericBeanDefinition</span> nameBdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    nameBdf<span class=\"token punctuation\">.</span><span class=\"token function\">setBeanClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    nameBdf<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructorArgumentValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addIndexedArgumentValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaou\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 将 bean 注册到容器中</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> nameBdf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 通过名称获取 BeanDefinition</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BeanDefinition: \"</span> <span class=\"token operator\">+</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 通过名称判断是否注册过 BeanDefinition</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否注册过 Bean: \"</span> <span class=\"token operator\">+</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">containsBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 获取所有注册的名称</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"所有注册的名称: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 获取已经注册 BeanDefinition 数量</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已经注册 BeanDefinition 数量: \"</span> <span class=\"token operator\">+</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 判断 name bean 的名称是否被使用</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name 的名称是否被使用: \"</span> <span class=\"token operator\">+</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">isBeanNameInUse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 注册别名</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"alias_name_1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"alias_name_2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 判断 alias_name_1 别名是否使用</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"判断 alias_name_1 别名是否使用: \"</span> <span class=\"token operator\">+</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">isAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alias_name_1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 获取对应名称所有别名</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取对应名称所有别名: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span><span class=\"token function\">getAliases</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 获取 bean</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>结果</strong></p>\n<pre><code>BeanDefinition: xiaou\n是否注册过 Bean: true\n所有注册的名称: [name]\n已经注册 BeanDefinition 数量: 1\nname 的名称是否被使用: true\n判断 alias_name_1 别名是否使用: true\n获取对应名称所有别名: [alias_name_1, alias_name_2]\nxiaou\n</code></pre>\n<p>getBean 核心方法可以看</p>\n<pre><code>org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzOTQ5NzUzOTA5MjU1\">源码解析链接</span></p>\n<h2 id=\"beandefinition合并阶段\"><a class=\"anchor\" href=\"#beandefinition合并阶段\">#</a> BeanDefinition 合并阶段</h2>\n<h3 id=\"合并阶段是做什么\"><a class=\"anchor\" href=\"#合并阶段是做什么\">#</a> 合并阶段是做什么？</h3>\n<p>可能我们定义 bean 的时候有父子 bean 关系，此时子 BeanDefinition 中的信息是不完整的。</p>\n<p>比如设置属性的时候配置在父 BeanDefinition 中，此时子 BeanDefinition 中是没有这些信息的，需要将子 bean BeanDefinition 和父 bean 的 BeanDefinition 进行合并，得到最终的一个 RootBeanDefinition ，合并之后得到的 RootBeanDefinition 包含 bean 定义的所有信息，包含了从父 bean 中继继承过来的所有信息，后续 bean 的所有创建工作就是依靠合并之后 BeanDefinition 来进行的。</p>\n<p>合并 BeanDefinition 会使用下面这个方法：</p>\n<ul>\n<li><code>org.springframework.beans.factory.support.AbstractBeanFactory#getMergedBeanDefinition</code></li>\n</ul>\n<h2 id=\"bean-class-加载阶段\"><a class=\"anchor\" href=\"#bean-class-加载阶段\">#</a> Bean Class 加载阶段</h2>\n<p><strong>这个阶段就是将 bean 的 class 名称转换为 Class 类型的对象。</strong></p>\n<p>BeanDefinition 中有个 Object 类型的字段：beanClass</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Object</span> beanClass<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用来表示 bean 的 class 对象，通常这个字段的值有 2 种类型，</p>\n<ol>\n<li>bean 对应的 Class 类型的对象\n<ul>\n<li>不需要解析</li>\n</ul>\n</li>\n<li>bean 对应的 Class 的完整类名\n<ul>\n<li>即这个字段是 bean 的类名的 时候，就需要通过类加载器将其转换为一个 Class 对象。</li>\n</ul>\n</li>\n</ol>\n<p>阶段 4 中合并产生的 RootBeanDefinition 中的 beanClass 进行解析，将 bean 的类名转换为 Class 对象 ，然后赋值给 beanClass 字段。</p>\n<p>源码位置:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span>AbstractBeanFactory</span>#resolveBeanClass</pre></td></tr></table></figure><h2 id=\"bean实例化阶段\"><a class=\"anchor\" href=\"#bean实例化阶段\">#</a> Bean 实例化阶段</h2>\n<p>有两个小阶段</p>\n<ol>\n<li>Bean 实例化前操作</li>\n<li>Bean 实例化后操作</li>\n</ol>\n<p>在  <code>DefaultListableBeanFactory</code>  中有一个在这个阶段特别重要的字段</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">></span></span> beanPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyOnWriteArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个字段是一个  <code>BeanPostProcessor</code>  类型的集合。</p>\n<p><code>BeanPostProcessor</code>  是一个接口，还有很多子接口，这些接口中提供了很多方法，Spring 在 Bean 生命<br />\n周期的不同阶段，会调用上面这个列表中的 BeanPostProcessor 中的一些方法，来对生命周期进行扩<br />\n展。</p>\n<p>接口的就有两个方法其方法签名为:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Bean 实例化前操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Bean 实例化后操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>BeanPostProcessor 又有很多的子接口来细分不同的功能，从下面的代码片段中可以看出</p>\n<p>代码片段出自  <code>org.springframework.beans.factory.support.AbstractBeanFactory#getBeanPostProcessorCache</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span> bp <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanPostProcessors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        bpCache<span class=\"token punctuation\">.</span>instantiationAware<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">SmartInstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            bpCache<span class=\"token punctuation\">.</span>smartInstantiationAware<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SmartInstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">DestructionAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        bpCache<span class=\"token punctuation\">.</span>destructionAware<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DestructionAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MergedBeanDefinitionPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        bpCache<span class=\"token punctuation\">.</span>mergedDefinition<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MergedBeanDefinitionPostProcessor</span><span class=\"token punctuation\">)</span> bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"instantiationawarebeanpostprocessor\"><a class=\"anchor\" href=\"#instantiationawarebeanpostprocessor\">#</a> InstantiationAwareBeanPostProcessor</h3>\n<blockquote>\n<p>通过返回一个代理对象的方式，达到改变目标类类型的目的。在不想改变现有类的逻辑而又想借助现有类实现其他功能，就可以使用这种方式。</p>\n</blockquote>\n<p><strong>方法</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在工厂将给定的属性值应用到给定的 bean 之前，对它们进行后处理，而不需要任何属性描述符。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token class-name\">PropertyValues</span> <span class=\"token function\">postProcessProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyValues</span> pvs<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                         <span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 Bean 实例化前调用该方法，返回值可以为代理后的 Bean，以此代替 Bean 默认的实例化过程。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 返回值不为 null 时，后续只会调用 BeanPostProcessor 的 postProcessAfterInitialization 方法，</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 而不会调用别的后续后置处理方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInstantiation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanClass<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                              <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 当 Bean 通过构造器或者工厂方法被实例化后，当属性还未被赋值前，该方法会被调用，一般用于自定义属性赋值。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 方法返回值为布尔类型，返回 true 时，表示 Bean 属性需要被赋值；返回 false 表示跳过 Bean 属性赋值，</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 并且 InstantiationAwareBeanPostProcessor 的 postProcessProperties 方法不会被调用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">postProcessAfterInstantiation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"smartinstantiationawarebeanpostprocessor\"><a class=\"anchor\" href=\"#smartinstantiationawarebeanpostprocessor\">#</a> SmartInstantiationAwareBeanPostProcessor</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 预测 Bean 的类型，返回第一个预测成功的 Class 类型，如果不能预测返回 null</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">predictBeanType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanClass<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                      <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 选择合适的构造器，比如目标对象有多个构造器，在这里可以进行一些定制化，选择合适的构造器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//beanClass 参数表示目标实例的类型，beanName 是目标实例在 Spring 容器中的 name</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 返回值是个构造器数组，如果返回 null，会执行下一个 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// PostProcessor 的 determineCandidateConstructors 方法；否则选取该 PostProcessor 选择的构造器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">determineCandidateConstructors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanClass<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                              <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获得提前暴露的 bean 引用。主要用于解决循环引用的问题</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 只有单例对象才会调用此方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getEarlyBeanReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                          <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"destructionawarebeanpostprocessor\"><a class=\"anchor\" href=\"#destructionawarebeanpostprocessor\">#</a> DestructionAwareBeanPostProcessor</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 该方法是 bean 在 Spring 在容器中被销毁之前调用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeforeDestruction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 确定给定的 bean 实例是否需要这个后处理程序销毁。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">requiresDestruction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"mergedbeandefinitionpostprocessor\"><a class=\"anchor\" href=\"#mergedbeandefinitionpostprocessor\">#</a> MergedBeanDefinitionPostProcessor</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 为指定的 bean 对给定的合并 bean 定义进行后处理。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">postProcessMergedBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RootBeanDefinition</span> beanDefinition<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                             <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 指定名称的 bean 定义已被重置的通知，</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 并且该后处理程序应清除受影响 bean 的任何元数据。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">resetBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"实验-3\"><a class=\"anchor\" href=\"#实验-3\">#</a> 实验</h3>\n<blockquote>\n<p>自定义一个注解，当构造器被这个注解标注的时候，让 Spring 自动选择使用这个构造器创建对象。</p>\n</blockquote>\n<p>因为涉及到构造器所以使用的是  <code>SmartInstantiationAwareBeanPostProcessor</code>  接口。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>注解</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONSTRUCTOR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAutowired</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySmartInstantiationAwareBeanPostProcessor</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SmartInstantiationAwareBeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">determineCandidateConstructors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanClass<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                    <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>beanClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用 MySmartInstantiationAwareBeanPostProcessor\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token string\">\".determineCandidateConstructors 方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> declaredConstructors <span class=\"token operator\">=</span> beanClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> constructors <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>declaredConstructors<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>constructor <span class=\"token operator\">-></span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyAutowired</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> constructors<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> constructors <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试方法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token class-name\">DefaultListableBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 创建一个 SmartInstantiationAwareBeanPostProcessor, 将其添加到容器中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      factory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              <span class=\"token class-name\">MySmartInstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        <span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        <span class=\"token function\">addConstructorArgValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaou\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                        <span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        <span class=\"token function\">addConstructorArgValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        <span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        <span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>class com.example.springdemo.bean.Person\n调用 MySmartInstantiationAwareBeanPostProcessor.determineCandidateConstructors 方法\nclass java.lang.String\n调用 MySmartInstantiationAwareBeanPostProcessor.determineCandidateConstructors 方法\n调用了 Person(String name)\nPerson(name=xiaou, age=null)\n</code></pre>\n<h2 id=\"合并后的-beandefinition-处理\"><a class=\"anchor\" href=\"#合并后的-beandefinition-处理\">#</a> 合并后的 BeanDefinition 处理</h2>\n<p>postProcessMergedBeanDefinition 有 2 个实现类。</p>\n<ol>\n<li>在 postProcessMergedBeanDefinition 方法中对 @Autowired、@Value 标注的方法、字段进行缓存<br />\n org.springframework.context.annotation.CommonAnnotationBeanPostProcessor</li>\n<li>在 postProcessMergedBeanDefinition 方法中对 @Resource 标注的字段、@Resource 标注的方<br />\n法、 @PostConstruct 标注的字段、 @PreDestroy 标注的方法进行缓存</li>\n</ol>\n<h2 id=\"bean-属性设置阶段\"><a class=\"anchor\" href=\"#bean-属性设置阶段\">#</a> Bean 属性设置阶段</h2>\n<p>属性设置阶段分为 3 个子阶段</p>\n<ol>\n<li>实例化后阶段</li>\n<li>Bean 属性赋值前处理</li>\n<li>Bean 属性赋值</li>\n</ol>\n<h3 id=\"实例化后阶段\"><a class=\"anchor\" href=\"#实例化后阶段\">#</a> 实例化后阶段</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span> bp <span class=\"token operator\">:</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span> ibp <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> bp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ibp<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessAfterInstantiation</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                               beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>postProcessAfterInstantiation 方法返回 false 的时候，后续的 Bean 属性赋值前处理、Bean 属性赋值都会被跳过了。</p>\n</blockquote>\n<p>方法签名</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">postProcessAfterInstantiation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"实验-4\"><a class=\"anchor\" href=\"#实验-4\">#</a> 实验</h4>\n<p>阻止 user1 被赋值</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试类</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">DefaultListableBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">postProcessAfterInstantiation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                      <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                                   <span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                   <span class=\"token function\">addPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaou\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                                   <span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                   <span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                   <span class=\"token function\">addPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaoy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                   <span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName <span class=\"token operator\">:</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s->%s\"</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                                         factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>user1-&gt;Users(name=null)\nuser2-&gt;Users(name=xiaoy)\n</code></pre>\n<h3 id=\"bean-属性赋值前处理\"><a class=\"anchor\" href=\"#bean-属性赋值前处理\">#</a> Bean 属性赋值前处理</h3>\n<blockquote>\n<p>这个阶段会调用 InstantiationAwareBeanPostProcessor 接口的 postProcessProperties 方法</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span> bp <span class=\"token operator\">:</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span> ibp <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> bp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">PropertyValues</span> pvsToUse <span class=\"token operator\">=</span> ibp<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessProperties</span><span class=\"token punctuation\">(</span>pvs<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                         bw<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pvsToUse <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filteredPds <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                filteredPds <span class=\"token operator\">=</span> <span class=\"token function\">filterPropertyDescriptorsForDependencyCheck</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                         mbd<span class=\"token punctuation\">.</span>allowCaching<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            pvsToUse <span class=\"token operator\">=</span> ibp<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessPropertyValues</span><span class=\"token punctuation\">(</span>pvs<span class=\"token punctuation\">,</span> filteredPds<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                         bw<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pvsToUse <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        pvs <span class=\"token operator\">=</span> pvsToUse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>从上面可以看出，如果 InstantiationAwareBeanPostProcessor 中的 postProcessProperties 和 postProcessPropertyValues 都返回空的时候，表示这个 bean 不 需要设置属性，直接返回了，<br />\n直接进入下一个阶段。</p>\n</blockquote>\n<p>这个方法 2 个比较重要的实现类</p>\n<ol>\n<li>AutowiredAnnotationBeanPostProcessor 在这个方法中对 @Autowired、@Value 标注的字段、方法注入值。</li>\n<li>CommonAnnotationBeanPostProcessor 在这个方法中对 @Resource 标注的字段和方法注入值。</li>\n</ol>\n<h3 id=\"bean-属性赋值阶段\"><a class=\"anchor\" href=\"#bean-属性赋值阶段\">#</a> Bean 属性赋值阶段</h3>\n<p>这个过程比较简单了，循环处理 PropertyValues 中的属性值信息，通过反射调用 set 方法将属性的值设 置到 bean 实例中。</p>\n<p>PropertyValues 中的值是通过 bean.xml 中 property 元素配置的，或者调用 MutablePropertyValues 中 add 方法设置的值。</p>\n<h2 id=\"bean初始化阶段\"><a class=\"anchor\" href=\"#bean初始化阶段\">#</a> Bean 初始化阶段</h2>\n<p>这个阶段分成 5 个小阶段:</p>\n<ol>\n<li>Bean Aware 接口回调</li>\n<li>Bean 初始化前操作</li>\n<li>Bean 初始化操作</li>\n<li>Bean 初始化后操作</li>\n<li>Bean 初始化完成操作</li>\n</ol>\n<h3 id=\"bean-aware-接口回调\"><a class=\"anchor\" href=\"#bean-aware-接口回调\">#</a> Bean Aware 接口回调</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeAwareMethods</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Aware</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">BeanNameAware</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanNameAware</span><span class=\"token punctuation\">)</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setBeanName</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">BeanClassLoaderAware</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">ClassLoader</span> bcl <span class=\"token operator\">=</span> <span class=\"token function\">getBeanClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bcl <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanClassLoaderAware</span><span class=\"token punctuation\">)</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setBeanClassLoader</span><span class=\"token punctuation\">(</span>bcl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">BeanFactoryAware</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanFactoryAware</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>             bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractAutowireCapableBeanFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>bean 实例实现了上面的接口，会按照下面的顺序依次进行调用：</p>\n<ol>\n<li>BeanNameAware：将 bean 的名称注入进去</li>\n<li>BeanClassLoaderAware：将 BeanClassLoader 注入进去</li>\n<li>BeanFactoryAware：将 BeanFactory 注入进去</li>\n</ol>\n<h3 id=\"bean-初始化前操作\"><a class=\"anchor\" href=\"#bean-初始化前操作\">#</a> Bean 初始化前操作</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">applyBeanPostProcessorsBeforeInitialization</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Object</span> existingBean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> existingBean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span> processor <span class=\"token operator\">:</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Object</span> current <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        result <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>会调用 BeanPostProcessor 的 postProcessBeforeInitialization 方法，若返回 null，当前方法将结束。</p>\n<p><strong>通常称 postProcessBeforeInitialization 这个方法为：bean 初始化前操作。</strong></p>\n<p>这个接口有两个实现类</p>\n<ol>\n<li>org.springframework.context.support.ApplicationContextAwareProcessor</li>\n<li>org.springframework.context.annotation.CommonAnnotationBeanPostProcessor</li>\n</ol>\n<h4 id=\"applicationcontextawareprocessor-注入-6-个-aware-接口对象\"><a class=\"anchor\" href=\"#applicationcontextawareprocessor-注入-6-个-aware-接口对象\">#</a> ApplicationContextAwareProcessor 注入 6 个 Aware 接口对象</h4>\n<p>如果 bean 实现了下面的接口，在  <code>ApplicationContextAwareProcessor#postProcessBeforeInitialization</code>  中会依次调用下面接口中的方法，将 Aware 前缀对应的对象注入到 bean 实例中</p>\n<ol>\n<li>EnvironmentAware：注入 Environment 对象</li>\n<li>EmbeddedValueResolverAware：注入 EmbeddedValueResolver 对象</li>\n<li>ResourceLoaderAware：注入 ResourceLoader 对象</li>\n<li>ApplicationEventPublisherAware：注入 ApplicationEventPublisher 对象</li>\n<li>MessageSourceAware：注入 MessageSource 对象</li>\n<li>ApplicationContextAware：注入 ApplicationContext 对象</li>\n</ol>\n<p>看出这个类以 ApplicationContext 开头的，说明这个类只能在 ApplicationContext 环境中使用。</p>\n<h4 id=\"实验-5\"><a class=\"anchor\" href=\"#实验-5\">#</a> 实验</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EnvironmentAware</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">EmbeddedValueResolverAware</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">ResourceLoaderAware</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ApplicationEventPublisherAware</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">MessageSourceAware</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ApplicationContextAware</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostConstruct</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postConstruct1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postConstruct1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostConstruct</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postConstruct2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postConstruct2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setApplicationContext:\"</span> <span class=\"token operator\">+</span> applicationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationEventPublisher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationEventPublisher</span> applicationEventPublisher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setApplicationEventPublisher:\"</span> <span class=\"token operator\">+</span> applicationEventPublisher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setEmbeddedValueResolver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringValueResolver</span> resolver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setEmbeddedValueResolver:\"</span> <span class=\"token operator\">+</span> resolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Environment</span> environment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setEnvironment:\"</span> <span class=\"token operator\">+</span> environment<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMessageSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageSource</span> messageSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setMessageSource:\"</span> <span class=\"token operator\">+</span> messageSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setResourceLoader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceLoader</span> resourceLoader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setResourceLoader:\"</span> <span class=\"token operator\">+</span> resourceLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试方法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>setEnvironment:class org.springframework.core.env.StandardEnvironment\nsetEmbeddedValueResolver:org.springframework.beans.factory.config.EmbeddedValueResolver@175b9425\nsetResourceLoader:org.springframework.context.annotation.AnnotationConfigApplicationContext@475e586c, started on Tue Mar 15 13:11:39 CST 2022\nsetApplicationEventPublisher:org.springframework.context.annotation.AnnotationConfigApplicationContext@475e586c, started on Tue Mar 15 13:11:39 CST 2022\nsetMessageSource:org.springframework.context.annotation.AnnotationConfigApplicationContext@475e586c, started on Tue Mar 15 13:11:39 CST 2022\nsetApplicationContext:org.springframework.context.annotation.AnnotationConfigApplicationContext@475e586c, started on Tue Mar 15 13:11:39 CST 2022\npostConstruct2\npostConstruct1\n</code></pre>\n<h3 id=\"bean-初始化阶段\"><a class=\"anchor\" href=\"#bean-初始化阶段\">#</a> Bean 初始化阶段</h3>\n<p>这个阶段的有两个步骤：</p>\n<ol>\n<li>调用 InitializingBean 接口的 afterPropertiesSet 方法。</li>\n<li>调用定义 bean 的时候指定的初始化方法。</li>\n</ol>\n<p>InitializingBean 接口方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InitializingBean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>当我们的 bean 实现了这个接口的时候，会在这个阶段被调用。</p>\n</blockquote>\n<p>指定 bean 的初始化方法，3 种方式</p>\n<ol>\n<li>xml 文件指定初始化方法</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">init-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bean中方法名称<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>@Bean 的方式指定初始化方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>initMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"初始化的方法\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>API 的方式指定初始化方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanDefinition<span class=\"token punctuation\">.</span><span class=\"token function\">setInitMethodName</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>初始化的方法最终会赋值给下面这个字段</p>\n<p><code>org.springframework.beans.factory.support.AbstractBeanDefinition#initMethodName</code></p>\n<h4 id=\"实验-6\"><a class=\"anchor\" href=\"#实验-6\">#</a> 实验</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InitBean</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InitializingBean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用 init() 方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用 afterPropertiesSet() 方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试类</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanInitTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">initMethodTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">DefaultListableBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">BeanDefinition</span> initBean <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InitBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">setInitMethodName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"initBean\"</span><span class=\"token punctuation\">,</span> initBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"initBean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>调用 <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>调用 <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>springdemo<span class=\"token punctuation\">.</span>life<span class=\"token punctuation\">.</span>aware<span class=\"token punctuation\">.</span></span>InitBean</span><span class=\"token annotation punctuation\">@49b0b76</span></pre></td></tr></table></figure><h3 id=\"bean-初始化后阶段\"><a class=\"anchor\" href=\"#bean-初始化后阶段\">#</a> Bean 初始化后阶段</h3>\n<blockquote>\n<p>调用 BeanPostProcessor 接口的 postProcessAfterInitialization 方法 ，返回 null 的时候，会中断上面的操作。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">applyBeanPostProcessorsAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> existingBean<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                      <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> existingBean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span> processor <span class=\"token operator\">:</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Object</span> current <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        result <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>通常将 BeanPostProcessor 称为 Bean 初始化后置操作</p>\n</blockquote>\n<h4 id=\"实验-7\"><a class=\"anchor\" href=\"#实验-7\">#</a> 实验</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">postProcessAfterInitializationTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">DefaultListableBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                     <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postProcessAfterInitialization: \"</span> <span class=\"token operator\">+</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                   <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                                   <span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                                   <span class=\"token punctuation\">.</span><span class=\"token function\">addConstructorArgValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaou\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                   <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"personInformation\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                   <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                   <span class=\"token punctuation\">.</span><span class=\"token function\">addConstructorArgValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaouxiaouxiaou\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                  <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName <span class=\"token operator\">:</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s->%s\"</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                                         factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>postProcessAfterInitialization: name\nname-&gt;xiaou\npostProcessAfterInitialization: personInformation\npersonInformation-&gt;xiaouxiaouxiaou\n</code></pre>\n<h2 id=\"所有单例-bean-初始化完成后阶段\"><a class=\"anchor\" href=\"#所有单例-bean-初始化完成后阶段\">#</a> 所有单例 bean 初始化完成后阶段</h2>\n<p>所有单例 bean 实例化完成之后，Spring 会回调下面这个接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SmartInitializingSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">afterSingletonsInstantiated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>确保所有非 lazy 的单例都被实例化，同时考虑到 FactoryBeans。如果需要，通常在工厂设置结束时调用。</p>\n<p><code>org.springframework.beans.factory.support.DefaultListableBeanFactory#preInstantiateSingletons</code></p>\n<h3 id=\"实验-8\"><a class=\"anchor\" href=\"#实验-8\">#</a> 实验</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">DefaultListableBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mySmartInitializingSingleton\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MySmartInitializingSingleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                        <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        <span class=\"token punctuation\">.</span><span class=\"token function\">addPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaou\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"准备触发所有单例 bean 初始化\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">preInstantiateSingletons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>准备触发所有单例 bean 初始化\n所有的 Bean 初始化完成\n</code></pre>\n<h2 id=\"bean-使用阶段\"><a class=\"anchor\" href=\"#bean-使用阶段\">#</a> Bean 使用阶段</h2>\n<blockquote>\n<p>调用 getBean 方法得到了 bean 之后</p>\n</blockquote>\n<h2 id=\"bean-销毁阶段\"><a class=\"anchor\" href=\"#bean-销毁阶段\">#</a> Bean 销毁阶段</h2>\n<h3 id=\"触发-bean-销毁的几种方式\"><a class=\"anchor\" href=\"#触发-bean-销毁的几种方式\">#</a> 触发 bean 销毁的几种方式</h3>\n<ol>\n<li>调用  <code>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#destroyBean</code></li>\n<li>调用  <code>org.springframework.beans.factory.config.ConfigurableBeanFactory#destroySingletons</code></li>\n<li>调用 ApplicationContext 中的 close 方法</li>\n</ol>\n<h3 id=\"bean-销毁阶段会依次执行\"><a class=\"anchor\" href=\"#bean-销毁阶段会依次执行\">#</a> Bean 销毁阶段会依次执行</h3>\n<ol>\n<li>轮询 beanPostProcessors 列表，如果是 DestructionAwareBeanPostProcessor 这种类型的，会调用其内部的 postProcessBeforeDestruction 方法。</li>\n<li>如果 bean 实现了  <code>org.springframework.beans.factory.DisposableBean</code>  接口，会调用这个接口中的 destroy 方法。</li>\n<li>调用 bean 自定义的销毁方法</li>\n</ol>\n<h3 id=\"destructionawarebeanpostprocessor-接口\"><a class=\"anchor\" href=\"#destructionawarebeanpostprocessor-接口\">#</a> DestructionAwareBeanPostProcessor 接口</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DestructionAwareBeanPostProcessor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * bean 销毁前调用的方法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeforeDestruction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">BeansException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 用来判断 bean 是否需要触发 postProcessBeforeDestruction 方法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">requiresDestruction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"自定义销毁方法有-3-种方式\"><a class=\"anchor\" href=\"#自定义销毁方法有-3-种方式\">#</a> 自定义销毁方法有 3 种方式</h3>\n<ol>\n<li>XML 中指定摧毁方法</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">destroy-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bean中方法名称<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>@Bean 中指定摧毁方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>destroyMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"初始化的方法\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>API  方式指定</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanDefinition<span class=\"token punctuation\">.</span><span class=\"token function\">setDestroyMethodName</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"实验-9\"><a class=\"anchor\" href=\"#实验-9\">#</a> 实验</h3>\n<h4 id=\"自定义-destructionawarebeanpostprocessor\"><a class=\"anchor\" href=\"#自定义-destructionawarebeanpostprocessor\">#</a> 自定义 DestructionAwareBeanPostProcessor</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDestructionAwareBeanPostProcessor</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DestructionAwareBeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeforeDestruction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                               <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"准备销毁 >> \"</span> <span class=\"token operator\">+</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试方法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">destructionAwareBeanPostProcessorTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">DefaultListableBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyDestructionAwareBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                 <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                   <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                 <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                   <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person3\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                   <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                   <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 触发所有单例 bean 初始化</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">preInstantiateSingletons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 销毁指定的 bean</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">destroySingleton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 销毁所有的单列 bean</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">destroySingletons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>调用了 Person()\n调用了 Person()\n调用了 Person()\n准备销毁 &gt;&gt; person2\n准备销毁 &gt;&gt; person3\n准备销毁 &gt;&gt; person1\n</code></pre>\n<h4 id=\"触发-predestroy-标注的方法被调用\"><a class=\"anchor\" href=\"#触发-predestroy-标注的方法被调用\">#</a> 触发 @PreDestroy 标注的方法被调用</h4>\n<p>这个注解是在  <code>CommonAnnotationBeanPostProcessor#postProcessBeforeDestruction</code>  中被处理的，所以只需要将这个加入 BeanPostProcessor 列表就可以了。</p>\n<p>在 bean 在需要销毁前执行 PreDestroy 的方法上添加 @PreDestroy  注解。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用了 Person()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@PreDestroy</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reDestroy()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试方法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">destructionAwareBeanPostProcessorTest2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">DefaultListableBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonAnnotationBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                  <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                             <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 销毁所有的单列 bean</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">destroySingletons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"销毁阶段的执行顺序\"><a class=\"anchor\" href=\"#销毁阶段的执行顺序\">#</a> 销毁阶段的执行顺序</h4>\n<p>实际上 ApplicationContext 内部已经将 spring 内部一些常见的必须的 BeannPostProcessor 自动装配到<br />\n beanPostProcessors 列表中 ，比如我们熟悉的下面的几个：</p>\n<ol>\n<li><code>org.springframework.context.annotation.CommonAnnotationBeanPostProcessor</code>\n<ul>\n<li>用来处理 @Resource、@PostConstruct、@PreDestroy</li>\n</ul>\n</li>\n<li><code>org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor</code>\n<ul>\n<li>用来处理 @Autowired、@Value 注解</li>\n</ul>\n</li>\n<li><code>org.springframework.context.support.ApplicationContextAwareProcessor</code>\n<ul>\n<li>用来回调 Bean 实现的各种 Aware 接口</li>\n</ul>\n</li>\n</ol>\n<p>所以通过 ApplicationContext 来销毁 bean，会触发 3 中方式的执行</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DisposableBean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用构造方法: Car()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@PreDestroy</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preDestroy1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行: preDestroy1()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@PreDestroy</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preDestroy2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行: preDestroy2()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DisposableBean 接口中的 destroy() 方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customDestroyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"自定义的摧毁方法: customDestroyMethod() 方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试类</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DestructionBeanTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>destroyMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"customDestroyMethod\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroyBeanTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DestructionBeanTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"准备启动容器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"容器启动完毕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"serviceA：\"</span> <span class=\"token operator\">+</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"准备关闭容器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"容器关闭完毕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>准备启动容器\n使用构造方法: Car()\n容器启动完毕\nserviceA：com.example.springdemo.bean.Car@69997e9d\n准备关闭容器\n执行: preDestroy2()\n执行: preDestroy1()\nDisposableBean 接口中的 destroy() 方法\n自定义的摧毁方法: customDestroyMethod() 方法\n容器关闭完毕\n</code></pre>\n<p>可以看出销毁方法调用的顺序：</p>\n<ol>\n<li>@PreDestroy 标注的所有方法</li>\n<li>DisposableBean 接口中的 Destroy ()</li>\n<li>自定义的销毁方法</li>\n</ol>\n<h2 id=\"bean-生命周期流程图\"><a class=\"anchor\" href=\"#bean-生命周期流程图\">#</a> Bean 生命周期流程图</h2>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/xiaou66/picture@master/image/1647397416697Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"Bean生命周期流程图\" /></p>\n",
            "tags": [
                "springboot",
                "java"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/springboot/ComponentScan%20%E6%B3%A8%E8%A7%A3/",
            "url": "https://blog.xiaou.icu/springboot/ComponentScan%20%E6%B3%A8%E8%A7%A3/",
            "title": "ComponentScan 注解",
            "date_published": "2022-03-14T01:38:03.000Z",
            "content_html": "<h1 id=\"componentscan-注解\"><a class=\"anchor\" href=\"#componentscan-注解\">#</a> ComponentScan 注解</h1>\n<div class=\"note info\">\n<p>@ComponentScan 扫描某些包及其子包中所有的类，然后将满足一定条件的类作为 bean 注册到<br />\n Spring 容器容器中。</p>\n</div>\n<h2 id=\"注解定义\"><a class=\"anchor\" href=\"#注解定义\">#</a> 注解定义</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Repeatable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComponentScans</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">ComponentScan</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 指定需要扫描的包</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"basePackages\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 指定需要扫描的包</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">basePackages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 指定一些类，Spring 容器会扫描这些类所在的包及其子包中的类</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">basePackageClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 自定义 Bean 名称生成器</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BeanNameGenerator</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">nameGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">BeanNameGenerator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ScopeMetadataResolver</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">scopeResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">AnnotationScopeMetadataResolver</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">ScopedProxyMode</span> <span class=\"token function\">scopedProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 需要扫描包中的那些资源，默认是：**/*.class，</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 即会扫描指定包中所有的 class 文件</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">resourcePattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"**/*.class\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 对扫描的类是否启用默认过滤器，默认为 true</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">useDefaultFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 过滤器：用来配置被扫描出来的那些类会被作为组件注册到容器中</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">ComponentScan<span class=\"token punctuation\">.</span>Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">includeFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 过滤器，和 includeFilters 作用刚好相反 </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 用来对扫描的类进行排除的，被排除的类不会被注册到容器中</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token class-name\">ComponentScan<span class=\"token punctuation\">.</span>Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">excludeFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 是否延迟初始化被注册的 Bean</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">lazyInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">FilterType</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANNOTATION</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">classes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">pattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"工作过程\"><a class=\"anchor\" href=\"#工作过程\">#</a> 工作过程</h2>\n<ol>\n<li>Spring 会扫描指定的包，并且会递归下面的子包，获得到一批类的数组.</li>\n<li>然后这些类会经过上面的各种过滤器，最后剩下的类会被注册到容器中.</li>\n</ol>\n<p>所以使用这个注解需要考虑 2 个问题:</p>\n<ol>\n<li>需要扫描哪一些包，可以通过  <code>value</code> 、 <code>backPackages</code> 、 <code>basePackageClasses</code>  这三个参数来控制.</li>\n<li>需要使用过滤器吗，如果需要可以通过  <code>useDefaultFilters</code> 、 <code>includeFilters</code> 、 <code>excludeFilters</code>  这三个参数来控制.</li>\n</ol>\n<p>这 2 个问题搞清楚了，就可以确定哪些类会被注册到容器中。</p>\n<p>默认情况下，任何参数都不设置的情况下，此时，会将 @ComponentScan 修饰的类所在的包作为扫描<br />\n包；<strong>默认情况下  <code>useDefaultFilters</code>  为 true，这个为 true 的时候，Spring 容器内部会使用默认过滤器</strong>，<br />\n规则是：凡是类上有  <code>@Repository</code> 、 <code>@Service</code> 、 <code>@Controller</code> 、 <code>@Component</code>  这几个注解中的任何一<br />\n个的，那么这个类就会被作为 Bean 注册到 Spring 容器中，所以默认情况下，只需在类上加上这几个注解<br />\n中的任何一个，这些类就会自动交给 Spring 容器来管理了。</p>\n<h2 id=\"includefilters-的使用\"><a class=\"anchor\" href=\"#includefilters-的使用\">#</a> includeFilters 的使用</h2>\n<p><strong>Filter 定义</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">FilterType</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANNOTATION</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">classes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">pattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>FilterType 主要有</strong></p>\n<ol>\n<li>ANNOTATION：通过注解的方式来筛选候选者，即判断候选者是否有指定的注解\n<ul>\n<li>通过 classes 参数可以指定一些注解，用来判断被扫描的类上是否有 classes 参数指定的注解</li>\n</ul>\n</li>\n<li>ASSIGNABLE_TYPE：通过指定的类型来筛选候选者，即判断候选者是否是指定的类型\n<ul>\n<li>通过 classes 参数可以指定一些类型，用来判断被扫描的类是否是 classes 参数指定的类型</li>\n</ul>\n</li>\n<li>ASPECTJ：ASPECTJ 表达式方式，即判断候选者是否匹配 ASPECTJ 表达式</li>\n<li>REGEX：正则表达式方式，即判断候选者的完整名称是否和正则表达式匹配</li>\n<li>CUSTOM：用户自定义过滤器来筛选候选者，对候选者的筛选交给用户自己来判断\n<ul>\n<li>表示这个过滤器是用户自定义的，classes 参数就是用来指定用户自定义的过滤器，自定义的过滤器需要实现  <code>org.springframework.core.type.filter.TypeFilter</code>  接口</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h2>\n<h3 id=\"包含指定类型的类\"><a class=\"anchor\" href=\"#包含指定类型的类\">#</a> 包含指定类型的类</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IController</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller1</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IController</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IController</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    useDefaultFilters <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    includeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token annotation punctuation\">@ComponentScan.Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ASSIGNABLE_TYPE</span><span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> <span class=\"token class-name\">IController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScanBean1</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试类</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ScanBeanTest1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScanBean1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName <span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"->\"</span> <span class=\"token operator\">+</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行输出</p>\n<pre><code>controller1-&gt;com.example.springdemo.controller.Controller1@350a94ce\ncontroller2-&gt;com.example.springdemo.controller.Controller2@7e00ed0f\n</code></pre>\n<h3 id=\"自定义-filter\"><a class=\"anchor\" href=\"#自定义-filter\">#</a> 自定义 Filter</h3>\n<p>自定义 Filter 的步骤为:</p>\n<ol>\n<li>设置 @Filter 中 type 的类型为：FilterType.CUSTOM</li>\n<li>自定义过滤器类，需要实现接口  <code>org.springframework.core.type.filter.TypeFilter</code></li>\n<li>设置 @Filter 中的 classses 为自定义的过滤器类型</li>\n</ol>\n<p>TypeFilter 接口的定义：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>TypeFilter.class</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TypeFilter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetadataReader</span> metadataReader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                  <span class=\"token class-name\">MetadataReaderFactory</span> metadataReaderFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>MetadataReader 接口</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MetadataReader.class</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MetadataReader</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 返回类文件的资源引用</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Resource</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 返回一个 ClassMetadata 对象，可以通过这个读想获取类的一些元数据信息，如类的 class 对象、</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 是否是接口、是否有注解、是否是抽象类、父类名称、接口名称、内部包含的之类列表等等，可以去看一下源</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 码</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">ClassMetadata</span> <span class=\"token function\">getClassMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 获取类上所有的注解信息</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">AnnotationMetadata</span> <span class=\"token function\">getAnnotationMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>MetadataReaderFactory 接口</strong></p>\n<p>类元数据读取器工厂，可以通过这个类获取任意一个类的 MetadataReader 对象。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MetadataReaderFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t * 返回指定资源的 MetadataReader 对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">MetadataReader</span> <span class=\"token function\">getMetadataReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t * 返回指定资源的 MetadataReader 对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">MetadataReader</span> <span class=\"token function\">getMetadataReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Resource</span> resource<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>了解完定义 Filter 接下来动手实践了.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>自定义 Filter</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TypeFilter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetadataReader</span> metadataReader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                         <span class=\"token class-name\">MetadataReaderFactory</span> metadataReaderFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> curClass <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            curClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                metadataReader<span class=\"token punctuation\">.</span><span class=\"token function\">getClassMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> curClass <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>curClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试方法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">ScanBeanTest2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScanBean2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName <span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"->\"</span> <span class=\"token operator\">+</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>controller1-&gt;com.example.springdemo.controller.Controller1@1b11171f\ncontroller2-&gt;com.example.springdemo.controller.Controller2@1151e434\n</code></pre>\n<h3 id=\"注解重复使用\"><a class=\"anchor\" href=\"#注解重复使用\">#</a> 注解重复使用</h3>\n<p>第一种写法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>basePackageClasses <span class=\"token operator\">=</span> <span class=\"token class-name\">ScanClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    useDefaultFilters <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 不启用默认过滤器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    includeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token annotation punctuation\">@ComponentScan.Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ASSIGNABLE_TYPE</span><span class=\"token punctuation\">,</span> classes</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                              <span class=\"token operator\">=</span> <span class=\"token class-name\">IService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScanBean3</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第二种写法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScans</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>basePackageClasses <span class=\"token operator\">=</span> <span class=\"token class-name\">ScanClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        useDefaultFilters <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 不启用默认过滤器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        includeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token annotation punctuation\">@ComponentScan.Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ASSIGNABLE_TYPE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                  classes <span class=\"token operator\">=</span> <span class=\"token class-name\">IService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScanBean4</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"源码部分\"><a class=\"anchor\" href=\"#源码部分\">#</a> 源码部分</h3>\n<p>核心方法  <code>org.springframework.context.annotation.ConfigurationClassPostProcessor#processConfigBeanDefinitions</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processConfigBeanDefinitions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanDefinitionHolder</span><span class=\"token punctuation\">></span></span> configCandidates <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> candidateNames <span class=\"token operator\">=</span> registry<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName <span class=\"token operator\">:</span> candidateNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">BeanDefinition</span> beanDef <span class=\"token operator\">=</span> registry<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanDef<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">ConfigurationClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONFIGURATION_CLASS_ATTRIBUTE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">//debug 日志</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// checkConfigurationClassCandidate()</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 判断一个是否是一个配置类，并为 BeanDefinition 设置属性为 lite 或者 full。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 如果加了 @Configuration，那么对应的 BeanDefinition 为 full;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 如果加了 @Bean,@Component,@ComponentScan,@Import,@ImportResource 这些注解，则为 lite。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkConfigurationClassCandidate</span><span class=\"token punctuation\">(</span>beanDef<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadataReaderFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            configCandidates<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanDefinitionHolder</span><span class=\"token punctuation\">(</span>beanDef<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 如果没有找到 @Configuration 类，立即返回</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>configCandidates<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 按照之前确定的 @Order 值排序 (如果适用的话)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    configCandidates<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bd1<span class=\"token punctuation\">,</span> bd2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> i1 <span class=\"token operator\">=</span> <span class=\"token class-name\">ConfigurationClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span>bd1<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> i2 <span class=\"token operator\">=</span> <span class=\"token class-name\">ConfigurationClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span>bd2<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span> i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 检测通过外围应用程序上下文提供的任何定制 bean 名称生成策略</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">SingletonBeanRegistry</span> sbr <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registry <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">SingletonBeanRegistry</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        sbr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SingletonBeanRegistry</span><span class=\"token punctuation\">)</span> registry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>localBeanNameGeneratorSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">//beanName 的生成器，因为后面会扫描出所有加入到 spring 容器中 calss 类，然后把这些 class</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 解析成 BeanDefinition 类，</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 此时需要利用 BeanNameGenerator 为这些 BeanDefinition 生成 beanName</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">BeanNameGenerator</span> generator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanNameGenerator</span><span class=\"token punctuation\">)</span> sbr<span class=\"token punctuation\">.</span><span class=\"token function\">getSingleton</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token class-name\">AnnotationConfigUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONFIGURATION_BEAN_NAME_GENERATOR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>generator <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>componentScanBeanNameGenerator <span class=\"token operator\">=</span> generator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>importBeanNameGenerator <span class=\"token operator\">=</span> generator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>environment <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>environment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StandardEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 解析所有加了 @Configuration 注解的类</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token class-name\">ConfigurationClassParser</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConfigurationClassParser</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadataReaderFactory<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>problemReporter<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>environment<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resourceLoader<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>componentScanBeanNameGenerator<span class=\"token punctuation\">,</span> registry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanDefinitionHolder</span><span class=\"token punctuation\">></span></span> candidates <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>configCandidates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConfigurationClass</span><span class=\"token punctuation\">></span></span> alreadyParsed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>configCandidates<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">// 解析配置类，在此处会解析配置类上的注解 </span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// (ComponentScan 扫描出的类，@Import 注册的类，以及 @Bean 方法定义的类)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 注意：这一步只会将加了 @Configuration 注解以及通过 @ComponentScan 注解</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 扫描的类才会加入到 BeanDefinitionMap 中</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 通过其他注解 (例如 @Import、@Bean) 的方式，在 parse () 方法这一步并不会将其</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">// 解析为 BeanDefinition 放入到 BeanDefinitionMap 中，而是先解析成 ConfigurationClass 类</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// 真正放入到 map 中是在下面的 this.reader.loadBeanDefinitions () 方法中实现的</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">StartupStep</span> processConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationStartup<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring.context.config-classes.parse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        parser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>candidates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        parser<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConfigurationClass</span><span class=\"token punctuation\">></span></span> configClasses <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span><span class=\"token function\">getConfigurationClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        configClasses<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>alreadyParsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token comment\">// Read the model and create bean definitions based on its content</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reader <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConfigurationClassBeanDefinitionReader</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                registry<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sourceExtractor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resourceLoader<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>environment<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>importBeanNameGenerator<span class=\"token punctuation\">,</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">getImportRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">// 将上一步 parser 解析出的 ConfigurationClass 类加载成 BeanDefinition</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token comment\">// 实际上经过上一步的 parse () 后，解析出来的 bean 已经放入到 BeanDefinition 中了，</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token comment\">// 但是由于这些 bean 可能会引入新的 bean，</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">// 例如实现了 ImportBeanDefinitionRegistrar </span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\">// 或者 ImportSelector 接口的 bean，或者 bean 中存在被 @Bean 注解的方法</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">loadBeanDefinitions</span><span class=\"token punctuation\">(</span>configClasses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        alreadyParsed<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>configClasses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        processConfig<span class=\"token punctuation\">.</span><span class=\"token function\">tag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classCount\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>configClasses<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        candidates<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">// 这里判断 registry.getBeanDefinitionCount ()> candidateNames.length 的目的是为了</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token comment\">// 知道 reader.loadBeanDefinitions (configClasses)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token comment\">// 这一步有没有向 BeanDefinitionMap 中添加新的 BeanDefinition</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token comment\">// 实际上就是看配置类 (例如 AppConfig 类会向 BeanDefinitionMap 中添加 bean)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token comment\">// 如果有，registry.getBeanDefinitionCount () 就会大于 candidateNames.length</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token comment\">// 这样就需要再次遍历新加入的 BeanDefinition，</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token comment\">// 并判断这些 bean 是否已经被解析过了，如果未解析，需要重新进行解析</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token comment\">// 这里的 AppConfig 类向容器中添加的 bean，实际上在 parser.parse () 这一步已经全部被解析了</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> candidateNames<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newCandidateNames <span class=\"token operator\">=</span> registry<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> oldCandidateNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>candidateNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> alreadyParsedClasses <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationClass</span> configurationClass <span class=\"token operator\">:</span> alreadyParsed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                alreadyParsedClasses<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>configurationClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> candidateName <span class=\"token operator\">:</span> newCandidateNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>oldCandidateNames<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>candidateName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    <span class=\"token class-name\">BeanDefinition</span> bd <span class=\"token operator\">=</span> registry<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span>candidateName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkConfigurationClassCandidate</span><span class=\"token punctuation\">(</span>bd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadataReaderFactory<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                        <span class=\"token operator\">!</span>alreadyParsedClasses<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>bd<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                        candidates<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanDefinitionHolder</span><span class=\"token punctuation\">(</span>bd<span class=\"token punctuation\">,</span> candidateName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            candidateNames <span class=\"token operator\">=</span> newCandidateNames<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>candidates<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token comment\">// 将 ImportRegistry 注册为 bean，以支持 ImportAware @Configuration 类</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sbr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>sbr<span class=\"token punctuation\">.</span><span class=\"token function\">containsSingleton</span><span class=\"token punctuation\">(</span><span class=\"token constant\">IMPORT_REGISTRY_BEAN_NAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        sbr<span class=\"token punctuation\">.</span><span class=\"token function\">registerSingleton</span><span class=\"token punctuation\">(</span><span class=\"token constant\">IMPORT_REGISTRY_BEAN_NAME</span><span class=\"token punctuation\">,</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">getImportRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadataReaderFactory <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CachingMetadataReaderFactory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token comment\">// 清除外部提供的 MetadataReaderFactory 的缓存；这是一个没有操作的</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token comment\">// 共享缓存，因为它将被 ApplicationContext 清除</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CachingMetadataReaderFactory</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadataReaderFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clearCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<ol>\n<li>@ComponentScan 用于批量注册  Bean，Spring 会按照这个注解的配置，递归扫描指定包中的所 有类，将满足条件的类批量注册到 spring 容器中</li>\n<li>可以通过 <code>value</code> 、 <code>basePackages</code> 、 <code>basePackageClasses</code>  这几个参数来配置包的扫描范围</li>\n<li>可以使用  <code>useDefaultFilters</code> 、 <code>includeFilters</code> 、 <code>excludeFilters</code>  这三个参数来配置过滤器，被过滤器处理之后剩下的类会被注册到容器中.</li>\n<li>指定包名的方式配置扫描范围存在隐患，包名被重命名之后，会导致扫描实现，所以一般我们在需<br />\n要扫描的包中可以创建一个标记的接口或者类，作为  <code>basePackageClasses</code>  的值，通过这个来控制<br />\n包的扫描范围</li>\n<li>指定包名的方式配置扫描范围存在隐患，包名被重命名之后，会导致扫描实现，所以一般我们在需 要扫描的包中可以创建一个标记的接口或者类，作为  <code>basePackageClasses</code>  的值，通过这个来控制包的扫描范围</li>\n<li>@CompontScan 注解会被  <code>ConfigurationClassPostProcessor</code>  类递归处理，最终得到所有需要注册的类。</li>\n</ol>\n",
            "tags": [
                "springboot",
                "java"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/springboot/Import%20%E6%B3%A8%E8%A7%A3/",
            "url": "https://blog.xiaou.icu/springboot/Import%20%E6%B3%A8%E8%A7%A3/",
            "title": "Import 注解",
            "date_published": "2022-03-12T09:43:09.000Z",
            "content_html": "<h1 id=\"import-注解\"><a class=\"anchor\" href=\"#import-注解\">#</a> Import 注解</h1>\n<div class=\"note info\">\n<p>@Import 注解可以用来批量导入需要注册的各种类是，如普通的类 / 配置的类 完成对普通类和配置类中所有 bean 的注册。</p>\n</div>\n<p>如果配置类在标准的 SpringBoot 包结构下 (SpringBootApplication 启动类包的根目录下)。是不需要 @Import 导入配置类的，SpringBoot 自动帮做了。上面的情况一般用于 @Configuration 配置类不在标准的 SpringBoot 包结构下面。所以一般在自定义 starter 的时候用到。</p>\n<h2 id=\"import-源码\"><a class=\"anchor\" href=\"#import-源码\">#</a> @Import 源码</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Import</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t * &#123;@link Configuration @Configuration&#125;, &#123;@link ImportSelector&#125;,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t * &#123;@link ImportBeanDefinitionRegistrar&#125;, or regular component classes to import.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ol>\n<li>@Import 可以使用在任何类型上，通常情况下，类和注解上用的比较多。</li>\n<li>value：一个 Class 数组，设置需要导入的类，可以是 @Configuration 标注的列，可以是<br />\n ImportSelector 接口或者 ImportBeanDefinitionRegistrar 接口类型的，或者需要导入的普通组件<br />\n类。</li>\n</ol>\n</blockquote>\n<h2 id=\"import-常见五种用法\"><a class=\"anchor\" href=\"#import-常见五种用法\">#</a> @Import 常见五种用法</h2>\n<ol>\n<li>value 为普通的类</li>\n<li>value 为 @Configuration 标注的类</li>\n<li>value 为 @ComponentScan 标注的类</li>\n<li>value 为 ImportBeanDefinitionRegistrar 接口类型</li>\n<li>value 为 ImportSelector 接口类型</li>\n<li>value 为 DeferredImportSelector 接口类型</li>\n</ol>\n<h2 id=\"实验1\"><a class=\"anchor\" href=\"#实验1\">#</a> 实验 1</h2>\n<h3 id=\"普通和配置类情况\"><a class=\"anchor\" href=\"#普通和配置类情况\">#</a> 普通和配置类情况</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>普通类</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImportBean</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>配置类</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImportConfigBean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">module2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"我是配置类\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>importBean1<span class=\"token operator\">-></span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>springdemo<span class=\"token punctuation\">.</span></span>ImportBean1</span><span class=\"token annotation punctuation\">@196a42c3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>springdemo<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span>ImportConfigBean</span><span class=\"token operator\">-></span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>springdemo<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span>ImportConfigBean</span>$$<span class=\"token class-name\">EnhancerBySpringCGLIB</span>$$<span class=\"token number\">5f</span>fb1c43<span class=\"token annotation punctuation\">@4c60d6e</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module2<span class=\"token operator\">-></span>我是配置类</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>springdemo<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span>ImportBean</span><span class=\"token operator\">-></span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>springdemo<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span>ImportBean</span><span class=\"token annotation punctuation\">@15043a2f</span></pre></td></tr></table></figure><p><strong>结果分析</strong></p>\n<ol>\n<li>ImportBean1 成功注入到容器中。bean 名称为完整的类名</li>\n</ol>\n<h3 id=\"导入-compontentscan-标注的类\"><a class=\"anchor\" href=\"#导入-compontentscan-标注的类\">#</a> 导入 @CompontentScan 标注的类</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IController</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller1</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IController</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IController</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    useDefaultFilters <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    includeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token annotation punctuation\">@ComponentScan.Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ASSIGNABLE_TYPE</span><span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> <span class=\"token class-name\">IController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScanBean1</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScanBean1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImportBean2</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>测试类</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">importTest2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ImportBean1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName <span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"->\"</span> <span class=\"token operator\">+</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出</strong></p>\n<pre><code>importBean2-&gt;com.example.springdemo.ImportBean2@428640fa\ncontroller1-&gt;com.example.springdemo.controller.Controller1@d9345cd\ncontroller2-&gt;com.example.springdemo.controller.Controller2@2d710f1a\ncom.example.springdemo.ScanBean1-&gt;com.example.springdemo.ScanBean1@29215f06\n</code></pre>\n<h2 id=\"importbeandefinitionregistrar-接口\"><a class=\"anchor\" href=\"#importbeandefinitionregistrar-接口\">#</a> ImportBeanDefinitionRegistrar 接口</h2>\n<div class=\"note info\">\n<p>这个接口提供了通过 Spring 容器 API 的方式直接向容器中注册 bean。</p>\n</div>\n<p>这个完整的名称</p>\n<pre><code>org.springframework.context.annotation.ImportBeanDefinitionRegistrar\n</code></pre>\n<p>该接口的源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ImportBeanDefinitionRegistrar</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerBeanDefinitions</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token class-name\">AnnotationMetadata</span> importingClassMetadata<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token class-name\">BeanNameGenerator</span> importBeanNameGenerator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">registerBeanDefinitions</span><span class=\"token punctuation\">(</span>importingClassMetadata<span class=\"token punctuation\">,</span> registry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerBeanDefinitions</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token class-name\">AnnotationMetadata</span> importingClassMetadata<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li><strong>importingClassMetadata</strong>:\n<ul>\n<li>AnnotationMetadata 类型的，通过这个可以获取被 @Import 注解标注的类所有注解的信息。</li>\n</ul>\n</li>\n<li>registry\n<ul>\n<li>BeanDefinitionRegistry 类型，是一个接口，内部提供了注册 bean 的各种方法。</li>\n</ul>\n</li>\n<li>importBeanNameGenerator\n<ul>\n<li>BeanNameGenerator 类型，是一个接口，内部有一个方法，用来生成 bean 的名称。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"beandefinitionregistry-接口bean-定义注册器\"><a class=\"anchor\" href=\"#beandefinitionregistry-接口bean-定义注册器\">#</a> BeanDefinitionRegistry 接口：bean 定义注册器</h3>\n<p>bean 定义注册器，提供了 bean 注册的各种方法，来看一下源码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BeanDefinitionRegistry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AliasRegistry</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 注册一个新的 bean 定义</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * beanName：bean 的名称</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * beanDefinition：bean 定义信息</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinition</span> beanDefinition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeanDefinitionStoreException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 通过 bean 名称移除已注册的 bean</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * beanName：bean 名称</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">removeBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">NoSuchBeanDefinitionException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 通过名称获取 bean 的定义信息</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * beanName：bean 名称</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">BeanDefinition</span> <span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">NoSuchBeanDefinitionException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 查看 beanName 是否注册过</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">containsBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * 获取已经定义（注册）的 bean 名称列表</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * 返回注册器中已注册的 bean 数量</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getBeanDefinitionCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * 确定给定的 bean 名称或者别名是否已在此注册表中使用</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * beanName：可以是 bean 名称或者 bean 的别名</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isBeanNameInUse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>基本上所有 bean 工厂都实现了这个接口，让 bean 工厂拥有 bean 注册的各种能力。</p>\n<h3 id=\"beannamegenerator-接口bean-名称生成器\"><a class=\"anchor\" href=\"#beannamegenerator-接口bean-名称生成器\">#</a> BeanNameGenerator 接口：bean 名称生成器</h3>\n<p>bean 名称生成器，这个接口只有一个方法，用来生成 bean 的名称：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BeanNameGenerator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">String</span> <span class=\"token function\">generateBeanName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinition</span> definition<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Spring 内置了 3 个实现。</p>\n<h4 id=\"defaultbeannamegenerator\"><a class=\"anchor\" href=\"#defaultbeannamegenerator\">#</a> DefaultBeanNameGenerator</h4>\n<p>默认 bean 名称生成器，xml 中 bean 未指定名称的时候，默认就会使用这个生成器，默认为：完整的类名 #bean 编号。</p>\n<h4 id=\"annotationbeannamegenerator\"><a class=\"anchor\" href=\"#annotationbeannamegenerator\">#</a> AnnotationBeanNameGenerator</h4>\n<p>注解方式的 bean 名称生成器，比如通过 @Component (bean 名称) 的方式指定 bean 名称，如果没有通过 注解方式指定名称，默认会将完整的类名作为 bean 名称。</p>\n<h4 id=\"fullyqualifiedannotationbeannamegenerator\"><a class=\"anchor\" href=\"#fullyqualifiedannotationbeannamegenerator\">#</a> FullyQualifiedAnnotationBeanNameGenerator</h4>\n<p>将完整的类名作为 bean 的名称</p>\n<h3 id=\"beandefinition接口bean定义信息\"><a class=\"anchor\" href=\"#beandefinition接口bean定义信息\">#</a> BeanDefinition 接口：bean 定义信息</h3>\n<p>用来表示 bean 定义信息的接口，我们向容器中注册 bean 之前，会通过 xml 或者其他方式定义 bean 的各种配置信息，bean 的所有配置信息都会被转换为一个 BeanDefinition 对象，然后通过容器中 BeanDefinitionRegistry 接口中的方法，将 BeanDefinition 注册到 Spring 容器中，完成 bean 的注册操作。</p>\n<p>这个接口有很多实现类，有兴趣的可以去看看源码，BeanDefinition 的各种用法，以后会通过专题细 说。</p>\n<h2 id=\"importbeandefinitionregistrar接口类型\"><a class=\"anchor\" href=\"#importbeandefinitionregistrar接口类型\">#</a> ImportBeanDefinitionRegistrar 接口类型</h2>\n<h3 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h3>\n<ol>\n<li>定义 ImportBeanDefinitionRegistrar 接口实现类，在 registerBeanDefinitions 方法中使用 registry 来注册 bean</li>\n<li>使用 @Import 来导入步骤 1 中定义的类</li>\n<li>使用步骤 2 中 @Import 标注的类作为 AnnotationConfigApplicationContext 构造参数创建 spring 容器</li>\n<li>使用 AnnotationConfigApplicationContext 操作 bean</li>\n</ol>\n<h3 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h3>\n<ol>\n<li><strong>ImportBeanDefinitionRegistrar 接口实现类</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyImportBeanDefinitionRegistrar</span> <span class=\"token keyword\">implements</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ImportBeanDefinitionRegistrar</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerBeanDefinitions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> importingClassMetadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                        <span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                        <span class=\"token class-name\">BeanNameGenerator</span> importBeanNameGenerator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">AbstractBeanDefinition</span> beanDefinition <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BaseController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"baseController\"</span><span class=\"token punctuation\">,</span> beanDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">AbstractBeanDefinition</span> beanDefinition1 <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base2Controller</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">addPropertyReference</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"baseController\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"baseController\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"base2Controller\"</span><span class=\"token punctuation\">,</span> beanDefinition1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>使用 @Import 来导入步骤 1 中定义的类</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">MyImportBeanDefinitionRegistrar</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImportBean1</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>测试方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ImportBean1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName <span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s->%s\"</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                         context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>结果</strong></p>\n<pre><code>importBean1-&gt;com.lean.springboot.ImportBean1@740fb309\nbaseController-&gt;com.lean.springboot.controller.BaseController@7bd7d6d6\nbase2Controller-&gt;Base2Controller&#123;baseController=com.lean.springboot.controller.BaseController@7bd7d6d6&#125;\n</code></pre>\n<h2 id=\"importselector-接口类型\"><a class=\"anchor\" href=\"#importselector-接口类型\">#</a> ImportSelector 接口类型</h2>\n<h3 id=\"接口源码\"><a class=\"anchor\" href=\"#接口源码\">#</a> 接口源码</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ImportSelector</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 返回需要导入的类名的数组，可以是任何普通类，配置类（@Configuration、@Bean、</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *  @CompontentScan 等标注的类）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @importingClassMetadata：用来获取被 @Import 标注的类上面所有的注解信息</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">selectImports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> importingClassMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用步骤\"><a class=\"anchor\" href=\"#使用步骤\">#</a> 使用步骤</h3>\n<ol>\n<li>定义 ImportSelector 接口实现类，在 selectImports 返回需要导入的类的名称数组</li>\n<li>使用 @Import 来导入步骤 1 中定义的类</li>\n<li>使用步骤 2 中 @Import 标注的类作为 AnnotationConfigApplicationContext 构造参数创建 spring 容 器 4. 使用</li>\n<li>使用 AnnotationConfigApplicationContext 操作 bean</li>\n</ol>\n<h3 id=\"实验-2\"><a class=\"anchor\" href=\"#实验-2\">#</a> 实验</h3>\n<ol>\n<li>普通类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseController</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>配置类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImportDemoConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"xiaou\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>定义 ImportSelector 接口实现类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyImportSelector</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ImportSelector</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">selectImports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> importingClassMetadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">BaseController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">ImportDemoConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>@Import 注解</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">MyImportSelector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImportBean2</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>测试方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ImportBean2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName <span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s->%s\"</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                         context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>结果</strong></p>\n<pre><code>importBean2-&gt;com.lean.springboot.ImportBean2@2a7ed1f\ncom.lean.springboot.controller.BaseController-&gt;com.lean.springboot.controller.BaseController@3fa247d1\ncom.lean.springboot.configure.ImportDemoConfig-&gt;com.lean.springboot.configure.ImportDemoConfig$$EnhancerBySpringCGLIB$$6acd82fc@2cb2fc20\nname-&gt;xiaou\n</code></pre>\n<blockquote>\n<p>如果不想开启方法耗时统计，只需要将 @EnableMethodCostTime 去掉就可以 了，用起来是不是特别舒服。</p>\n</blockquote>\n<h2 id=\"deferredimportselector-接口\"><a class=\"anchor\" href=\"#deferredimportselector-接口\">#</a> DeferredImportSelector 接口</h2>\n<p>DeferredImportSelector 是 ImportSelector 的子接口，既然是 ImportSelector 的子接口，所以也可以通 过 @Import 进行导入，这个接口和 ImportSelector 不同地方有两点：</p>\n<ol>\n<li>延迟导入</li>\n<li>指定导入的类的处理顺序</li>\n</ol>\n<h3 id=\"延迟导入\"><a class=\"anchor\" href=\"#延迟导入\">#</a> 延迟导入</h3>\n<p>比如 @Import 的 value 包含了多个普通类、多个 @Configuration 标注的配置类、多个 ImportSelector 接 口的实现类，多个 ImportBeanDefinitionRegistrar 接口的实现类，还有 DeferredImportSelector 接口实 现类，此时 spring 处理这些被导入的类的时候，<strong>会将 DeferredImportSelector 类型的放在最后处理， 会先处理其他被导入的类，其他类会按照 value 所在的前后顺序进行处理</strong>。</p>\n<h2 id=\"自定义耗时注解\"><a class=\"anchor\" href=\"#自定义耗时注解\">#</a> 自定义耗时注解</h2>\n<h3 id=\"需求\"><a class=\"anchor\" href=\"#需求\">#</a> 需求</h3>\n<p>凡是类名中包含 service 的，调用他们内部任何方法，我们希望调用之后能够输出这些方法的耗时。</p>\n<h3 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h3>\n<ol>\n<li>创建一个代理类，通过代理来间接访问需要统计耗时的 bean 对象</li>\n<li>拦截 bean 的创建，给 bean 实例生成代理生成代理</li>\n</ol>\n<h3 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h3>\n<ol>\n<li>service</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Service2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-> m2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Service1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-> m1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>CGLIB 代理类</li>\n</ol>\n<blockquote>\n<p>统计耗时的代理类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CostTimeProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MethodInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CostTimeProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                            <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodProxy</span> methodProxy<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">long</span> starTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 调用被代理对象（即 target）的方法，获取结果</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> objects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">long</span> endTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">+</span> <span class=\"token string\">\"，耗时(纳秒)：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>endTime <span class=\"token operator\">-</span> starTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 创建任意类的代理对象</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @param target</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * @param &lt;T></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">CostTimeProxy</span> costTimeProxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CostTimeProxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Enhancer</span> enhancer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Enhancer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span>costTimeProxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setSuperclass</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>拦截 bean 实例的创建，返回代理对象</li>\n</ol>\n<p><code>BeanPostProcessor</code>  这个接口是 bean 处理器，内部有 2 个方法，分别在 bean 初始化前后会进行调用，以后讲声明周期的时候 还会细说的，这里你只需要知道 bean 初始化之后会调用 postProcessAfterInitialization 方法就 行，这个方法中我们会给 bean 创建一个代理对象。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MethodCostTimeProxyBeanPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"service\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">CostTimeProxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>通过 @Import 结合 ImportSelector 的方式来导入刚刚创建拦截 bean 实例的类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MethodCostTimeImportSelector</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ImportSelector</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">selectImports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> importingClassMetadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token class-name\">MethodCostTimeProxyBeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>定义  <code>@EnableMethodCostTime</code></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodCostTimeImportSelector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">EnableMethodCostTime</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>扫描类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.lean.springboot.service\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@EnableMethodCostTime</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImportBean3</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>测试类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ImportBean3</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Service1</span> service1 <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Service1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Service2</span> service2 <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Service2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    service1<span class=\"token punctuation\">.</span><span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    service2<span class=\"token punctuation\">.</span><span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>测试输出</strong></p>\n<pre><code>class com.lean.springboot.service.Service1-&gt; m1\npublic void com.lean.springboot.service.Service1.m1()，耗时(纳秒)：174000\nclass com.lean.springboot.service.Service2-&gt; m2\npublic void com.lean.springboot.service.Service2.m2()，耗时(纳秒)：49200\n</code></pre>\n",
            "tags": [
                "springboot",
                "java"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/mysql/SQL%20%E4%B8%AD%E5%B0%86%E6%9D%A1%E4%BB%B6%E6%94%BE%E5%9C%A8%20on%20%E5%90%8E%E9%9D%A2%E4%B8%8E%20where%20%E5%90%8E%E9%9D%A2%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "url": "https://blog.xiaou.icu/mysql/SQL%20%E4%B8%AD%E5%B0%86%E6%9D%A1%E4%BB%B6%E6%94%BE%E5%9C%A8%20on%20%E5%90%8E%E9%9D%A2%E4%B8%8E%20where%20%E5%90%8E%E9%9D%A2%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "title": "SQL 中将条件放在 on 后面与 where 后面的区别",
            "date_published": "2022-03-10T09:58:38.000Z",
            "content_html": "<h1 id=\"sql-中将条件放在-on-后面与-where-后面的区别\"><a class=\"anchor\" href=\"#sql-中将条件放在-on-后面与-where-后面的区别\">#</a> SQL 中将条件放在 on 后面与 where 后面的区别</h1>\n<blockquote>\n<p>这个区别主要体现在 left join 或 right join 在 inner join 中其效果是一样的</p>\n</blockquote>\n<h2 id=\"on-和-where-条件运行时机\"><a class=\"anchor\" href=\"#on-和-where-条件运行时机\">#</a> on 和 where 条件运行时机</h2>\n<blockquote>\n<p>数据库在通过连接两张或多张表来返回记录时，都会生成一张中间的临时表，然后再将这张临时表返回给用户。</p>\n</blockquote>\n<ol>\n<li>on 条件是在生成临时表时使用的条件，它不管 on 中的条件是否为真，都会返回左边表中的记录。</li>\n<li>where 条件是在临时表生成好后，再对临时表进行过滤的条件。</li>\n</ol>\n<h3 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h3>\n<p><strong>表 A</strong></p>\n<pre><code>+----+------+\n| id | b_id |\n+----+------+\n|  1 | 10   |\n|  2 | 20   |\n|  3 | 20   |\n+----+------+\n</code></pre>\n<p><strong>表 B</strong></p>\n<pre><code>+----+------+\n| id | v2   |\n+----+------+\n| 10 | A    |\n| 20 | C    |\n| 20 | C    |\n+----+------+\n</code></pre>\n<p>条件写在 where 中</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> b <span class=\"token keyword\">ON</span> <span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">.</span>b_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">WHERE</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tb<span class=\"token punctuation\">.</span>v2 <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>+----+------+------+------+\n| id | b_id | id   | v2   |\n+----+------+------+------+\n|  1 | 10   |   10 | A    |\n+----+------+------+------+\n</code></pre>\n<p>条件写在 on 中</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> a</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> b <span class=\"token keyword\">ON</span> <span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">.</span>b_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>id <span class=\"token operator\">AND</span> b<span class=\"token punctuation\">.</span>v2 <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>+----+------+------+------+\n| id | b_id | id   | v2   |\n+----+------+------+------+\n|  1 | 10   |   10 | A    |\n|  2 | 20   | NULL | NULL |\n|  3 | 20   | NULL | NULL |\n+----+------+------+------+\n</code></pre>\n<p>可以发现 on 是在生成连接表的起作用的，where 是生成连接表之后对连接表再进行过滤。</p>\n",
            "tags": [
                "mysql",
                "sql"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/java/%E6%B3%A8%E8%A7%A3/",
            "url": "https://blog.xiaou.icu/java/%E6%B3%A8%E8%A7%A3/",
            "title": "注解",
            "date_published": "2022-03-10T07:50:42.000Z",
            "content_html": "<h1 id=\"注解\"><a class=\"anchor\" href=\"#注解\">#</a> 注解</h1>\n<div class=\"note info\">\n<p>注解是对代码的一种增强，可以在代码编译或者程序运行期间获取注解的信息，然后根据这 些信息做各种牛逼的事情。</p>\n</div>\n<h2 id=\"定义注解\"><a class=\"anchor\" href=\"#定义注解\">#</a> 定义注解</h2>\n<p>在定义注解前可以先问自己几个问题。</p>\n<ol>\n<li>这个注解用来做什么 ？</li>\n<li>这个注解需要什么参数 ？</li>\n<li>注解需要可以用在哪里 ？</li>\n<li>注解会被保留到什么时候？</li>\n</ol>\n<h3 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注解中的参数</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> 注解名称<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">]</span> 参数类型 参数名称<span class=\"token function\">1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">default</span> 参数默认值<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">]</span> 参数类型 参数名称<span class=\"token function\">2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">default</span> 参数默认值<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">]</span> 参数类型 参数名称<span class=\"token function\">n</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">default</span> 参数默认值<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注解中可以定义多个参数，参数的定义有一下的特点：</p>\n<ol>\n<li>访问修饰符必须为 public，默认为 public 。</li>\n<li>参数类型只能是基本数据类型、String、Class、枚举类型、注解类型。</li>\n<li>参数名称后面的 () 不是定义方法参数的地方，也不能在括号始终定义如何参数</li>\n<li>default 代表默认值。</li>\n<li>如果没有默认值，在使用注解的时候必须给该参数赋值。</li>\n</ol>\n<h3 id=\"target-指定使用范围\"><a class=\"anchor\" href=\"#target-指定使用范围\">#</a> @Target 指定使用范围</h3>\n<p>使用 @Target 注解定义注解的使用范围</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面这种定义说明可以使用在 类、接口、注解类型、枚举类型以及方法上面。</p>\n<p><strong>如果在指定要的注解上面不使用 @Target 表示可以使用在如何地方</strong></p>\n<p>全部范围</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ElementType</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/* 类、接口、枚举、注解上面 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token constant\">TYPE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/* 字段上 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token constant\">FIELD</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/* 方法上 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token constant\">METHOD</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/* 方法的参数上 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token constant\">PARAMETER</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* 构造函数上 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token constant\">CONSTRUCTOR</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/* 本地变量上 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token constant\">LOCAL_VARIABLE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/* 注解上 */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token constant\">ANNOTATION_TYPE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/* 包上 */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token constant\">PACKAGE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/* 类型参数上 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token constant\">TYPE_PARAMETER</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/* 类型名称上 */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token constant\">TYPE_USE</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"retention-保留策略\"><a class=\"anchor\" href=\"#retention-保留策略\">#</a> @Retention 保留策略</h3>\n<p>我们先来看一下 JAVA 程序的 3 个过程</p>\n<ol>\n<li>源码阶段</li>\n<li>源码被编译为字节码之后变成 class 文件</li>\n<li>字节码被虚拟机加载然后运行</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">RetentionPolicy</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 注解只保留在源码中，编译为字节码之后就丢失了，也就是 class 文件中就不存在了 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token constant\">SOURCE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 注解只保留在源码和字节码中，运行阶段会丢失 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token constant\">CLASS</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 源码、字节码、运行期间都存在 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token constant\">RUNTIME</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"inherit-注解继承\"><a class=\"anchor\" href=\"#inherit-注解继承\">#</a> @Inherit 注解继承</h3>\n<div class=\"note info\">\n<p>让子类可以继承父类中被 @Inherited 修饰的注解，注意是继承父类中的，如果接口中的注解也使 用 @Inherited 修饰了，那么接口的实现类是无法继承这个注解的</p>\n</div>\n<h4 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InheritTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Inherited</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Inherited</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@A</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">I</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@B</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">C</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">I</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Annotation</span> annotation <span class=\"token operator\">:</span> <span class=\"token class-name\">TestClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>annotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出</p>\n<pre><code>@InheritTest$B()\n</code></pre>\n<div class=\"note warning\">\n<p>从输出中可以看出类可以继承父类上被 @Inherited 修饰的注解，而不能继承接口上被 @Inherited 修饰 的注解</p>\n</div>\n<h3 id=\"repeatable-重复使用注解\"><a class=\"anchor\" href=\"#repeatable-重复使用注解\">#</a> @Repeatable 重复使用注解</h3>\n<h4 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Repeatable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">As1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">As1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">A</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>容器注解中必须有个 value 类型的参数，参数类型为子注解类型的数组。</li>\n<li>在注解上加上 @Repeatable 注解，@Repeatable 中 value 的值为容器注解。<strong>注意这里容器注解的 Repeatable 一定要大于或等于原注解</strong></li>\n</ol>\n<h3 id=\"aliasfor-注解进行增强\"><a class=\"anchor\" href=\"#aliasfor-注解进行增强\">#</a> @AliasFor 注解进行增强</h3>\n<h4 id=\"实验-2\"><a class=\"anchor\" href=\"#实验-2\">#</a> 实验</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AliasForTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@A</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span>annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span> <span class=\"token function\">aValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@B</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"xiaou\"</span><span class=\"token punctuation\">,</span> aValue <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotatedElementUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMergedAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">C</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotatedElementUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMergedAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">C</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出结果</p>\n<pre><code>@org.test.AliasForTest.B(aValue=&quot;123&quot;, value=&quot;xiaou&quot;)\n@org.test.AliasForTest.A(value=&quot;123&quot;)\n</code></pre>\n<p>从结果看出来 B 注解的 aValue = A 注解的 value 值为什么出现了这种情况关键在于这行代码。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 指定 B 注解中 aValue 参数作为 A 中 value 参数的别名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span>annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">aValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note warning\">\n<p>@AliasFor 注解的 annotation 参数指定的注解需要加载当前注解上面。</p>\n</div>\n",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/springboot/Spring%20%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/",
            "url": "https://blog.xiaou.icu/springboot/Spring%20%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/",
            "title": "Spring 消息推送",
            "date_published": "2022-03-10T05:45:53.000Z",
            "content_html": "<h1 id=\"spring-消息推送\"><a class=\"anchor\" href=\"#spring-消息推送\">#</a> Spring 消息推送</h1>\n<p>常见的消息推送的技术有</p>\n<ol>\n<li>SSE 单向推送</li>\n<li>WebSocket 双向推送</li>\n<li>HTTP 长连接</li>\n</ol>\n<h2 id=\"sse-单向推送\"><a class=\"anchor\" href=\"#sse-单向推送\">#</a> SSE 单向推送</h2>\n<div class=\"note info\">\n<p>SseEmitter 是 SpringMVC (4.2+) 提供的一种技术，它是基于 Http 协议的，相比 WebSocket，它更轻量，但是它只能从服务端向客户端单向发送信息。在 SpringBoot 中我们无需引用其他 jar 就可以使用。</p>\n</div>\n<h3 id=\"后端代码\"><a class=\"anchor\" href=\"#后端代码\">#</a> 后端代码</h3>\n<ol>\n<li>请求开启 SSE</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/start\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">SseEmitter</span> <span class=\"token function\">startSseEmitter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">SseEmitter</span> sseEmitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SseEmitter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sseEmitterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sseEmitter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">clearSseEmitterConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> sseEmitter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>推送消息</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/send\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">setSseEmitter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Result</span> result <span class=\"token operator\">=</span> sseEmitterMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> result<span class=\"token punctuation\">.</span>sseEmitter <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">long</span> timestamp <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            result<span class=\"token punctuation\">.</span>sseEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clientId: &#123;&#125; 出现问题\"</span><span class=\"token punctuation\">,</span> clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        sseEmitterMap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"succeed\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>结束连接请求</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/end\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">completeSseEmitter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Result</span> result <span class=\"token operator\">=</span> sseEmitterMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        sseEmitterMap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        result<span class=\"token punctuation\">.</span>sseEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"succeed\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>全部代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 使用 SSE 推送消息</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SSEController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">></span></span> sseEmitterMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ObjectMapper</span> objectMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/start\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SseEmitter</span> <span class=\"token function\">startSseEmitter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">SseEmitter</span> sseEmitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SseEmitter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        sseEmitterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                          <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sseEmitter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">clearSseEmitterConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 设置响应头的字符集，如果设置中文将乱码</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> sseEmitter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/send\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">setSseEmitter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">Result</span> result <span class=\"token operator\">=</span> sseEmitterMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> result<span class=\"token punctuation\">.</span>sseEmitter <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">long</span> timestamp <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                result<span class=\"token punctuation\">.</span>sseEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clientId: &#123;&#125; 出现问题\"</span><span class=\"token punctuation\">,</span> clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            sseEmitterMap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"succeed\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/end\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">completeSseEmitter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">Result</span> result <span class=\"token operator\">=</span> sseEmitterMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            sseEmitterMap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            result<span class=\"token punctuation\">.</span>sseEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"succeed\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * 清理连接</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clearSseEmitterConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> sseEmitterMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token class-name\">Result</span> result <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                result<span class=\"token punctuation\">.</span>sseEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json 格式错误\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                sseEmitterMap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前在线: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> sseEmitterMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> timestamp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">SseEmitter</span> sseEmitter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timestamp<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SseEmitter</span> sseEmitter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientId <span class=\"token operator\">=</span> clientId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">=</span> timestamp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sseEmitter <span class=\"token operator\">=</span> sseEmitter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"前端代码\"><a class=\"anchor\" href=\"#前端代码\">#</a> 前端代码</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/start?clientId=2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>source<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> data <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>source<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'连接打开'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>source<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 在关闭网页的时候发生断开连接</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onbeforeunload</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8080/end?clientId=2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"websocket-双向推送\"><a class=\"anchor\" href=\"#websocket-双向推送\">#</a> WebSocket 双向推送</h2>\n<div class=\"note info\">\n<p>WebSocket 协议提供了一种在浏览器和服务器之间建立持久连接来交换数据的方法。数据可以作为 “数据包” 在两个方向上传递，而不会断开连接和其他 HTTP 请求。</p>\n</div>\n",
            "tags": [
                "springboot",
                "java"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/mysql/%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/",
            "url": "https://blog.xiaou.icu/mysql/%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/",
            "title": "用户和权限管理",
            "date_published": "2022-03-10T01:13:50.000Z",
            "content_html": "<h1 id=\"用户和权限管理\"><a class=\"anchor\" href=\"#用户和权限管理\">#</a> 用户和权限管理</h1>\n<p>MySQL 用户可以分为 普通用户 和 ROOT 用户，ROOT 用户具有所有权限包括创建用户、删除用户和修改用户的密码等管理权限，普通用户只能被授予各种权限。</p>\n<h2 id=\"登录\"><a class=\"anchor\" href=\"#登录\">#</a> 登录</h2>\n<p>启动 MySQL 服务之后，可以通过 MySQL 命令来登录 MySQL 服务器命令格式如下:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql <span class=\"token parameter variable\">-h</span> <span class=\"token function\">hostname</span><span class=\"token operator\">|</span>hostIP <span class=\"token parameter variable\">-P</span> port <span class=\"token parameter variable\">-u</span> username <span class=\"token parameter variable\">-p</span> databases <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"SQL 语句\"</span></pre></td></tr></table></figure><ol>\n<li>-h  主机名或主机 IP</li>\n<li>-P 端口</li>\n<li>-u 用户名</li>\n<li>-p 密码</li>\n<li>databases: 指明需要登录哪一个数据库</li>\n<li>-e 后面可以带 SQL 当 MySQL 服务器执行完后将会指定登出 MySQL 服务器</li>\n</ol>\n<h2 id=\"用户管理\"><a class=\"anchor\" href=\"#用户管理\">#</a> 用户管理</h2>\n<h3 id=\"创建用户\"><a class=\"anchor\" href=\"#创建用户\">#</a> 创建用户</h3>\n<p>在 MySQL 数据库中，可以使用  <code>CREATE USER</code>  语句创建新的用户。</p>\n<h4 id=\"语句格式\"><a class=\"anchor\" href=\"#语句格式\">#</a> 语句格式</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> 用户名 <span class=\"token punctuation\">[</span>IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'密码'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'密码'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ol>\n<li>用户名参数表示新建用户的用户名，由  <code>用户 (USER)</code>  和  <code>主机名 (HOST)</code>  构成</li>\n<li><code>CREATE USER</code>  可以一次创建多个用户</li>\n</ol>\n<h4 id=\"实践\"><a class=\"anchor\" href=\"#实践\">#</a> 实践</h4>\n<ol>\n<li>不填主机名</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> xiaou IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'123'</span></pre></td></tr></table></figure><pre><code>select user, host from user;\n+---------------+-----------+\n| user          | host      |\n+---------------+-----------+\n| xiaou         | %         |\n| mysql.session | localhost |\n| mysql.sys     | localhost |\n| root          | localhost |\n+---------------+-----------+\n</code></pre>\n<p>从结果中可以看出默认  <code>host</code>  是  <code>%</code></p>\n<ol start=\"2\">\n<li>不设置密码</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> xiaou2</pre></td></tr></table></figure><p>需要使用  <code>mysql -u xiaou2</code>  登录不能带 -p 否则会报错</p>\n<ol start=\"3\">\n<li>完整创建用户</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">user</span> <span class=\"token string\">'xiaou3@localhost'</span> IDENTIFIED <span class=\"token keyword\">by</span> <span class=\"token string\">'123'</span></pre></td></tr></table></figure><pre><code>select user, host from user;\n+---------------+-----------+\n| user          | host      |\n+---------------+-----------+\n| xiaou         | %         |\n| xiaou2        | %         |\n| mysql.session | localhost |\n| mysql.sys     | localhost |\n| root          | localhost |\n| xiaou3        | localhost |\n+---------------+-----------+\n</code></pre>\n<h3 id=\"修改用户\"><a class=\"anchor\" href=\"#修改用户\">#</a> 修改用户</h3>\n<h4 id=\"语句格式-2\"><a class=\"anchor\" href=\"#语句格式-2\">#</a> 语句格式</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span> <span class=\"token keyword\">set</span> 修改项 <span class=\"token keyword\">where</span> <span class=\"token keyword\">user</span> <span class=\"token operator\">=</span> <span class=\"token string\">'用户名'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"实践-2\"><a class=\"anchor\" href=\"#实践-2\">#</a> 实践</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span> <span class=\"token keyword\">set</span> host<span class=\"token operator\">=</span><span class=\"token string\">'localhost'</span> <span class=\"token keyword\">where</span> <span class=\"token keyword\">user</span> <span class=\"token operator\">=</span> <span class=\"token string\">'xiaou2'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>+---------------+-----------+\n| user          | host      |\n+---------------+-----------+\n| xiaou         | %         |\n| mysql.session | localhost |\n| mysql.sys     | localhost |\n| root          | localhost |\n| xiaou2        | localhost |\n| xiaou3        | localhost |\n+---------------+-----------+\n</code></pre>\n<h3 id=\"删除用户\"><a class=\"anchor\" href=\"#删除用户\">#</a> 删除用户</h3>\n<h4 id=\"语句格式-3\"><a class=\"anchor\" href=\"#语句格式-3\">#</a> 语句格式</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">USER</span> 用户名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>用户名<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"实践-3\"><a class=\"anchor\" href=\"#实践-3\">#</a> 实践</h4>\n<p>删除 xiaou3</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">USER</span> xiaou3<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>会出现错误  <code>ERROR 1396 (HY000): Operation DROP USER failed for 'xiaou3'@'%'</code>  因为默认是  <code>%</code>  需要指定 host。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">USER</span> xiaou3<span class=\"token variable\">@'localhost'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>+---------------+-----------+\n| user          | host      |\n+---------------+-----------+\n| xiaou         | %         |\n| mysql.session | localhost |\n| mysql.sys     | localhost |\n| root          | localhost |\n| xiaou2        | localhost |\n+---------------+-----------+\n</code></pre>\n<h3 id=\"密码修改\"><a class=\"anchor\" href=\"#密码修改\">#</a> 密码修改</h3>\n<ol>\n<li>使用  <code>SET</code>  语句来修改当前密码</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SET</span> PASSWORD<span class=\"token operator\">=</span><span class=\"token string\">'new_password'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SET</span> PASSWORD<span class=\"token operator\">=</span><span class=\"token string\">'xiau123'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>修改其他用户密码</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SET</span> PASSWORD <span class=\"token keyword\">FOR</span> <span class=\"token string\">'xiaou2'</span><span class=\"token variable\">@'localhost'</span><span class=\"token operator\">=</span><span class=\"token string\">'xiaou123'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"权限管理\"><a class=\"anchor\" href=\"#权限管理\">#</a> 权限管理</h2>\n<p>查看所有权限</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">privileges</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>权限分布</p>\n<table>\n<thead>\n<tr>\n<th>权限分布</th>\n<th>可能的设置权限</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>表权限</td>\n<td>select/insert/upadte/delete/create/drop/grant/references/index/alter</td>\n</tr>\n<tr>\n<td>列权限</td>\n<td>select/insert/update/references</td>\n</tr>\n<tr>\n<td>过程权限</td>\n<td>execute/alter routine/grant</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"权限授予原则\"><a class=\"anchor\" href=\"#权限授予原则\">#</a> 权限授予原则</h3>\n<ol>\n<li>只授予满足需要最小权限，防止出现问题</li>\n<li>创建用户的时候如果可以限制用户登录的主机那么一定要限制，一般指定 IP 或者内网。</li>\n<li>定期清理不使用的用户，回收权限或删除用户</li>\n<li>为每个用户都要设置较为复杂的密码</li>\n</ol>\n<h3 id=\"授予权限\"><a class=\"anchor\" href=\"#授予权限\">#</a> 授予权限</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">GRANT</span> 权限<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>权限<span class=\"token punctuation\">]</span> <span class=\"token keyword\">ON</span> 数据库名称<span class=\"token punctuation\">.</span>表名称 <span class=\"token keyword\">TO</span> 用户名 <span class=\"token punctuation\">[</span>IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'密码'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>如果在授予权限的时候没有发现用户，则会直接创建一个用户</li>\n<li>ALL PRIVILEGES 是表示所有权限，你也可以使用 SELECT、UPDATE 等权限</li>\n<li>ON 用来指定权限针对哪些库和表</li>\n<li>TO 表示将权限赋予某个用户</li>\n<li>如果需要赋予包括 GRANT 的权限，添加参数 “  <code>WITH GRANT OPTION</code>  &quot; 这个选项即可，表示该用户可以将自 己拥有的权限授权给别人</li>\n<li>GRANT 重复给用户添加权限，权限叠加，比如你先给用户添加一个 SELECT 权限，然后又给用户添加 一 个 INSERT 权限，那么该用户就同时拥有了 SELECT 和 INSERT 权限。</li>\n</ul>\n<h4 id=\"实践-4\"><a class=\"anchor\" href=\"#实践-4\">#</a> 实践</h4>\n<ol>\n<li>给  <code>xiaou</code>  用户授予 test 数据库所有表的   <code>select</code> 、 <code>insert</code> 、 <code>delete</code>  和  <code>update</code>   权限</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">grant</span> <span class=\"token keyword\">select</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">insert</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">update</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">delete</span> <span class=\"token keyword\">on</span> test<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">to</span> <span class=\"token string\">'xiaou'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>给  <code>xiaou2</code>  用户授予所有数据库和表的全部权限</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">grant</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">privileges</span> <span class=\"token keyword\">on</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">to</span> <span class=\"token string\">'xiaou2'</span><span class=\"token variable\">@'localhost'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>在开发应用的时候，经常会遇到一种需求，就是要根据用户的不同，对数据进行横向和纵向的分组。</p>\n<ul>\n<li>横向分组：用户可以接触到的数据范围，比如：可以看到哪些表的数据</li>\n<li>纵向分组：用户对接数据能访问到什么程度，比如可以查询、修改。</li>\n</ul>\n</blockquote>\n<h3 id=\"查看权限\"><a class=\"anchor\" href=\"#查看权限\">#</a> 查看权限</h3>\n<h4 id=\"语句\"><a class=\"anchor\" href=\"#语句\">#</a> 语句</h4>\n<ol>\n<li>查看当前用户权限</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHOW</span> GRANTS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> <span class=\"token keyword\">CURRENT_USER</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> <span class=\"token keyword\">CURRENT_USER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>查看用户权限</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> <span class=\"token string\">'user'</span><span class=\"token variable\">@'主机地址'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"收回权限\"><a class=\"anchor\" href=\"#收回权限\">#</a> 收回权限</h3>\n<blockquote>\n<p>收回用户不必要的权限可以在一定程度上保证系统的安全性</p>\n</blockquote>\n<div class=\"note warning\">\n<p>在将用户账号从 user 表回收之前，应该要回收相应用户的全部权限</p>\n</div>\n<h4 id=\"语句格式-4\"><a class=\"anchor\" href=\"#语句格式-4\">#</a> 语句格式</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">REVOKE</span> 权限<span class=\"token number\">1</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>权限<span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">ON</span> 数据库名称<span class=\"token punctuation\">.</span>表名称 <span class=\"token keyword\">FROM</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'用户地址'</span></pre></td></tr></table></figure><h4 id=\"实践-5\"><a class=\"anchor\" href=\"#实践-5\">#</a> 实践</h4>\n<ol>\n<li>收回   <code>xiaou2</code>  用户所有数据库和表的全部权限</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">revoke</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">privileges</span> <span class=\"token keyword\">on</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'xiaou2'</span><span class=\"token variable\">@'localhost'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"权限表\"><a class=\"anchor\" href=\"#权限表\">#</a> 权限表</h3>\n<p>MySQL 服务器通过 权限表 来控制用户对数据库的访问，权限表存放在 MySQL 数据库中。</p>\n<p>MySQL 数据库系统会根据权限表的内容为每个用户赋予相应的权限。这些权限表中最重要的是  <code>user</code>  表和  <code>db</code>  表。除此之外还有 <code>table_priv</code>  表、 <code>column_priv</code>  表、 <code>proc_priv</code>  表等。<strong>在 MySQL 启动时，服务器将这些数据库中权限消息读入内存</strong>。</p>\n<table>\n<thead>\n<tr>\n<th>表名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>user</td>\n<td>用户账号及权限消息</td>\n</tr>\n<tr>\n<td>db</td>\n<td>数据库层级的权限</td>\n</tr>\n<tr>\n<td>table_priv</td>\n<td>表层级的权限</td>\n</tr>\n<tr>\n<td>column_priv</td>\n<td>列层级的权限</td>\n</tr>\n<tr>\n<td>proc_priv</td>\n<td>存储过程的权限</td>\n</tr>\n<tr>\n<td>global_grants</td>\n<td>动态全局授权</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "MySql",
                ""
            ]
        },
        {
            "id": "https://blog.xiaou.icu/springboot/Spring%20Bean%20%E4%BD%9C%E7%94%A8%E5%9F%9F/",
            "url": "https://blog.xiaou.icu/springboot/Spring%20Bean%20%E4%BD%9C%E7%94%A8%E5%9F%9F/",
            "title": "Spring Bean 作用域",
            "date_published": "2022-03-09T02:25:59.000Z",
            "content_html": "<h1 id=\"spring-bean-作用域\"><a class=\"anchor\" href=\"#spring-bean-作用域\">#</a> Spring Bean 作用域</h1>\n<blockquote>\n<p>Spring 提供的默认环境作用域有  <code>singleton</code>  和  <code>prototype</code>  在 Web 环境下还有  <code>request</code> 、 <code>session</code> 、 <code>application</code>  三个作用域。</p>\n</blockquote>\n<h2 id=\"singleton-单例\"><a class=\"anchor\" href=\"#singleton-单例\">#</a> singleton 单例</h2>\n<ol>\n<li>当 scope 的值设置为 singleton 的时候，整个 spring 容器中只会存在一个 bean 实例，通过容器多次查找<br />\n bean 的时候（调用 BeanFactory 的 getBean 方法或者 bean 之间注入依赖的 bean 对象的时候），返回的<br />\n都是同一个 bean 对象。</li>\n<li>singleton 是 scope 的<strong>默认值</strong>，所以 Spring 容器中默认创建的 bean 对象是单例的。</li>\n<li>通常 Spring 容器在启动的时候，会将 scope 为 singleton 的 bean 创建好放在容器中\n<ul>\n<li>有个特殊的情况，当 bean 的 lazy 被设置为 true 的时候，表示懒加载，那么使用的时候才会创建</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"singleton\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">void</span> <span class=\"token function\">scopeTest1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">TestController</span> c1 <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">TestController</span> c2 <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发现两次获取都是 bean 体现了 bean 的单例情况。</p>\n<h3 id=\"注意点\"><a class=\"anchor\" href=\"#注意点\">#</a> 注意点</h3>\n<p>单例 bean 是整个应用共享的，所以需要考虑到线程安全问题。</p>\n<p>在 Spring MVC 的时候，Spring MVC 中 controller 默认是单例的，在 controller 中创建了一些变量，那么这些变量实际上就变成<strong>共享</strong>的了，controller 可能会被很多线程同时访问，这些线程并发去修改 controller 中的共享变量，可能会出现数据错乱的问题；所以使用的时候需要特别注意。</p>\n<h2 id=\"prototype-多例\"><a class=\"anchor\" href=\"#prototype-多例\">#</a> prototype 多例</h2>\n<p>如果 scope 被设置为 prototype 类型的了，表示这个 bean 是多例的，通过容器每次获取的 bean 都是不同<br />\n的实例，每次获取都会重新创建一个 bean 实例对象。</p>\n<h3 id=\"测试-2\"><a class=\"anchor\" href=\"#测试-2\">#</a> 测试</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"prototype\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">void</span> <span class=\"token function\">scopeTest1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">TestController</span> c1 <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">TestController</span> c2 <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>获取 TestController 实例得到的都是不同的实例，每次获取的时候才会去调用构造方法创建 bean 实例。</p>\n<h3 id=\"注意点-2\"><a class=\"anchor\" href=\"#注意点-2\">#</a> 注意点</h3>\n<p>多例 bean 每次获取的时候都会重新创建，如果这个 bean 比较复杂，创建时间比较长，会影响系统的性<br />\n能，这个地方需要注意。</p>\n<h2 id=\"request\"><a class=\"anchor\" href=\"#request\">#</a> request</h2>\n<p>当一个 bean 的作用域为 request，表示在一次 http 请求中，一个 bean 对应一个实例；对每个 http 请求都 会创建一个 bean 实例，request 结束的时候，这个 bean 也就结束了，request 作用域用在 Spring 容器的 web 环境中，这个以后讲 Spring MVC 的时候会说，spring 中有个 web 容器接口 WebApplicationContext， 这个里面对 request 作用域提供了支持。</p>\n<h2 id=\"session\"><a class=\"anchor\" href=\"#session\">#</a> session</h2>\n<p>这个和 request 类似，也是用在 web 环境中，session 级别共享的 bean，每个会话会对应一个 bean 实<br />\n例，不同的 session 对应不同的 bean 实例。</p>\n<h2 id=\"application\"><a class=\"anchor\" href=\"#application\">#</a> application</h2>\n<p>全局 web 应用级别的作用于，也是在 web 环境中使用的，一个 web 应用程序对应一个 bean 实例，通常情<br />\n况下和 singleton 效果类似的，不过也有不一样的地方，singleton 是每个 Spring 容器中只有一个 bean 实<br />\n例，一般我们的程序只有一个 Spring 容器，但是，一个应用程序中可以创建多个 Spring 容器，不同的容<br />\n器中可以存在同名的 bean，但是 sope = aplication 的时候，不管应用中有多少个 Spring 容器，这个应用中<br />\n同名的 bean 只有一个。</p>\n<h2 id=\"自定义-scope\"><a class=\"anchor\" href=\"#自定义-scope\">#</a> 自定义 scope</h2>\n<h3 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h3>\n<ol>\n<li>实现 scope 接口</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Scope</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 返回当前作用域中 name 对应 bean 对象 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * name: 需要检索的 bean 的名称</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * objectFactory：如果 name 对应的 bean 在当前作用域中没有找到，那么可以调用这个</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     *                ObjectFactory 来创建这个对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObjectFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> objectFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 将 name 对应的 bean 从当前作用域中移除</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token class-name\">Object</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 用于注册销毁回调，</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 如果想要销毁相应的对象，</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 则由 Spring 容器注册相应的销毁回调，而由自定义作用域选择是不是要销毁相应的对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">registerDestructionCallback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Runnable</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 用于解析相应的上下文数据，比如 request 作用域将返回 request 中的属性。</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token class-name\">Object</span> <span class=\"token function\">resolveContextualObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 作用域的会话标识，比如 session 作用域将是 sessionId</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token class-name\">String</span> <span class=\"token function\">getConversationId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>将自定义的 scope 注册到容器</li>\n</ol>\n<p>需要调用  <code>org.springframework.beans.factory.config.ConfigurableBeanFactory#registerScope</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 向容器中注册自定义的 Scope</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* scopeName：作用域名称</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* scope：作用域对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>**/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">registerScope</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> scopeName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Scope</span> scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>使用自定义的作用域</li>\n</ol>\n<p>定义 bean 的时候，指定 bean 的 scope 属性为自定义的作用域名称。</p>\n<h3 id=\"具体操作\"><a class=\"anchor\" href=\"#具体操作\">#</a> 具体操作</h3>\n<blockquote>\n<p>同一个线程中同名的 bean 是同一个实例，不同的线程中的 bean 是不同的实例。</p>\n</blockquote>\n<ol>\n<li>实现 Scope 接口</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadScope</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Scope</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">THREAD_SCOPE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"thread\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> beanMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">initialValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObjectFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> objectFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Object</span> bean <span class=\"token operator\">=</span> beanMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            bean <span class=\"token operator\">=</span> objectFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            beanMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> beanMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerDestructionCallback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Runnable</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name:\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveContextualObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getConversationId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>注册使用</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfigurableBeanFactoryConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">registerScope</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadScope</span><span class=\"token punctuation\">.</span><span class=\"token constant\">THREAD_SCOPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>使用自定义作用域</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">ThreadScope</span><span class=\"token punctuation\">.</span><span class=\"token constant\">THREAD_SCOPE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>测试</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadScopeTest1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                               applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                               applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>结果</li>\n</ol>\n<pre><code>Thread[Thread-2,5,main],org.example.controller.TestController@2a9a5f0b\nThread[Thread-2,5,main],org.example.controller.TestController@2a9a5f0b\nThread[Thread-3,5,main],org.example.controller.TestController@7ade64c4\nThread[Thread-3,5,main],org.example.controller.TestController@7ade64c4\n</code></pre>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<ol>\n<li>Spring 容器自带的有 2 种作用域，分别是 singleton 和 prototype；还有 3 种分别是 Spring WEB 容器环 境中才支持的 request、session、application</li>\n<li>singleton 是 Spring 容器默认的作用域，一个 Spring 容器中同名的 bean 实例只有一个，多次获取得 到的是同一个 bean；单例的 bean 需要考虑线程安全问题</li>\n<li>prototype 是多例的，每次从容器中获取同名的 bean，都会重新创建一个；多例 bean 使用的时候需 要考虑创建 bean 对性能的影响</li>\n<li>一个应用中可以有多个 Spring 容器</li>\n<li>自定义 scope 的 3 个步骤，实现 Scope 接口，将实现类注册到 Spring 容器，使用自定义的 sope</li>\n</ol>\n",
            "tags": [
                "springboot",
                "java"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/springboot/FactoryBean%20%E5%92%8C%20BeanFactory/",
            "url": "https://blog.xiaou.icu/springboot/FactoryBean%20%E5%92%8C%20BeanFactory/",
            "title": "FactoryBean 和 BeanFactory",
            "date_published": "2022-03-09T01:20:20.000Z",
            "content_html": "<h1 id=\"factorybean-和-beanfactory\"><a class=\"anchor\" href=\"#factorybean-和-beanfactory\">#</a> FactoryBean 和 BeanFactory</h1>\n<blockquote>\n<p>FactoryBean 和 BeanFactory 是两个功能完全不一样的接口。</p>\n</blockquote>\n<h2 id=\"factorybean\"><a class=\"anchor\" href=\"#factorybean\">#</a> FactoryBean</h2>\n<blockquote>\n<p>我们通过 FactoryBean 可以让 Spring 容器通过这个接口的实现来获取我们需要创建的 bean 对象</p>\n</blockquote>\n<h3 id=\"接口方法\"><a class=\"anchor\" href=\"#接口方法\">#</a> 接口方法</h3>\n<p>接口中主要有三个方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FactoryBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 容器中获取对象的时候会调用这个方法去生成 bean 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">T</span> <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 指定要创建 bean 类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 是否是单例对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"接口使用\"><a class=\"anchor\" href=\"#接口使用\">#</a> 接口使用</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FactoryBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Users</span> <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Users</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaou\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Users</span> user1 <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Users</span> user2 <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// user1 == user2: true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1 == user2: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>user1 <span class=\"token operator\">==</span> user2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// user1: Users(id=1, username=xiaou)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1: \"</span> <span class=\"token operator\">+</span> user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// user2: Users(id=1, username=xiaou)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user2: \"</span> <span class=\"token operator\">+</span> user2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>从上面的测试点来看，在  <code>FactoryBean</code>  中的  <code>getObject()</code>  在默认的情况下只调用一次。</p>\n</blockquote>\n<p>如果想获取工厂本身的实例的话可以在 bean 名称前面加  <code>&amp;</code>  字符</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">factoryBeanTest2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// org.example.factory.DemoFactory@65f2f9b0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">DemoFactory</span> bean <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoFactory</span><span class=\"token punctuation\">)</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;demoFactory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"beanfactory\"><a class=\"anchor\" href=\"#beanfactory\">#</a> BeanFactory</h2>\n<blockquote>\n<p>BeanFactory 会在 bean 的生命周期的各个阶段中对 bean 进行管理，并且 spring 将这些阶段通过各种接口暴露给我们，让我们可以对 bean 进行处理，我们只要让 bean 实现对应的接口，那么 spring 就会在 bean 的生命周期调用我们实现的接口来处理该 bean。</p>\n</blockquote>\n<p>BeanFactory 的实现类，需要实现 BeanDefinitionRegistry 接口，因为通过这个接口可以将这些 bean 注册到 beanFactory 中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultListableBeanFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAutowireCapableBeanFactory</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConfigurableListableBeanFactory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionRegistry</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><code>BeanFactory</code> : 负责生产和管理 Bean 的一个工厂接口，提供一个 Spring Ioc 容器规范 。</p>\n<p><code>FactoryBean</code> :  一种 Bean 创建的一种方式，对 Bean 的一种扩展。对于复杂的 Bean 对象初始化创建使用其可封装对象的创建细节。</p>\n",
            "tags": [
                "springboot",
                "java"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/mysql/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/",
            "url": "https://blog.xiaou.icu/mysql/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/",
            "title": "窗口函数",
            "date_published": "2022-03-06T09:09:20.000Z",
            "content_html": "<h1 id=\"窗口函数\"><a class=\"anchor\" href=\"#窗口函数\">#</a> 窗口函数</h1>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<p>1\t北京\t海淀\t10<br />\n2\t北京\t朝阳\t20<br />\n3\t上海\t黄埔\t30<br />\n4\t上海\t长宁\t10</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sales<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>city <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>county <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sales_value <span class=\"token keyword\">DECIMAL</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sales<span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">,</span>county<span class=\"token punctuation\">,</span>sales_value<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">VALUES</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'海淀'</span><span class=\"token punctuation\">,</span><span class=\"token number\">10.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'朝阳'</span><span class=\"token punctuation\">,</span><span class=\"token number\">20.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'上海'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'黄埔'</span><span class=\"token punctuation\">,</span><span class=\"token number\">30.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'上海'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'长宁'</span><span class=\"token punctuation\">,</span><span class=\"token number\">10.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol>\n<li>现在计算这个网站在每个城市的销售总额、在全国的销售总额、每个区的销售额占所在城市销售 额中的比率，以及占总销售额中的比率。</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> city <span class=\"token keyword\">AS</span> 城市<span class=\"token punctuation\">,</span>county <span class=\"token keyword\">AS</span> 区<span class=\"token punctuation\">,</span>sales_value <span class=\"token keyword\">AS</span> 区销售额<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>sales_value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> city<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> 市销售额<span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 计算市销售额</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sales_value<span class=\"token operator\">/</span><span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>sales_value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> city<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> 市比率<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>sales_value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> 总销售额<span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 计算总销售额</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sales_value<span class=\"token operator\">/</span><span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>sales_value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> 总比率</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">FROM</span> sales</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> city<span class=\"token punctuation\">,</span>county<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://fastly.jsdelivr.net/gh/xiaou66/picture@master/image/1646570662136image-20220306184139594.png\" alt=\"image-20220306184139594\" /></p>\n<h2 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h2>\n<h3 id=\"数据表定义\"><a class=\"anchor\" href=\"#数据表定义\">#</a> 数据表定义</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> goods<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>category_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>category <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>NAME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>price <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stock <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>upper_time <span class=\"token keyword\">DATETIME</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> goods<span class=\"token punctuation\">(</span>category_id<span class=\"token punctuation\">,</span>category<span class=\"token punctuation\">,</span>NAME<span class=\"token punctuation\">,</span>price<span class=\"token punctuation\">,</span>stock<span class=\"token punctuation\">,</span>upper_time<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">VALUES</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女装/女士精品'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'T恤'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女装/女士精品'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'连衣裙'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">79.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女装/女士精品'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'卫衣'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女装/女士精品'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'牛仔裤'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女装/女士精品'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'百褶裙'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女装/女士精品'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'呢绒外套'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">399.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'户外运动'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'自行车'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">399.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'户外运动'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'山地自行车'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1399.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'户外运动'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'登山杖'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'户外运动'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'骑行装备'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">399.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'户外运动'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'运动外套'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">799.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'户外运动'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'滑板'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">499.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"序号函数\"><a class=\"anchor\" href=\"#序号函数\">#</a> 序号函数</h3>\n<h4 id=\"row_number函数\"><a class=\"anchor\" href=\"#row_number函数\">#</a> ROW_NUMBER () 函数</h4>\n<p>ROW_NUMBER () 函数能够对数据中的序号进行顺序显示。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/xiaou66/picture@master/image/1646570667140image-20220306190740870.png\" alt=\"image-20220306190740870\" /></p>\n<h4 id=\"rank-函数\"><a class=\"anchor\" href=\"#rank-函数\">#</a> Rank () 函数</h4>\n<p>使用 RANK () 函数能够对序号进行并列排序，并且会跳过重复的序号，比如序号为 1、1、3。</p>\n<p>举例：使用 RANK () 函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/xiaou66/picture@master/image/1646570670139image-20220306191127276.png\" alt=\"image-20220306191127276\" /></p>\n<p>可以看到，使用 RANK () 函数得出的序号为 1、2、2、4，相同价格的商品序号相同，后面的商品序号是不 连续的，跳过了重复的序号。</p>\n<h4 id=\"dense_rank函数\"><a class=\"anchor\" href=\"#dense_rank函数\">#</a> DENSE_RANK () 函数</h4>\n<p>DENSE_RANK () 函数对序号进行并列排序，并且不会跳过重复的序号，比如序号为 1、1、2。</p>\n<p>举例：使用 DENSE_RANK () 函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/xiaou66/picture@master/image/1646570673145image-20220306192228880.png\" alt=\"image-20220306192228880\" /></p>\n<p>使用 DENSE_RANK () 函数获取 goods 数据表中类别为 “女装 / 女士精品” 的价格最高的 4 款商品信息。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">*</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">SELECT</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        DENSE_RANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> row_num<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        category_id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        category<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        price<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        stock </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        goods </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">)</span> t </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">WHERE</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcategory_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token operator\">AND</span> row_num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span></pre></td></tr></table></figure><h3 id=\"分布函数\"><a class=\"anchor\" href=\"#分布函数\">#</a> 分布函数</h3>\n<h4 id=\"percent_rank-函数\"><a class=\"anchor\" href=\"#percent_rank-函数\">#</a> PERCENT_RANK () 函数</h4>\n<p>PERCENT_RANK () 函数是等级值百分比函数。按照如下方式进行计算。</p>\n<pre><code>(rank - 1) / (rows - 1)\n</code></pre>\n<p>其中，rank 的值为使用 RANK () 函数产生的序号，rows 的值为当前窗口的总记录数。</p>\n<p>计算 goods 数据表中名称为 “女装 / 女士精品” 的类别下的商品的 PERCENT_RANK 值。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> RANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> w <span class=\"token keyword\">as</span> r<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PERCENT_RANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> w <span class=\"token keyword\">as</span> pr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>id<span class=\"token punctuation\">,</span> category_id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> stock</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">FROM</span> goods</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">WHERE</span> category_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span> WINDOW w <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://fastly.jsdelivr.net/gh/xiaou66/picture@master/image/1646570680157image-20220306201436903.png\" alt=\"image-20220306201436903\" /></p>\n<h4 id=\"cume_dist-函数\"><a class=\"anchor\" href=\"#cume_dist-函数\">#</a> CUME_DIST () 函数</h4>\n<p>CUME_DIST () 函数主要用于查询小于或等于某个值的比例。</p>\n<p>查询 goods 数据表中小于或等于当前价格的比例。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> CUME_DIST<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">ASC</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">AS</span> cd<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> price</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span> goods<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://fastly.jsdelivr.net/gh/xiaou66/picture@master/image/1646570683144image-20220306202731344.png\" alt=\"image-20220306202731344\" /></p>\n<h4 id=\"前后函数\"><a class=\"anchor\" href=\"#前后函数\">#</a> 前后函数</h4>\n<p>LAG (expr,n) 函数</p>\n<p>AG (expr,n) 函数返回当前行的前 n 行的 expr 的值</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> pre_price<span class=\"token punctuation\">,</span> price <span class=\"token operator\">-</span> pre_price <span class=\"token keyword\">AS</span> diff_price</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span>LAG<span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> w <span class=\"token keyword\">AS</span> pre_price</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">FROM</span> goods</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>WINDOW w <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> t<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://fastly.jsdelivr.net/gh/xiaou66/picture@master/image/1646570688131image-20220306203621261.png\" alt=\"image-20220306203621261\" /></p>\n<h4 id=\"leadexprn-函数\"><a class=\"anchor\" href=\"#leadexprn-函数\">#</a> LEAD (expr,n) 函数</h4>\n<p>LEAD (expr,n) 函数返回当前行的后 n 行的 expr 的值。</p>\n<h3 id=\"首尾函数\"><a class=\"anchor\" href=\"#首尾函数\">#</a> 首尾函数</h3>\n<h4 id=\"first_valueexpr-函数\"><a class=\"anchor\" href=\"#first_valueexpr-函数\">#</a> FIRST_VALUE (expr) 函数</h4>\n<p>FIRST_VALUE (expr) 函数返回第一个 expr 的值。</p>\n<h4 id=\"last_valueexpr-函数\"><a class=\"anchor\" href=\"#last_valueexpr-函数\">#</a> LAST_VALUE (expr) 函数</h4>\n<p>LAST_VALUE (expr) 函数返回最后一个 expr 的值。</p>\n<h3 id=\"其他函数\"><a class=\"anchor\" href=\"#其他函数\">#</a> 其他函数</h3>\n<h4 id=\"nth_valueexprn\"><a class=\"anchor\" href=\"#nth_valueexprn\">#</a> NTH_VALUE(expr,n)</h4>\n<p>NTH_VALUE (expr,n) 函数返回第 n 个 expr 的值。</p>\n<p>查询 goods 数据表中排名第 2 和第 3 的价格信息。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span>NTH_VALUE<span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> w <span class=\"token keyword\">AS</span> second_price<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NTH_VALUE<span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> w <span class=\"token keyword\">AS</span> third_price</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span> goods WINDOW w <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"ntilen-函数\"><a class=\"anchor\" href=\"#ntilen-函数\">#</a> NTILE (n) 函数</h4>\n<p>NTILE (n) 函数将分区中的有序数据分为 n 个桶，记录桶编号。</p>\n<p>将 goods 表中的商品按照价格和类别分为 3 组。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> NTILE<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> w <span class=\"token keyword\">as</span> nt<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> price</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> goods WINDOW w <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> nt<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>窗口函数的特点是可以分组，而且可以在分组内排序。另外，窗口函数不会因为分组而减少原表中的行数，这对我们在原表数据的基础上进行统计和排序非常有用。</p>\n",
            "tags": [
                "MySql",
                "sql"
            ]
        },
        {
            "id": "https://blog.xiaou.icu/mysql/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/",
            "url": "https://blog.xiaou.icu/mysql/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/",
            "title": "多表查询",
            "date_published": "2022-03-06T04:43:51.000Z",
            "content_html": "<h1 id=\"多表查询\"><a class=\"anchor\" href=\"#多表查询\">#</a> 多表查询</h1>\n<div class=\"note info\">\n<p>多表查询，也称为关联查询，指两个或更多个表一起完成查询操作。 前提条件：这些一起查询的表之间是有关系的（一对一、一对多），它们之间一定是有关联字段，这个 关联字段可能建立了外键，也可能没有建立外键。比如：员工表和部门表，这两个表依靠 “部门编号” 进 行关联。</p>\n</div>\n<h2 id=\"笛卡尔积\"><a class=\"anchor\" href=\"#笛卡尔积\">#</a> 笛卡尔积</h2>\n<p>笛卡尔乘积是一个数学运算。假设我有两个集合 X 和 Y，那么 X 和 Y 的笛卡尔积就是 X 和 Y 的所有可能 组合，也就是第一个对象来自于 X，第二个对象来自于 Y 的所有可能。组合的个数即为两个集合中元素 个数的乘积数。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/xiaou66/picture@master/image/1646548783131image-20220306132549193.png\" alt=\"image-20220306132549193\" /></p>\n<p>编写 SQL 的函数</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 使用 join</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> a <span class=\"token keyword\">JOIN</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> a <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- SQL99</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> a <span class=\"token keyword\">CROSS</span> <span class=\"token keyword\">JOIN</span> b<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"笛卡尔积的错误产生的条件是\"><a class=\"anchor\" href=\"#笛卡尔积的错误产生的条件是\">#</a> 笛卡尔积的错误产生的条件是</h3>\n<ol>\n<li>省略多个表的连接条件（或关联条件）</li>\n<li>连接条件（或关联条件）无效</li>\n<li>所有表中的所有行互相连接</li>\n</ol>\n<p>为了避免笛卡尔积， 可以在 WHERE 或 on 加入有效的连接条件。</p>\n<p>加入连接条件后，查询语法：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> table1<span class=\"token punctuation\">.</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">,</span> table2<span class=\"token punctuation\">.</span><span class=\"token keyword\">column</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> table1<span class=\"token punctuation\">,</span> table2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">WHERE</span> table1<span class=\"token punctuation\">.</span>column1 <span class=\"token operator\">=</span> table2<span class=\"token punctuation\">.</span>column2<span class=\"token punctuation\">;</span> <span class=\"token comment\">#连接条件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 或</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">SELECT</span> table1<span class=\"token punctuation\">.</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">,</span> table2<span class=\"token punctuation\">.</span><span class=\"token keyword\">column</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">FROM</span> table1 <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> table2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">ON</span> table1<span class=\"token punctuation\">.</span>column1 <span class=\"token operator\">=</span> table2<span class=\"token punctuation\">.</span>column2</pre></td></tr></table></figure><h2 id=\"七种sql-joins的实现\"><a class=\"anchor\" href=\"#七种sql-joins的实现\">#</a> 七种 SQL JOINS 的实现</h2>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/xiaou66/picture@master/image/1646548790140sql-join.png\" alt=\"sql-join\" /></p>\n<h3 id=\"交集-中图\"><a class=\"anchor\" href=\"#交集-中图\">#</a> 交集：中图</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> department_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">JOIN</span> departments d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"左外连接-左上图\"><a class=\"anchor\" href=\"#左外连接-左上图\">#</a> 左外连接：左上图</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> department_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> departments d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"右外连接-右上图\"><a class=\"anchor\" href=\"#右外连接-右上图\">#</a> 右外连接：右上图</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> department_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> departments d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"a-ab-左中图\"><a class=\"anchor\" href=\"#a-ab-左中图\">#</a> A - A∩B: 左中图</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 字段列表</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> A表 <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> B表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">on</span> 关联条件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">where</span> 从表关联字段 <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span> <span class=\"token operator\">and</span> 等其他子句<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> department_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> departments d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">WHERE</span> d<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"b-ab-右中图\"><a class=\"anchor\" href=\"#b-ab-右中图\">#</a> B-A∩B: 右中图</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#实现 B - A∩B</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> 字段列表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> A表 <span class=\"token keyword\">right</span> <span class=\"token keyword\">join</span> B表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">on</span> 关联条件</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">where</span> 从表关联字段 <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span> <span class=\"token operator\">and</span> 等其他子句<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>last_name<span class=\"token punctuation\">,</span>department_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> departments d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>department_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>department_id<span class=\"token punctuation\">`</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>department_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span></pre></td></tr></table></figure><h3 id=\"左下图\"><a class=\"anchor\" href=\"#左下图\">#</a> 左下图</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#实现查询结果是 A∪B</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#用左外的 A，union 右外的 B</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> 字段列表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> A表 <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> B表</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">on</span> 关联条件</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">where</span> 等其他子句</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">select</span> 字段列表</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">from</span> A表 <span class=\"token keyword\">right</span> <span class=\"token keyword\">join</span> B表</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">on</span> 关联条件</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">where</span> 等其他子句<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> department_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> departments d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">WHERE</span> d<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> department_name</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> departments d</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"右下图\"><a class=\"anchor\" href=\"#右下图\">#</a> 右下图</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 字段列表</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> A表 <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> B表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">on</span> 关联条件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">where</span> 从表关联字段 <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span> <span class=\"token operator\">and</span> 等其他子句</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">select</span> 字段列表</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> A表 <span class=\"token keyword\">right</span> <span class=\"token keyword\">join</span> B表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">on</span> 关联条件</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">where</span> 从表关联字段 <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span> <span class=\"token operator\">and</span> 等其他子句</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> department_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> departments d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">WHERE</span> d<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> department_name</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> departments d</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "MySql",
                "sql"
            ]
        }
    ]
}